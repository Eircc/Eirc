2020-04-04 09:59:09 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 118196 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-04 09:59:09 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-04 09:59:09 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-04 09:59:09 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-04 09:59:12 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-04 09:59:12 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-04 09:59:12 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 155ms. Found 0 Redis repository interfaces.
2020-04-04 09:59:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 09:59:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$505dd1a9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 09:59:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 09:59:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 09:59:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$a8816159] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 09:59:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$ca9b1761] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 09:59:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 09:59:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$f1ca1655] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 09:59:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 09:59:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$2497cd72] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 09:59:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 09:59:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 09:59:13 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-04 09:59:13 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-04 09:59:14 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-04 09:59:14 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-04 09:59:14 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-04 09:59:14 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-04 09:59:14 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-04 09:59:14 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-04 09:59:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 09:59:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 09:59:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 09:59:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 09:59:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 09:59:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 09:59:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 09:59:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 09:59:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 09:59:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 09:59:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 09:59:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 09:59:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 09:59:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 09:59:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 09:59:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 09:59:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 09:59:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 09:59:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 09:59:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 09:59:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 09:59:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 09:59:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 09:59:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 09:59:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 09:59:16 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-04 09:59:16 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-04 09:59:16 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-04 09:59:16 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-04 09:59:17 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-04 09:59:17 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 8059 ms
2020-04-04 09:59:19 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-04 09:59:20 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-04 09:59:20 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-04 09:59:20 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-04 09:59:20 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-04 09:59:20 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-04 09:59:20 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-04 09:59:20 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585965560388'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-04 09:59:20 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-04 09:59:20 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-04 09:59:20 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@7d9a5edf
2020-04-04 09:59:21 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-04 09:59:21 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-04 09:59:21 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-04 09:59:22 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-04 09:59:22 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-04 09:59:22 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-04 09:59:22 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-04 09:59:22 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-04 09:59:22 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-04 09:59:22 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-04 09:59:22 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-04 09:59:22 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-04 09:59:22 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-04 09:59:22 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-04 09:59:22 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-04 09:59:22 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-04 09:59:22 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-04 09:59:23 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-04 09:59:23 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAvailableUsingGET_1
2020-04-04 09:59:23 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-04 09:59:23 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-04 09:59:23 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-04 09:59:23 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-04 09:59:23 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-04 09:59:23 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-04 09:59:23 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-04 09:59:23 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 15.523 seconds (JVM running for 21.886)
2020-04-04 09:59:23 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-04 09:59:23 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-04 09:59:24 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-04 09:59:24 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-04 09:59:24 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585922638748"'s failed in-progress jobs.
2020-04-04 09:59:24 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585965560388 started.
2020-04-04 09:59:24 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-04 09:59:24 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-04 09:59:24 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-04 09:59:24 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-04 09:59:24 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-04 09:59:25 INFO  RMI TCP Connection(5)-192.168.80.1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-04 09:59:25 INFO  RMI TCP Connection(5)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-04 09:59:25 INFO  RMI TCP Connection(5)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 27 ms
2020-04-04 09:59:27 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-04 09:59:32 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 09:59:32 | 耗时 35 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 09:59:33 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 09:59:33 | 耗时 6 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-04T09:59:33.072+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-04 09:59:33 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 09:59:33 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-04 09:59:33 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 09:59:33 | 耗时 18 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 09:59:33 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 09:59:33 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 09:59:34 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 09:59:34 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-04 09:59:34 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 09:59:34 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-04T09:59:34.679+0800' WHERE (USERNAME = 'ccc');
2020-04-04 09:59:34 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 09:59:34 | 耗时 12 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-04 09:59:34 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 09:59:34 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-04 09:59:34 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 09:59:34 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-04 09:59:34 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 09:59:34 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-04 09:59:34 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 09:59:34 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-04 09:59:36 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 09:59:36 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-04 09:59:36 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 09:59:36 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 09:59:36 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 09:59:36 | 耗时 10 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-04 09:59:36 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 09:59:36 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 09:59:39 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 09:59:39 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 09:59:39 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 09:59:39 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (ID = 24);
2020-04-04 09:59:39 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 09:59:39 | 耗时 2 ms | SQL 语句：
INSERT INTO t_order (MODIFYTIME, CREATETIME, PRICE, MOBILE, PLACE, USER_ID, PARK_ID, USERNAME) VALUES ('2020-04-03T22:05:31.000+0800', '2020-04-04T09:59:39.457+0800', 4.0, '15623041777', '湖北', 1, 24, '范甘迪');
2020-04-04 09:59:39 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 09:59:39 | 耗时 2 ms | SQL 语句：
UPDATE t_park SET OWNER = 1, MOBILE = '15623041777', AVAILABLE = '1', WHY = ' ', DESCRIPTION = '22222打的 啊啊啊啊', MODIFYTIME = '2020-04-04T09:59:39.475+0800', CREATETIME = '2020-04-03T13:16:47.000+0800', REVIEW = '1', PRICE = 4.0, PLACE = '湖北', SPAN = 'GTR', STATUS = '0', USERNAME = '范甘迪' WHERE ID = 24;
2020-04-04 09:59:39 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 09:59:39 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-04 09:59:39 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 09:59:39 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 09:59:59 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 09:59:59 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-04 09:59:59 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 09:59:59 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 10:00:02 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 10:00:02 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 10:00:02 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 10:00:02 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-04 10:00:02 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 10:00:02 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 10:02:09 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585965560388 paused.
2020-04-04 10:02:09 INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-04 10:02:09 INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-04-04 10:02:09 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585965560388 shutting down.
2020-04-04 10:02:09 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585965560388 paused.
2020-04-04 10:02:09 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585965560388 shutdown complete.
2020-04-04 10:02:09 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-04-04 10:02:09 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-04-04 10:02:09 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-04-04 10:02:09 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-04-04 10:02:09 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-04-04 10:02:09 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-04-04 11:02:43 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 119584 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-04 11:02:43 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-04 11:02:43 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-04 11:02:43 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-04 11:02:45 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-04 11:02:45 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-04 11:02:45 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 156ms. Found 0 Redis repository interfaces.
2020-04-04 11:02:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:02:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$1d6037a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:02:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:02:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:02:47 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$59f9932a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:02:47 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$7c134932] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:02:47 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:02:47 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$a3424826] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:02:47 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:02:47 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$d60fff43] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:02:47 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:02:47 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:02:47 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-04 11:02:47 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-04 11:02:47 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-04 11:02:47 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-04 11:02:47 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-04 11:02:47 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-04 11:02:47 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-04 11:02:47 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-04 11:02:47 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:02:47 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:02:47 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:02:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:02:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:02:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:02:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:02:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:02:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:02:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:02:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:02:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:02:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:02:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:02:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:02:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:02:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:02:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:02:49 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:02:49 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:02:49 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:02:49 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:02:49 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:02:49 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:02:49 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:02:49 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-04 11:02:49 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-04 11:02:49 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-04 11:02:49 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-04 11:02:50 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-04 11:02:50 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 6605 ms
2020-04-04 11:02:52 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-04 11:02:52 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-04 11:02:52 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-04 11:02:52 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-04 11:02:52 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-04 11:02:53 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-04 11:02:53 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-04 11:02:53 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585969372926'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-04 11:02:53 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-04 11:02:53 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-04 11:02:53 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@4e0b9055
2020-04-04 11:02:53 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-04 11:02:53 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-04 11:02:53 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-04 11:02:54 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-04 11:02:54 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-04 11:02:54 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-04 11:02:55 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-04 11:02:55 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-04 11:02:55 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-04 11:02:55 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-04 11:02:55 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-04 11:02:55 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-04 11:02:55 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-04 11:02:55 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-04 11:02:55 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-04 11:02:55 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-04 11:02:55 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-04 11:02:55 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-04 11:02:55 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-04 11:02:55 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-04 11:02:55 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-04 11:02:55 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-04 11:02:55 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAvailableUsingGET_1
2020-04-04 11:02:55 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-04 11:02:55 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-04 11:02:55 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-04 11:02:55 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 13.697 seconds (JVM running for 18.949)
2020-04-04 11:02:55 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-04 11:02:55 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-04 11:02:56 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-04 11:02:56 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-04 11:02:56 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585965560388"'s failed in-progress jobs.
2020-04-04 11:02:56 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-04 11:02:56 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-04 11:02:56 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-04 11:02:56 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-04 11:02:56 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-04 11:02:56 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585969372926 started.
2020-04-04 11:02:56 INFO  RMI TCP Connection(4)-192.168.80.1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-04 11:02:56 INFO  RMI TCP Connection(4)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-04 11:02:56 INFO  RMI TCP Connection(4)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 21 ms
2020-04-04 11:02:57 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-04 11:03:06 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:03:06 | 耗时 4 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:03:06 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:03:06 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-04T11:03:06.458+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-04 11:03:06 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 11:03:06 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-04 11:03:06 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 11:03:06 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 11:03:06 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 11:03:06 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:03:07 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 11:03:07 | 耗时 7 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-04 11:03:07 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:03:07 | 耗时 3 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-04T11:03:07.453+0800' WHERE (USERNAME = 'ccc');
2020-04-04 11:03:07 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:03:07 | 耗时 6 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-04 11:03:07 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:03:07 | 耗时 2 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-04 11:03:07 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:03:07 | 耗时 2 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-04 11:03:07 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:03:07 | 耗时 2 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-04 11:03:07 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:03:07 | 耗时 2 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-04 11:03:17 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 11:03:17 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-04 11:03:17 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 11:03:17 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 11:03:17 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:03:17 | 耗时 2 ms | SQL 语句：
SELECT MENU_ID, ICON, ORDER_NUM, MENU_NAME, TYPE, URL, PARENT_ID, MODIFY_TIME, CREATE_TIME, PERMS FROM t_menu ORDER BY ORDER_NUM ASC;
2020-04-04 11:03:46 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:03:46 | 耗时 13 ms | SQL 语句：
UPDATE t_menu SET ICON = 'layui-icon-gift', ORDER_NUM = 9, MENU_NAME = '我的订单', TYPE = '0', URL = '', PARENT_ID = 0, CREATE_TIME = '2020-04-04T11:03:46.519+0800', PERMS = '' WHERE MENU_ID = 190;
2020-04-04 11:03:46 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 11:03:46 | 耗时 2 ms | SQL 语句：
SELECT MENU_ID, ICON, ORDER_NUM, MENU_NAME, TYPE, URL, PARENT_ID, MODIFY_TIME, CREATE_TIME, PERMS FROM t_menu ORDER BY ORDER_NUM ASC;
2020-04-04 11:03:48 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 11:03:48 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-04 11:03:48 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 11:03:48 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 11:03:48 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 11:03:48 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:03:49 INFO  http-nio-8080-exec-6 p6spy 2020-04-04 11:03:49 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-04 11:03:49 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:03:49 | 耗时 1 ms | SQL 语句：
SELECT MENU_ID, ICON, ORDER_NUM, MENU_NAME, TYPE, URL, PARENT_ID, MODIFY_TIME, CREATE_TIME, PERMS FROM t_menu ORDER BY ORDER_NUM ASC;
2020-04-04 11:05:23 INFO  http-nio-8080-exec-5 p6spy 2020-04-04 11:05:23 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-04 11:05:23 INFO  http-nio-8080-exec-5 p6spy 2020-04-04 11:05:23 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 11:05:23 INFO  http-nio-8080-exec-5 p6spy 2020-04-04 11:05:23 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:05:24 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 11:05:24 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-04 11:05:24 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 11:05:24 | 耗时 2 ms | SQL 语句：
SELECT MENU_ID, ICON, ORDER_NUM, MENU_NAME, TYPE, URL, PARENT_ID, MODIFY_TIME, CREATE_TIME, PERMS FROM t_menu ORDER BY ORDER_NUM ASC;
2020-04-04 11:06:29 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:06:29 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-04 11:06:29 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:06:29 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 11:06:29 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:06:29 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:06:29 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 11:06:29 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-04 11:06:29 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 11:06:29 | 耗时 1 ms | SQL 语句：
SELECT MENU_ID, ICON, ORDER_NUM, MENU_NAME, TYPE, URL, PARENT_ID, MODIFY_TIME, CREATE_TIME, PERMS FROM t_menu ORDER BY ORDER_NUM ASC;
2020-04-04 11:06:30 INFO  http-nio-8080-exec-6 p6spy 2020-04-04 11:06:30 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-04 11:06:30 INFO  http-nio-8080-exec-6 p6spy 2020-04-04 11:06:30 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 11:06:30 INFO  http-nio-8080-exec-6 p6spy 2020-04-04 11:06:30 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:06:30 INFO  http-nio-8080-exec-5 p6spy 2020-04-04 11:06:30 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-04 11:06:31 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:06:31 | 耗时 1 ms | SQL 语句：
SELECT MENU_ID, ICON, ORDER_NUM, MENU_NAME, TYPE, URL, PARENT_ID, MODIFY_TIME, CREATE_TIME, PERMS FROM t_menu ORDER BY ORDER_NUM ASC;
2020-04-04 11:06:39 INFO  http-nio-8080-exec-6 p6spy 2020-04-04 11:06:39 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:06:39 INFO  http-nio-8080-exec-6 p6spy 2020-04-04 11:06:39 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-04T11:06:39.913+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-04 11:06:39 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 11:06:39 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-04 11:06:39 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 11:06:39 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 11:06:39 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 11:06:39 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:06:40 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:06:40 | 耗时 6 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-04 11:06:40 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:06:40 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-04T11:06:40.502+0800' WHERE (USERNAME = 'ccc');
2020-04-04 11:06:40 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:06:40 | 耗时 6 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-04 11:06:40 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:06:40 | 耗时 0 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-04 11:06:40 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:06:40 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-04 11:06:40 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:06:40 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-04 11:06:40 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:06:40 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-04 11:07:40 INFO  http-nio-8080-exec-6 p6spy 2020-04-04 11:07:40 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-04 11:07:40 INFO  http-nio-8080-exec-6 p6spy 2020-04-04 11:07:40 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 11:07:40 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:07:40 | 耗时 1 ms | SQL 语句：
SELECT MENU_ID, ICON, ORDER_NUM, MENU_NAME, TYPE, URL, PARENT_ID, MODIFY_TIME, CREATE_TIME, PERMS FROM t_menu ORDER BY ORDER_NUM ASC;
2020-04-04 11:08:54 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:08:54 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-04 11:08:54 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:08:54 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 11:08:54 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:08:54 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:08:55 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:08:55 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-04 11:08:55 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:08:55 | 耗时 2 ms | SQL 语句：
SELECT MENU_ID, ICON, ORDER_NUM, MENU_NAME, TYPE, URL, PARENT_ID, MODIFY_TIME, CREATE_TIME, PERMS FROM t_menu ORDER BY ORDER_NUM ASC;
2020-04-04 11:08:56 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 11:08:56 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-04 11:08:56 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 11:08:56 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 11:08:56 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 11:08:56 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:08:56 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 11:08:56 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-04 11:08:56 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:08:56 | 耗时 2 ms | SQL 语句：
SELECT MENU_ID, ICON, ORDER_NUM, MENU_NAME, TYPE, URL, PARENT_ID, MODIFY_TIME, CREATE_TIME, PERMS FROM t_menu ORDER BY ORDER_NUM ASC;
2020-04-04 11:08:59 INFO  http-nio-8080-exec-6 p6spy 2020-04-04 11:08:59 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-04 11:08:59 INFO  http-nio-8080-exec-6 p6spy 2020-04-04 11:08:59 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 11:08:59 INFO  http-nio-8080-exec-6 p6spy 2020-04-04 11:08:59 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:08:59 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:08:59 | 耗时 6 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-04 11:08:59 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 11:08:59 | 耗时 1 ms | SQL 语句：
SELECT MENU_ID, ICON, ORDER_NUM, MENU_NAME, TYPE, URL, PARENT_ID, MODIFY_TIME, CREATE_TIME, PERMS FROM t_menu ORDER BY ORDER_NUM ASC;
2020-04-04 11:09:08 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 11:09:08 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:09:08 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 11:09:08 | 耗时 1 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-04T11:09:08.385+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-04 11:09:08 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:09:08 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-04 11:09:08 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:09:08 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 11:09:08 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:09:08 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:09:08 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 11:09:08 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-04 11:09:08 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 11:09:08 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-04T11:09:08.952+0800' WHERE (USERNAME = 'ccc');
2020-04-04 11:09:08 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 11:09:08 | 耗时 2 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-04 11:09:08 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 11:09:08 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-04 11:09:08 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 11:09:08 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-04 11:09:08 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 11:09:08 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-04 11:09:08 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 11:09:08 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-04 11:09:12 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:09:12 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-04 11:09:12 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:09:12 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 11:09:12 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:09:12 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:09:12 INFO  http-nio-8080-exec-5 p6spy 2020-04-04 11:09:12 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-04 11:09:12 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:09:12 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-04T11:09:12.816+0800' WHERE (USERNAME = 'ccc');
2020-04-04 11:09:12 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:09:12 | 耗时 5 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-04 11:09:12 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:09:12 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-04 11:09:12 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:09:12 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-04 11:09:12 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:09:12 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-04 11:09:12 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:09:12 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-04 11:09:13 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:09:13 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-04 11:09:13 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:09:13 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 11:09:14 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:09:14 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:09:14 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 11:09:14 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-04 11:09:14 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 11:09:14 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-04T11:09:14.506+0800' WHERE (USERNAME = 'ccc');
2020-04-04 11:09:14 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 11:09:14 | 耗时 2 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-04 11:09:14 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 11:09:14 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-04 11:09:14 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 11:09:14 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-04 11:09:14 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 11:09:14 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-04 11:09:14 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 11:09:14 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-04 11:09:19 INFO  http-nio-8080-exec-6 p6spy 2020-04-04 11:09:19 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-04 11:09:19 INFO  http-nio-8080-exec-6 p6spy 2020-04-04 11:09:19 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 11:09:19 INFO  http-nio-8080-exec-6 p6spy 2020-04-04 11:09:19 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:09:19 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 11:09:19 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-04 11:09:19 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:09:19 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-04T11:09:19.877+0800' WHERE (USERNAME = 'ccc');
2020-04-04 11:09:19 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:09:19 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-04 11:09:19 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:09:19 | 耗时 0 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-04 11:09:19 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:09:19 | 耗时 0 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-04 11:09:19 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:09:19 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-04 11:09:19 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:09:19 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-04 11:09:34 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585969372926 paused.
2020-04-04 11:09:34 INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-04 11:09:34 INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-04-04 11:09:34 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585969372926 shutting down.
2020-04-04 11:09:34 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585969372926 paused.
2020-04-04 11:09:34 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585969372926 shutdown complete.
2020-04-04 11:09:34 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-04-04 11:09:34 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-04-04 11:09:34 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-04-04 11:09:34 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-04-04 11:09:34 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-04-04 11:09:34 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-04-04 11:11:16 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 119612 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-04 11:11:16 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-04 11:11:16 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-04 11:11:16 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-04 11:11:18 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-04 11:11:18 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-04 11:11:19 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 189ms. Found 0 Redis repository interfaces.
2020-04-04 11:11:20 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:11:20 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$badb7a57] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:11:20 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:11:20 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:11:20 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$12ff0a07] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:11:20 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$3518c00f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:11:20 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:11:20 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$5c47bf03] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:11:20 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:11:20 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$8f157620] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:11:20 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:11:20 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:11:20 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-04 11:11:20 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-04 11:11:20 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-04 11:11:20 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-04 11:11:20 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-04 11:11:20 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-04 11:11:20 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-04 11:11:20 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-04 11:11:20 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:11:20 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:11:20 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:11:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:11:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:11:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:11:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:11:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:11:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:11:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:11:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:11:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:11:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:11:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:11:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:11:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:11:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:11:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:11:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:11:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:11:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:11:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:11:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:11:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:11:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:11:22 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-04 11:11:22 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-04 11:11:22 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-04 11:11:22 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-04 11:11:23 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-04 11:11:23 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 6516 ms
2020-04-04 11:11:25 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-04 11:11:25 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-04 11:11:25 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-04 11:11:25 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-04 11:11:25 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-04 11:11:25 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-04 11:11:25 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-04 11:11:25 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585969885793'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-04 11:11:25 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-04 11:11:25 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-04 11:11:25 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@793942d9
2020-04-04 11:11:26 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-04 11:11:26 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-04 11:11:26 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-04 11:11:27 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-04 11:11:27 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-04 11:11:27 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-04 11:11:27 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-04 11:11:27 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-04 11:11:27 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-04 11:11:27 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-04 11:11:27 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-04 11:11:27 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-04 11:11:27 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-04 11:11:27 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-04 11:11:27 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-04 11:11:27 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-04 11:11:27 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-04 11:11:27 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-04 11:11:28 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-04 11:11:28 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAvailableUsingGET_1
2020-04-04 11:11:28 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-04 11:11:28 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-04 11:11:28 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-04 11:11:28 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-04 11:11:28 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-04 11:11:28 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-04 11:11:28 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 12.838 seconds (JVM running for 18.512)
2020-04-04 11:11:28 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-04 11:11:28 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-04 11:11:29 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-04 11:11:29 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-04 11:11:29 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-04 11:11:29 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-04 11:11:29 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-04 11:11:29 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-04 11:11:29 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-04 11:11:29 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585969372926"'s failed in-progress jobs.
2020-04-04 11:11:29 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585969885793 started.
2020-04-04 11:11:29 INFO  RMI TCP Connection(6)-192.168.80.1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-04 11:11:29 INFO  RMI TCP Connection(6)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-04 11:11:29 INFO  RMI TCP Connection(6)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 39 ms
2020-04-04 11:11:29 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-04 11:11:37 INFO  http-nio-8080-exec-4 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-04 11:11:37 INFO  http-nio-8080-exec-4 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 62ms. Found 0 Redis repository interfaces.
2020-04-04 11:11:37 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 11:11:37 | 耗时 4 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:11:37 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 11:11:37 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-04T11:11:37.573+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-04 11:11:37 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:11:37 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-04 11:11:37 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:11:37 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 11:11:37 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:11:37 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:11:38 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 11:11:38 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-04 11:11:38 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:11:38 | 耗时 3 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-04T11:11:38.404+0800' WHERE (USERNAME = 'ccc');
2020-04-04 11:11:38 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:11:38 | 耗时 13 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-04 11:11:38 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:11:38 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-04 11:11:38 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:11:38 | 耗时 2 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-04 11:11:38 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:11:38 | 耗时 2 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-04 11:11:38 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:11:38 | 耗时 2 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-04 11:11:40 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:11:40 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-04 11:11:40 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:11:40 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 11:11:40 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 11:11:40 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:11:40 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 11:11:40 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-04 11:11:40 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 11:11:40 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:11:44 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 11:11:44 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-04 11:11:44 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 11:11:44 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:11:45 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:11:45 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-04 11:11:45 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:11:45 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:13:17 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 11:13:17 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-04 11:13:17 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 11:13:17 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 11:13:17 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 11:13:17 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:13:18 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:13:18 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-04 11:13:18 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 11:13:18 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-04 11:13:18 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 11:13:18 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:13:23 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 11:13:23 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:13:23 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 11:13:23 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_order WHERE (USER_ID = 1);
2020-04-04 11:13:23 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 11:13:23 | 耗时 1 ms | SQL 语句：
SELECT MODIFYTIME, CREATETIME, PRICE, MOBILE, PLACE, USER_ID, PARK_ID, USERNAME FROM t_order WHERE (USER_ID = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:13:28 INFO  http-nio-8080-exec-5 p6spy 2020-04-04 11:13:28 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-04 11:13:37 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:13:37 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:13:37 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:13:37 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_order WHERE (USERNAME = '范甘迪' AND USER_ID = 1);
2020-04-04 11:13:37 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:13:37 | 耗时 1 ms | SQL 语句：
SELECT MODIFYTIME, CREATETIME, PRICE, MOBILE, PLACE, USER_ID, PARK_ID, USERNAME FROM t_order WHERE (USERNAME = '范甘迪' AND USER_ID = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:13:38 INFO  http-nio-8080-exec-6 p6spy 2020-04-04 11:13:38 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:13:38 INFO  http-nio-8080-exec-6 p6spy 2020-04-04 11:13:38 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_order WHERE (USERNAME = '范甘迪' AND USER_ID = 1);
2020-04-04 11:13:38 INFO  http-nio-8080-exec-6 p6spy 2020-04-04 11:13:38 | 耗时 1 ms | SQL 语句：
SELECT MODIFYTIME, CREATETIME, PRICE, MOBILE, PLACE, USER_ID, PARK_ID, USERNAME FROM t_order WHERE (USERNAME = '范甘迪' AND USER_ID = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:13:48 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 11:13:48 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:13:48 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 11:13:48 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_order WHERE (USERNAME = '藤原拓海' AND USER_ID = 1);
2020-04-04 11:13:53 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 11:13:53 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:13:53 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 11:13:53 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_order WHERE (PLACE = '武汉市' AND USER_ID = 1);
2020-04-04 11:13:54 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:13:54 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:13:54 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:13:54 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_order WHERE (USER_ID = 1);
2020-04-04 11:13:54 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:13:54 | 耗时 1 ms | SQL 语句：
SELECT MODIFYTIME, CREATETIME, PRICE, MOBILE, PLACE, USER_ID, PARK_ID, USERNAME FROM t_order WHERE (USER_ID = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:13:58 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 11:13:58 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:13:59 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 11:13:59 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_order WHERE (PLACE = '湖北' AND USER_ID = 1);
2020-04-04 11:13:59 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 11:13:59 | 耗时 1 ms | SQL 语句：
SELECT MODIFYTIME, CREATETIME, PRICE, MOBILE, PLACE, USER_ID, PARK_ID, USERNAME FROM t_order WHERE (PLACE = '湖北' AND USER_ID = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:14:13 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:14:13 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:14:13 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:14:13 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_order WHERE (CREATETIME <= '2020-04-05' AND CREATETIME >= '2020-04-06' AND USER_ID = 1);
2020-04-04 11:14:21 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 11:14:21 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:14:21 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 11:14:21 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_order WHERE (CREATETIME <= '2020-04-03' AND CREATETIME >= '2020-04-05' AND USER_ID = 1);
2020-04-04 11:14:24 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 11:14:24 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:14:24 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 11:14:24 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_order WHERE (CREATETIME <= '2020-04-03' AND CREATETIME >= '2020-04-05' AND USER_ID = 1);
2020-04-04 11:14:24 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:14:24 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:14:24 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:14:24 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_order WHERE (CREATETIME <= '2020-04-03' AND CREATETIME >= '2020-04-05' AND USER_ID = 1);
2020-04-04 11:14:24 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 11:14:24 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:14:24 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 11:14:24 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_order WHERE (CREATETIME <= '2020-04-03' AND CREATETIME >= '2020-04-05' AND USER_ID = 1);
2020-04-04 11:14:30 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:14:30 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:14:30 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:14:30 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_order WHERE (USER_ID = 1);
2020-04-04 11:14:30 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:14:30 | 耗时 1 ms | SQL 语句：
SELECT MODIFYTIME, CREATETIME, PRICE, MOBILE, PLACE, USER_ID, PARK_ID, USERNAME FROM t_order WHERE (USER_ID = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:14:33 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 11:14:33 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:14:33 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 11:14:33 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_order WHERE (MOBILE = '15623041777' AND USER_ID = 1);
2020-04-04 11:14:33 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 11:14:33 | 耗时 1 ms | SQL 语句：
SELECT MODIFYTIME, CREATETIME, PRICE, MOBILE, PLACE, USER_ID, PARK_ID, USERNAME FROM t_order WHERE (MOBILE = '15623041777' AND USER_ID = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:14:34 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 11:14:34 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:14:34 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 11:14:34 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_order WHERE (MOBILE = '15623041777' AND USER_ID = 1);
2020-04-04 11:14:34 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 11:14:34 | 耗时 1 ms | SQL 语句：
SELECT MODIFYTIME, CREATETIME, PRICE, MOBILE, PLACE, USER_ID, PARK_ID, USERNAME FROM t_order WHERE (MOBILE = '15623041777' AND USER_ID = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:14:38 INFO  http-nio-8080-exec-5 p6spy 2020-04-04 11:14:38 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-04 11:14:38 INFO  http-nio-8080-exec-5 p6spy 2020-04-04 11:14:38 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 11:14:38 INFO  http-nio-8080-exec-5 p6spy 2020-04-04 11:14:38 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:14:38 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:14:38 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-04 11:14:38 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 11:14:38 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:14:38 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 11:14:38 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_order WHERE (USER_ID = 1);
2020-04-04 11:14:38 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 11:14:38 | 耗时 0 ms | SQL 语句：
SELECT MODIFYTIME, CREATETIME, PRICE, MOBILE, PLACE, USER_ID, PARK_ID, USERNAME FROM t_order WHERE (USER_ID = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:14:41 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 11:14:41 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:14:41 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 11:14:41 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-04 11:14:41 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 11:14:41 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:14:43 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 11:14:43 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-04 11:14:43 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 11:14:43 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:14:48 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 11:14:48 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-04 11:14:48 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 11:14:48 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:14:51 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:14:51 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:14:51 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:14:51 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_order WHERE (USER_ID = 1);
2020-04-04 11:14:51 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:14:51 | 耗时 1 ms | SQL 语句：
SELECT MODIFYTIME, CREATETIME, PRICE, MOBILE, PLACE, USER_ID, PARK_ID, USERNAME FROM t_order WHERE (USER_ID = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:15:00 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 11:15:00 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-04 11:15:04 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 11:15:04 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-04 11:16:09 INFO  File Watcher org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-04 11:16:09 INFO  File Watcher org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 139ms. Found 0 Redis repository interfaces.
2020-04-04 11:16:15 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:16:15 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-04 11:16:15 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:16:15 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 11:16:15 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:16:15 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:16:16 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 11:16:16 | 耗时 6 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-04 11:16:16 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:16:16 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:16:16 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:16:16 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_order WHERE (USER_ID = 1);
2020-04-04 11:16:16 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:16:16 | 耗时 2 ms | SQL 语句：
SELECT MODIFYTIME, CREATETIME, PRICE, MOBILE, PLACE, USER_ID, PARK_ID, USERNAME FROM t_order WHERE (USER_ID = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:16:24 INFO  http-nio-8080-exec-1 org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-04 11:16:24 INFO  http-nio-8080-exec-1 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-04 11:16:24 INFO  http-nio-8080-exec-1 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 283ms. Found 0 Redis repository interfaces.
2020-04-04 11:16:25 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:16:25 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:16:25 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:16:25 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM t_order WHERE (CREATETIME >= '2020-04-03' AND CREATETIME <= '2020-04-05' AND USER_ID = 1);
2020-04-04 11:16:25 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:16:25 | 耗时 2 ms | SQL 语句：
SELECT MODIFYTIME, CREATETIME, PRICE, MOBILE, PLACE, USER_ID, PARK_ID, USERNAME FROM t_order WHERE (CREATETIME >= '2020-04-03' AND CREATETIME <= '2020-04-05' AND USER_ID = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:16:29 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 11:16:29 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:16:29 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 11:16:29 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_order WHERE (USER_ID = 1);
2020-04-04 11:16:29 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 11:16:29 | 耗时 1 ms | SQL 语句：
SELECT MODIFYTIME, CREATETIME, PRICE, MOBILE, PLACE, USER_ID, PARK_ID, USERNAME FROM t_order WHERE (USER_ID = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:16:42 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 11:16:42 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:16:42 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 11:16:42 | 耗时 1 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-04T11:16:42.959+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'cccc');
2020-04-04 11:16:43 INFO  http-nio-8080-exec-5 p6spy 2020-04-04 11:16:43 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-04 11:16:43 INFO  http-nio-8080-exec-5 p6spy 2020-04-04 11:16:43 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 11:16:43 INFO  http-nio-8080-exec-5 p6spy 2020-04-04 11:16:43 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:16:43 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 11:16:43 | 耗时 6 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-04 11:16:43 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:16:43 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-04T11:16:43.611+0800' WHERE (USERNAME = 'cccc');
2020-04-04 11:16:43 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:16:43 | 耗时 6 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-04 11:16:43 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:16:43 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-04 11:16:43 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:16:43 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-04 11:16:43 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:16:43 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-04 11:16:43 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:16:43 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'cccc' GROUP BY days;
2020-04-04 11:16:44 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 11:16:44 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-04 11:16:44 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 11:16:44 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 11:16:44 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 11:16:44 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:16:44 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 11:16:44 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_order WHERE (USER_ID = 10);
2020-04-04 11:16:46 INFO  http-nio-8080-exec-5 p6spy 2020-04-04 11:16:46 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:16:46 INFO  http-nio-8080-exec-5 p6spy 2020-04-04 11:16:46 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 10);
2020-04-04 11:16:46 INFO  http-nio-8080-exec-5 p6spy 2020-04-04 11:16:46 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 10) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:16:48 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:16:48 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-04 11:16:48 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:16:48 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:16:56 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:16:56 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:16:56 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:16:56 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (ID = 14);
2020-04-04 11:16:56 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:16:56 | 耗时 2 ms | SQL 语句：
INSERT INTO t_order (MODIFYTIME, CREATETIME, PRICE, MOBILE, PLACE, USER_ID, PARK_ID, USERNAME) VALUES ('2020-04-03T12:52:42.000+0800', '2020-04-04T11:16:56.498+0800', 0.0, '15623041759', '武汉市', 10, 14, 'cccccc');
2020-04-04 11:16:56 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:16:56 | 耗时 2 ms | SQL 语句：
UPDATE t_park SET OWNER = 10, MOBILE = '15623041759', AVAILABLE = '1', DESCRIPTION = '88888', MODIFYTIME = '2020-04-04T11:16:56.508+0800', CREATETIME = '2020-03-31T18:59:35.000+0800', REVIEW = '1', PRICE = 0.0, PLACE = '武汉市', SPAN = 'FC', STATUS = '0', USERNAME = 'cccccc' WHERE ID = 14;
2020-04-04 11:16:56 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 11:16:56 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-04 11:16:56 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 11:16:56 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:16:58 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 11:16:58 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:16:58 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 11:16:58 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_order WHERE (USER_ID = 10);
2020-04-04 11:16:58 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 11:16:58 | 耗时 1 ms | SQL 语句：
SELECT MODIFYTIME, CREATETIME, PRICE, MOBILE, PLACE, USER_ID, PARK_ID, USERNAME FROM t_order WHERE (USER_ID = 10) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:17:00 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 11:17:00 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'cccccc';
2020-04-04 11:17:05 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 11:17:05 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-04 11:17:05 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 11:17:05 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:17:07 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:17:07 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:17:07 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:17:07 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 10);
2020-04-04 11:17:07 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:17:07 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 10) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:17:20 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:17:20 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:17:20 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:17:20 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (CREATETIME <= '2020-04-02' AND CREATETIME >= '2020-04-04' AND OWNER = 10);
2020-04-04 11:17:21 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 11:17:21 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:17:21 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 11:17:21 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (CREATETIME <= '2020-04-02' AND CREATETIME >= '2020-04-04' AND OWNER = 10);
2020-04-04 11:17:21 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:17:21 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:17:21 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:17:21 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (CREATETIME <= '2020-04-02' AND CREATETIME >= '2020-04-04' AND OWNER = 10);
2020-04-04 11:17:21 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 11:17:21 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:17:21 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 11:17:21 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (CREATETIME <= '2020-04-02' AND CREATETIME >= '2020-04-04' AND OWNER = 10);
2020-04-04 11:17:21 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 11:17:21 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:17:21 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 11:17:21 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (CREATETIME <= '2020-04-02' AND CREATETIME >= '2020-04-04' AND OWNER = 10);
2020-04-04 11:17:22 INFO  http-nio-8080-exec-6 p6spy 2020-04-04 11:17:22 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:17:22 INFO  http-nio-8080-exec-6 p6spy 2020-04-04 11:17:22 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (CREATETIME <= '2020-04-02' AND CREATETIME >= '2020-04-04' AND OWNER = 10);
2020-04-04 11:17:22 INFO  http-nio-8080-exec-5 p6spy 2020-04-04 11:17:22 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:17:22 INFO  http-nio-8080-exec-5 p6spy 2020-04-04 11:17:22 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (CREATETIME <= '2020-04-02' AND CREATETIME >= '2020-04-04' AND OWNER = 10);
2020-04-04 11:17:30 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 11:17:30 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:17:30 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 11:17:30 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 10);
2020-04-04 11:17:30 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 11:17:30 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 10) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:17:39 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 11:17:39 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:17:39 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 11:17:39 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND OWNER = 10);
2020-04-04 11:17:39 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 11:17:39 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND OWNER = 10) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:17:43 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 11:17:43 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:17:43 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 11:17:43 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1' AND OWNER = 10);
2020-04-04 11:17:46 INFO  http-nio-8080-exec-6 p6spy 2020-04-04 11:17:46 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:17:46 INFO  http-nio-8080-exec-6 p6spy 2020-04-04 11:17:46 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '0' AND AVAILABLE = '1' AND OWNER = 10);
2020-04-04 11:17:46 INFO  http-nio-8080-exec-6 p6spy 2020-04-04 11:17:46 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '0' AND AVAILABLE = '1' AND OWNER = 10) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:17:51 INFO  http-nio-8080-exec-5 p6spy 2020-04-04 11:17:51 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:17:51 INFO  http-nio-8080-exec-5 p6spy 2020-04-04 11:17:51 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1' AND OWNER = 10);
2020-04-04 11:17:55 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 11:17:55 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:17:55 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 11:17:55 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '0' AND OWNER = 10);
2020-04-04 11:17:55 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 11:17:55 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '0' AND OWNER = 10) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:17:57 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 11:17:57 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:17:57 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 11:17:57 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 10);
2020-04-04 11:17:57 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 11:17:57 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 10) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:18:06 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:18:06 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:18:06 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:18:06 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (CREATETIME <= '2020-04-02' AND CREATETIME >= '2020-04-04' AND OWNER = 10);
2020-04-04 11:18:09 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:18:09 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:18:09 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:18:09 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 10);
2020-04-04 11:18:09 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:18:09 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 10) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:18:54 INFO  http-nio-8080-exec-4 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-04 11:18:54 INFO  http-nio-8080-exec-4 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 101ms. Found 0 Redis repository interfaces.
2020-04-04 11:18:55 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 11:18:55 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-04 11:18:55 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 11:18:55 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 11:18:55 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 11:18:55 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:18:55 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 11:18:55 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-04 11:18:56 INFO  http-nio-8080-exec-5 p6spy 2020-04-04 11:18:56 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:18:56 INFO  http-nio-8080-exec-5 p6spy 2020-04-04 11:18:56 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 10);
2020-04-04 11:18:56 INFO  http-nio-8080-exec-5 p6spy 2020-04-04 11:18:56 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 10) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:19:06 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:19:06 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:19:06 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:19:06 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (CREATETIME >= '2020-04-02' AND CREATETIME <= '2020-04-04' AND OWNER = 10);
2020-04-04 11:19:06 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:19:06 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (CREATETIME >= '2020-04-02' AND CREATETIME <= '2020-04-04' AND OWNER = 10) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:19:10 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 11:19:10 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:19:10 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 11:19:10 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (CREATETIME >= '2020-04-02' AND CREATETIME <= '2020-04-04' AND OWNER = 10);
2020-04-04 11:19:10 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 11:19:10 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (CREATETIME >= '2020-04-02' AND CREATETIME <= '2020-04-04' AND OWNER = 10) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:19:11 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 11:19:11 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:19:11 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 11:19:11 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 10);
2020-04-04 11:19:11 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 11:19:11 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 10) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:19:13 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 11:19:13 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:19:13 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 11:19:13 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_order WHERE (USER_ID = 10);
2020-04-04 11:19:13 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 11:19:13 | 耗时 1 ms | SQL 语句：
SELECT MODIFYTIME, CREATETIME, PRICE, MOBILE, PLACE, USER_ID, PARK_ID, USERNAME FROM t_order WHERE (USER_ID = 10) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:20:03 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:20:03 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-04 11:20:03 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:20:03 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 11:20:03 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:20:03 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:20:03 INFO  http-nio-8080-exec-5 p6spy 2020-04-04 11:20:03 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-04 11:20:03 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:20:03 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:20:03 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:20:03 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_order WHERE (USER_ID = 10);
2020-04-04 11:20:03 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:20:03 | 耗时 1 ms | SQL 语句：
SELECT MODIFYTIME, CREATETIME, PRICE, MOBILE, PLACE, USER_ID, PARK_ID, USERNAME FROM t_order WHERE (USER_ID = 10) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:20:05 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 11:20:05 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-04 11:20:05 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 11:20:05 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 11:20:05 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 11:20:05 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:20:05 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 11:20:05 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-04 11:20:05 INFO  http-nio-8080-exec-6 p6spy 2020-04-04 11:20:05 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:20:05 INFO  http-nio-8080-exec-6 p6spy 2020-04-04 11:20:05 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_order WHERE (USER_ID = 10);
2020-04-04 11:20:05 INFO  http-nio-8080-exec-6 p6spy 2020-04-04 11:20:05 | 耗时 1 ms | SQL 语句：
SELECT MODIFYTIME, CREATETIME, PRICE, MOBILE, PLACE, USER_ID, PARK_ID, USERNAME FROM t_order WHERE (USER_ID = 10) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:20:19 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:20:19 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-04 11:20:19 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:20:19 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 11:20:19 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:20:19 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:20:19 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:20:19 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-04 11:20:19 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 11:20:19 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:20:19 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 11:20:19 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_order WHERE (USER_ID = 10);
2020-04-04 11:20:19 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 11:20:19 | 耗时 0 ms | SQL 语句：
SELECT MODIFYTIME, CREATETIME, PRICE, MOBILE, PLACE, USER_ID, PARK_ID, USERNAME FROM t_order WHERE (USER_ID = 10) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:20:20 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:20:20 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-04 11:20:20 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:20:20 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 11:20:20 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:20:20 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:20:20 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:20:20 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-04 11:20:20 INFO  http-nio-8080-exec-6 p6spy 2020-04-04 11:20:20 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:20:20 INFO  http-nio-8080-exec-6 p6spy 2020-04-04 11:20:20 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_order WHERE (USER_ID = 10);
2020-04-04 11:20:20 INFO  http-nio-8080-exec-6 p6spy 2020-04-04 11:20:20 | 耗时 2 ms | SQL 语句：
SELECT MODIFYTIME, CREATETIME, PRICE, MOBILE, PLACE, USER_ID, PARK_ID, USERNAME FROM t_order WHERE (USER_ID = 10) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:20:22 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:20:22 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-04 11:20:22 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:20:22 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 11:20:22 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 11:20:22 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:20:23 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:20:23 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-04 11:20:23 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 11:20:23 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:20:23 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 11:20:23 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_order WHERE (USER_ID = 10);
2020-04-04 11:20:23 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 11:20:23 | 耗时 1 ms | SQL 语句：
SELECT MODIFYTIME, CREATETIME, PRICE, MOBILE, PLACE, USER_ID, PARK_ID, USERNAME FROM t_order WHERE (USER_ID = 10) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:20:29 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:20:29 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:20:29 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:20:29 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_order WHERE (USERNAME = 'cccccc' AND USER_ID = 10);
2020-04-04 11:20:29 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 11:20:29 | 耗时 1 ms | SQL 语句：
SELECT MODIFYTIME, CREATETIME, PRICE, MOBILE, PLACE, USER_ID, PARK_ID, USERNAME FROM t_order WHERE (USERNAME = 'cccccc' AND USER_ID = 10) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:20:29 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 11:20:29 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:20:29 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 11:20:29 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_order WHERE (USERNAME = 'cccccc' AND USER_ID = 10);
2020-04-04 11:20:29 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 11:20:29 | 耗时 1 ms | SQL 语句：
SELECT MODIFYTIME, CREATETIME, PRICE, MOBILE, PLACE, USER_ID, PARK_ID, USERNAME FROM t_order WHERE (USERNAME = 'cccccc' AND USER_ID = 10) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:20:34 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 11:20:34 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'cccccc';
2020-04-04 11:20:39 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:20:39 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 11:20:39 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:20:39 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 10);
2020-04-04 11:20:39 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 11:20:39 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 10) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:20:44 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 11:20:44 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-04 11:20:44 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 11:20:44 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 11:20:46 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 11:20:46 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-04T11:20:46.065+0800' WHERE (USERNAME = 'cccc');
2020-04-04 11:20:46 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 11:20:46 | 耗时 2 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-04 11:20:46 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 11:20:46 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-04 11:20:46 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 11:20:46 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-04 11:20:46 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 11:20:46 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-04 11:20:46 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 11:20:46 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'cccc' GROUP BY days;
2020-04-04 11:23:30 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585969885793 paused.
2020-04-04 11:23:30 INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-04 11:23:30 INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-04-04 11:23:30 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585969885793 shutting down.
2020-04-04 11:23:30 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585969885793 paused.
2020-04-04 11:23:30 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585969885793 shutdown complete.
2020-04-04 11:23:31 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-04-04 11:23:31 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-04-04 11:23:31 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-04-04 11:23:31 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-04-04 11:23:31 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-04-04 11:23:31 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-04-04 11:46:06 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 110636 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-04 11:46:06 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-04 11:46:06 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-04 11:46:06 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-04 11:46:09 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-04 11:46:09 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-04 11:46:09 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 193ms. Found 0 Redis repository interfaces.
2020-04-04 11:46:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:46:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$6a4f1ede] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:46:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:46:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:46:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$c272ae8e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:46:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$e48c6496] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:46:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:46:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$bbb638a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:46:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:46:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$3e891aa7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:46:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:46:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:46:10 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-04 11:46:10 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-04 11:46:11 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-04 11:46:11 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-04 11:46:11 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-04 11:46:11 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-04 11:46:11 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-04 11:46:11 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-04 11:46:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:46:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:46:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:46:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:46:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:46:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:46:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:46:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:46:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:46:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:46:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:46:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:46:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:46:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:46:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:46:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:46:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:46:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:46:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:46:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:46:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:46:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:46:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:46:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:46:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 11:46:12 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-04 11:46:13 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-04 11:46:13 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-04 11:46:13 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-04 11:46:13 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-04 11:46:13 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 6907 ms
2020-04-04 11:46:15 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-04 11:46:16 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-04 11:46:16 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-04 11:46:16 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-04 11:46:16 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-04 11:46:16 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-04 11:46:16 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-04 11:46:16 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585971976189'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-04 11:46:16 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-04 11:46:16 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-04 11:46:16 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@79b01476
2020-04-04 11:46:16 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-04 11:46:16 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-04 11:46:16 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-04 11:46:17 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-04 11:46:17 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-04 11:46:17 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-04 11:46:18 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-04 11:46:18 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-04 11:46:18 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-04 11:46:18 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-04 11:46:18 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-04 11:46:18 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-04 11:46:18 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-04 11:46:18 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-04 11:46:18 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-04 11:46:18 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-04 11:46:18 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-04 11:46:18 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-04 11:46:18 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAvailableUsingGET_1
2020-04-04 11:46:18 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-04 11:46:18 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-04 11:46:18 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-04 11:46:18 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-04 11:46:18 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-04 11:46:18 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-04 11:46:18 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-04 11:46:18 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 13.727 seconds (JVM running for 18.76)
2020-04-04 11:46:18 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-04 11:46:18 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-04 11:46:19 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-04 11:46:19 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-04 11:46:19 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-04 11:46:19 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-04 11:46:19 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-04 11:46:19 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-04 11:46:19 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-04 11:46:19 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585969885793"'s failed in-progress jobs.
2020-04-04 11:46:19 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585971976189 started.
2020-04-04 11:46:19 INFO  RMI TCP Connection(3)-192.168.80.1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-04 11:46:19 INFO  RMI TCP Connection(3)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-04 11:46:19 INFO  RMI TCP Connection(3)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 28 ms
2020-04-04 11:46:20 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-04 11:47:08 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585971976189 paused.
2020-04-04 11:47:08 INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-04 11:47:08 INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-04-04 11:47:08 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585971976189 shutting down.
2020-04-04 11:47:08 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585971976189 paused.
2020-04-04 11:47:08 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585971976189 shutdown complete.
2020-04-04 11:47:08 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-04-04 11:47:08 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-04-04 11:47:08 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-04-04 11:47:08 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-04-04 11:47:08 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-04-04 11:47:08 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-04-04 19:48:50 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 108000 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-04 19:48:50 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-04 19:48:50 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-04 19:48:50 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-04 19:48:53 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-04 19:48:53 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-04 19:48:53 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 278ms. Found 0 Redis repository interfaces.
2020-04-04 19:48:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:48:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$606d90aa] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:48:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:48:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:48:55 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$b891205a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:48:55 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$daaad662] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:48:55 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:48:55 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$1d9d556] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:48:55 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:48:55 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$34a78c73] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:48:55 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:48:55 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:48:55 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-04 19:48:55 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-04 19:49:17 INFO  main org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-04-04 19:53:20 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 120868 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-04 19:53:20 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-04 19:53:21 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-04 19:53:21 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-04 19:53:23 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-04 19:53:23 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-04 19:53:23 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 172ms. Found 0 Redis repository interfaces.
2020-04-04 19:53:24 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:53:24 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$b4335099] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:53:24 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:53:24 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:53:24 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$c56e049] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:53:24 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$2e709651] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:53:25 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:53:25 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$559f9545] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:53:25 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:53:25 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$886d4c62] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:53:25 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:53:25 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:53:25 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-04 19:53:25 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-04 19:53:25 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-04 19:53:25 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-04 19:53:25 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-04 19:53:25 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-04 19:53:25 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-04 19:53:25 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-04 19:53:25 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:53:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:53:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:53:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:53:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:53:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:53:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:53:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:53:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:53:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:53:27 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:53:27 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:53:27 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:53:27 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:53:27 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:53:27 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:53:27 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:53:27 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:53:27 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:53:27 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:53:27 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:53:27 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:53:27 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:53:27 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:53:27 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-04 19:53:27 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-04 19:53:27 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-04 19:53:27 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-04 19:53:27 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-04 19:53:28 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-04 19:53:28 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 7199 ms
2020-04-04 19:53:30 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-04 19:53:30 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-04 19:53:31 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-04 19:53:31 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-04 19:53:31 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-04 19:53:31 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-04 19:53:31 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-04 19:53:31 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1586001211080'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-04 19:53:31 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-04 19:53:31 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-04 19:53:31 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@2f65c341
2020-04-04 19:53:31 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-04 19:53:31 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-04 19:53:31 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-04 19:53:32 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-04 19:53:32 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-04 19:53:32 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-04 19:53:33 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-04 19:53:33 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-04 19:53:33 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-04 19:53:33 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-04 19:53:33 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-04 19:53:33 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-04 19:53:33 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-04 19:53:33 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-04 19:53:33 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-04 19:53:33 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-04 19:53:33 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-04 19:53:33 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-04 19:53:33 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-04 19:53:33 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-04 19:53:33 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-04 19:53:33 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-04 19:53:33 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAvailableUsingGET_1
2020-04-04 19:53:33 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-04 19:53:33 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-04 19:53:33 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-04 19:53:33 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 13.799 seconds (JVM running for 18.937)
2020-04-04 19:53:34 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-04 19:53:34 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-04 19:53:34 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-04 19:53:34 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-04 19:53:34 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585971976189"'s failed in-progress jobs.
2020-04-04 19:53:34 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1586001211080 started.
2020-04-04 19:53:34 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-04 19:53:34 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-04 19:53:34 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-04 19:53:34 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-04 19:53:34 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-04 19:53:35 INFO  RMI TCP Connection(5)-192.168.80.1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-04 19:53:35 INFO  RMI TCP Connection(5)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-04 19:53:35 INFO  RMI TCP Connection(5)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 33 ms
2020-04-04 19:53:35 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-04 19:55:12 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 19:55:12 | 耗时 15 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 19:55:12 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 19:55:12 | 耗时 6 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-04T19:55:12.478+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-04 19:55:12 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 19:55:12 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-04 19:55:12 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 19:55:12 | 耗时 6 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 19:55:12 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 19:55:12 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 19:55:13 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 19:55:13 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-04 19:55:13 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 19:55:13 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-04T19:55:13.692+0800' WHERE (USERNAME = 'ccc');
2020-04-04 19:55:13 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 19:55:13 | 耗时 13 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-04 19:55:13 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 19:55:13 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-04 19:55:13 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 19:55:13 | 耗时 2 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-04 19:55:13 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 19:55:13 | 耗时 2 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-04 19:55:13 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 19:55:13 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-04 19:55:17 INFO  http-nio-8080-exec-6 p6spy 2020-04-04 19:55:17 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-04 19:55:18 INFO  http-nio-8080-exec-6 p6spy 2020-04-04 19:55:18 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 19:55:18 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 19:55:18 | 耗时 3 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-04 19:55:18 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 19:55:18 | 耗时 6 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ) TOTAL;
2020-04-04 19:55:18 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 19:55:18 | 耗时 4 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ORDER BY userId LIMIT 0,10;
2020-04-04 19:55:26 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 19:55:26 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 AND u.ssex = '0' GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ) TOTAL;
2020-04-04 19:55:26 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 19:55:26 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 AND u.ssex = '0' GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ORDER BY userId LIMIT 0,10;
2020-04-04 19:55:28 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 19:55:28 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ) TOTAL;
2020-04-04 19:55:28 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 19:55:28 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ORDER BY userId LIMIT 0,10;
2020-04-04 19:55:34 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 19:55:34 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 AND d.dept_id = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ) TOTAL;
2020-04-04 19:55:34 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 19:55:34 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 AND d.dept_id = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ORDER BY userId LIMIT 0,10;
2020-04-04 19:55:35 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 19:55:35 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ) TOTAL;
2020-04-04 19:55:35 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 19:55:35 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ORDER BY userId LIMIT 0,10;
2020-04-04 19:55:37 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 19:55:37 | 耗时 3 ms | SQL 语句：
SELECT MENU_ID, ICON, ORDER_NUM, MENU_NAME, TYPE, URL, PARENT_ID, MODIFY_TIME, CREATE_TIME, PERMS FROM t_menu ORDER BY ORDER_NUM ASC;
2020-04-04 19:55:37 INFO  http-nio-8080-exec-5 p6spy 2020-04-04 19:55:37 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT r.role_id roleId, r.role_name roleName, r.remark, r.create_time createTime, r.modify_time modifyTime, GROUP_CONCAT(rm.menu_id) menuIds FROM t_role r LEFT JOIN t_role_menu rm ON (r.role_id = rm.role_id) WHERE 1 = 1 GROUP BY r.role_id ) TOTAL;
2020-04-04 19:55:37 INFO  http-nio-8080-exec-5 p6spy 2020-04-04 19:55:37 | 耗时 2 ms | SQL 语句：
SELECT r.role_id roleId, r.role_name roleName, r.remark, r.create_time createTime, r.modify_time modifyTime, GROUP_CONCAT(rm.menu_id) menuIds FROM t_role r LEFT JOIN t_role_menu rm ON (r.role_id = rm.role_id) WHERE 1 = 1 GROUP BY r.role_id ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 19:55:39 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 19:55:39 | 耗时 3 ms | SQL 语句：
SELECT MENU_ID, ICON, ORDER_NUM, MENU_NAME, TYPE, URL, PARENT_ID, MODIFY_TIME, CREATE_TIME, PERMS FROM t_menu ORDER BY ORDER_NUM ASC;
2020-04-04 19:55:40 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 19:55:40 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept ORDER BY ORDER_NUM ASC;
2020-04-04 19:55:54 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 19:55:54 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 19:55:54 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 19:55:54 | 耗时 3 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-04T19:55:54.958+0800', 'Firefox 74', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'cccc');
2020-04-04 19:55:55 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 19:55:55 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-04 19:55:55 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 19:55:55 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 19:55:55 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 19:55:55 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 19:55:56 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 19:55:56 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-04 19:55:56 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 19:55:56 | 耗时 3 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-04T19:55:56.803+0800' WHERE (USERNAME = 'cccc');
2020-04-04 19:55:56 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 19:55:56 | 耗时 5 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-04 19:55:56 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 19:55:56 | 耗时 2 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-04 19:55:56 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 19:55:56 | 耗时 3 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-04 19:55:56 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 19:55:56 | 耗时 3 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-04 19:55:56 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 19:55:56 | 耗时 3 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'cccc' GROUP BY days;
2020-04-04 19:56:01 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 19:56:01 | 耗时 4 ms | SQL 语句：
SELECT COUNT(1) FROM t_log;
2020-04-04 19:56:14 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 19:56:14 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_log;
2020-04-04 19:56:15 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 19:56:15 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM t_login_log;
2020-04-04 19:56:15 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 19:56:15 | 耗时 1 ms | SQL 语句：
SELECT ID, `SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME FROM t_login_log ORDER BY login_time DESC LIMIT 0,10;
2020-04-04 19:56:15 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 19:56:15 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_log;
2020-04-04 19:56:20 INFO  http-nio-8080-exec-6 p6spy 2020-04-04 19:56:20 | 耗时 11 ms | SQL 语句：
SELECT COUNT(1) FROM t_login_log;
2020-04-04 19:56:20 INFO  http-nio-8080-exec-6 p6spy 2020-04-04 19:56:20 | 耗时 1 ms | SQL 语句：
SELECT ID, `SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME FROM t_login_log ORDER BY login_time DESC LIMIT 0,10;
2020-04-04 19:57:11 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 19:57:11 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-04 19:57:11 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 19:57:11 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 19:57:11 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 19:57:11 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 19:57:11 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 19:57:11 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-04 19:57:35 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 19:57:35 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-04 19:57:35 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 19:57:35 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 19:57:35 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 19:57:35 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 19:58:10 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 19:58:10 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-04 19:58:10 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 19:58:10 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 19:59:31 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 19:59:31 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-04 19:59:31 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 19:59:31 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 19:59:35 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 19:59:35 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-04 19:59:35 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 19:59:35 | 耗时 2 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 20:00:28 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 20:00:28 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '藤原拓海' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 20:00:36 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 20:00:36 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '藤原拓海' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 20:00:36 INFO  http-nio-8080-exec-6 p6spy 2020-04-04 20:00:36 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 20:00:36 INFO  http-nio-8080-exec-6 p6spy 2020-04-04 20:00:36 | 耗时 2 ms | SQL 语句：
INSERT INTO t_park (OWNER, MOBILE, AVAILABLE, DESCRIPTION, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME) VALUES (10, '15623041759', '0', '测试数据', '2020-04-04T20:00:36.341+0800', '1', 4.0, '秋名山', 'AE 86', '1', '藤原拓海');
2020-04-04 20:00:36 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 20:00:36 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-04 20:00:36 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 20:00:36 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 20:01:03 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 20:01:03 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-04 20:01:03 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 20:01:03 | 耗时 2 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 20:01:16 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 20:01:16 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原拓海';
2020-04-04 20:01:18 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 20:01:18 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-04 20:01:18 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 20:01:18 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 20:01:20 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 20:01:20 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-04 20:01:20 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 20:01:20 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 20:01:23 INFO  http-nio-8080-exec-5 p6spy 2020-04-04 20:01:23 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原拓海';
2020-04-04 20:02:01 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 20:02:01 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 20:02:01 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 20:02:01 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-04 20:02:01 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 20:02:01 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 20:02:06 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 20:02:06 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原豆腐店';
2020-04-04 20:02:09 INFO  http-nio-8080-exec-6 p6spy 2020-04-04 20:02:09 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-04 20:02:09 INFO  http-nio-8080-exec-6 p6spy 2020-04-04 20:02:09 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 20:02:10 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 20:02:10 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原拓海';
2020-04-04 20:02:11 INFO  http-nio-8080-exec-5 p6spy 2020-04-04 20:02:11 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原拓海';
2020-04-04 20:02:20 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 20:02:20 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原拓海';
2020-04-04 20:03:01 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 20:03:01 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 20:03:01 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 20:03:01 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-04 20:03:01 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 20:03:01 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 20:03:36 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 20:03:36 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-04 20:03:36 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 20:03:36 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 20:03:36 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 20:03:36 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 20:03:36 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 20:03:36 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-04 20:03:37 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 20:03:37 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 20:03:37 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 20:03:37 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-04 20:03:37 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 20:03:37 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 20:03:38 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 20:03:38 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原豆腐店';
2020-04-04 20:03:42 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 20:03:42 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-04 20:03:42 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 20:03:42 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 20:03:43 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 20:03:43 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原拓海';
2020-04-04 20:03:45 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 20:03:45 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 20:03:45 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 20:03:45 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-04 20:03:45 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 20:03:45 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 20:03:48 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 20:03:48 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原豆腐店';
2020-04-04 20:03:52 INFO  http-nio-8080-exec-5 p6spy 2020-04-04 20:03:52 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原豆腐店';
2020-04-04 20:04:06 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 20:04:06 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 20:04:06 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 20:04:06 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM t_order WHERE (USER_ID = 1);
2020-04-04 20:04:16 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 20:04:16 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-04 20:04:23 INFO  http-nio-8080-exec-5 p6spy 2020-04-04 20:04:23 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET MODIFY_TIME = '2020-04-04T20:04:23.952+0800', AVATAR = '2dd7a2d09fa94bf8b5c52e5318868b4d9.jpg' WHERE (USERNAME = 'ccc');
2020-04-04 20:04:33 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 20:04:33 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET MODIFY_TIME = '2020-04-04T20:04:33.299+0800', THEME = 'white', IS_TAB = '1' WHERE (USERNAME = 'ccc');
2020-04-04 20:04:34 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 20:04:34 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-04 20:04:34 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 20:04:34 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 20:04:34 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 20:04:34 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 20:04:35 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 20:04:35 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-04 20:04:39 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 20:04:39 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-04 20:04:43 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 20:04:43 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET MODIFY_TIME = '2020-04-04T20:04:43.568+0800', AVATAR = 'cnrhVkzwxjPwAaCfPbdc.jpg' WHERE (USERNAME = 'ccc');
2020-04-04 20:04:44 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 20:04:44 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-04 20:04:44 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 20:04:44 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 20:04:44 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 20:04:44 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 20:04:44 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 20:04:44 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-04 20:04:46 INFO  http-nio-8080-exec-3 p6spy 2020-04-04 20:04:46 | 耗时 3 ms | SQL 语句：
UPDATE t_user SET MODIFY_TIME = '2020-04-04T20:04:46.962+0800', THEME = 'white', IS_TAB = '1' WHERE (USERNAME = 'ccc');
2020-04-04 20:04:47 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 20:04:47 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-04 20:04:47 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 20:04:47 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 20:04:47 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 20:04:47 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 20:04:48 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 20:04:48 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-04 20:07:29 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 20:07:29 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 20:07:29 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 20:07:29 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 10);
2020-04-04 20:07:29 INFO  http-nio-8080-exec-8 p6spy 2020-04-04 20:07:29 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 10) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 20:07:30 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 20:07:30 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原拓海';
2020-04-04 20:07:31 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 20:07:31 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-04 20:07:31 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 20:07:31 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 20:13:37 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 20:13:37 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 20:13:37 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 20:13:37 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-04T20:13:37.022+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-04 20:13:37 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 20:13:37 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-04 20:13:37 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 20:13:37 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 20:13:37 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 20:13:37 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 20:13:37 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 20:13:37 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-04 20:13:37 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 20:13:37 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-04T20:13:37.649+0800' WHERE (USERNAME = 'ccc');
2020-04-04 20:13:37 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 20:13:37 | 耗时 3 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-04 20:13:37 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 20:13:37 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-04 20:13:37 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 20:13:37 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-04 20:13:37 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 20:13:37 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-04 20:13:37 INFO  http-nio-8080-exec-9 p6spy 2020-04-04 20:13:37 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-04 20:13:39 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 20:13:39 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-04 20:13:39 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 20:13:39 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-04 20:13:39 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 20:13:39 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-04 20:13:39 INFO  http-nio-8080-exec-7 p6spy 2020-04-04 20:13:39 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 20:13:41 INFO  http-nio-8080-exec-6 p6spy 2020-04-04 20:13:41 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原拓海啊';
2020-04-04 20:13:50 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 20:13:50 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原拓海啊';
2020-04-04 20:15:06 INFO  http-nio-8080-exec-6 p6spy 2020-04-04 20:15:06 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原拓海啊';
2020-04-04 20:15:08 INFO  http-nio-8080-exec-10 p6spy 2020-04-04 20:15:08 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '藤原拓海啊' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 20:15:08 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 20:15:08 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 20:15:08 INFO  http-nio-8080-exec-2 p6spy 2020-04-04 20:15:08 | 耗时 1 ms | SQL 语句：
UPDATE t_park SET OWNER = 1, MOBILE = '15623041759', AVAILABLE = '1', WHY = '', DESCRIPTION = '测试数据', MODIFYTIME = '2020-04-04T20:15:08.282+0800', PRICE = 4.0, PLACE = '秋名山', SPAN = 'AE 86', USERNAME = '藤原拓海啊' WHERE ID = 30;
2020-04-04 20:15:08 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 20:15:08 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-04 20:15:08 INFO  http-nio-8080-exec-4 p6spy 2020-04-04 20:15:08 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 20:15:14 INFO  http-nio-8080-exec-5 p6spy 2020-04-04 20:15:14 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-04 20:15:14 INFO  http-nio-8080-exec-5 p6spy 2020-04-04 20:15:14 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-04 20:15:14 INFO  http-nio-8080-exec-5 p6spy 2020-04-04 20:15:14 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-04 20:15:17 INFO  http-nio-8080-exec-1 p6spy 2020-04-04 20:15:17 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原拓海啊';
2020-04-04 20:17:16 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1586001211080 paused.
2020-04-04 20:17:16 INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-04 20:17:16 INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-04-04 20:17:16 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1586001211080 shutting down.
2020-04-04 20:17:16 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1586001211080 paused.
2020-04-04 20:17:16 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1586001211080 shutdown complete.
2020-04-04 20:17:16 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-04-04 20:17:16 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-04-04 20:17:16 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-04-04 20:17:16 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-04-04 20:17:16 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-04-04 20:17:16 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
