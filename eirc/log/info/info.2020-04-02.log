2020-04-02 16:03:35 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 115276 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-02 16:03:35 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-02 16:03:35 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-02 16:03:35 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-02 16:03:39 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-02 16:03:39 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-02 16:03:39 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 162ms. Found 0 Redis repository interfaces.
2020-04-02 16:03:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 16:03:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$900f2b40] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 16:03:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 16:03:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 16:03:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$e832baf0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 16:03:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$a4c70f8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 16:03:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 16:03:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$317b6fec] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 16:03:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 16:03:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$64492709] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 16:03:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 16:03:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 16:03:40 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-02 16:03:40 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-02 16:03:41 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-02 16:03:41 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-02 16:03:41 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-02 16:03:41 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-02 16:03:41 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-02 16:03:41 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-02 16:03:41 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 16:03:41 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 16:03:41 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 16:03:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 16:03:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 16:03:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 16:03:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 16:03:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 16:03:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 16:03:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 16:03:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 16:03:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 16:03:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 16:03:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 16:03:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 16:03:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 16:03:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 16:03:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 16:03:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 16:03:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 16:03:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 16:03:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 16:03:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 16:03:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 16:03:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 16:03:43 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-02 16:03:43 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-02 16:03:43 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-02 16:03:43 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-02 16:03:43 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-02 16:03:43 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 7724 ms
2020-04-02 16:03:46 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-02 16:03:46 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-02 16:03:46 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-02 16:03:46 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-02 16:03:46 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-02 16:03:46 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-02 16:03:46 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-02 16:03:46 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585814626429'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-02 16:03:46 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-02 16:03:46 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-02 16:03:46 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@792bf78a
2020-04-02 16:03:46 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-02 16:03:46 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-02 16:03:46 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-02 16:03:47 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-02 16:03:47 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-02 16:03:48 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-02 16:03:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-02 16:03:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-02 16:03:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-02 16:03:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-02 16:03:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-02 16:03:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-02 16:03:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-02 16:03:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-02 16:03:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-02 16:03:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-02 16:03:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-02 16:03:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-02 16:03:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-02 16:03:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: systemUserDetailUsingGET_1
2020-04-02 16:03:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-02 16:03:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-02 16:03:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-02 16:03:48 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-02 16:03:48 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-02 16:03:48 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-02 16:03:48 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 14.261 seconds (JVM running for 19.433)
2020-04-02 16:03:48 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-02 16:03:48 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-02 16:03:49 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-02 16:03:49 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-02 16:03:49 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-02 16:03:49 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-02 16:03:49 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-02 16:03:49 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-02 16:03:49 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-02 16:03:49 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585731300764"'s failed in-progress jobs.
2020-04-02 16:03:49 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585814626429 started.
2020-04-02 16:03:50 INFO  RMI TCP Connection(6)-192.168.80.1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-02 16:03:50 INFO  RMI TCP Connection(6)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-02 16:03:50 INFO  RMI TCP Connection(6)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 24 ms
2020-04-02 16:03:51 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-02 16:04:02 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 16:04:02 | 耗时 34 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 16:04:02 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 16:04:02 | 耗时 13 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-02T16:04:02.377+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-02 16:04:02 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 16:04:02 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 16:04:02 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 16:04:02 | 耗时 12 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 16:04:02 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 16:04:02 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 16:04:03 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 16:04:03 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 16:04:03 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 16:04:03 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T16:04:03.436+0800' WHERE (USERNAME = 'ccc');
2020-04-02 16:04:03 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 16:04:03 | 耗时 13 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 16:04:03 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 16:04:03 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 16:04:03 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 16:04:03 | 耗时 2 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 16:04:03 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 16:04:03 | 耗时 8 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 16:04:03 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 16:04:03 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 16:04:06 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 16:04:06 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 16:04:06 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 16:04:06 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 16:04:06 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 16:04:06 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 16:04:06 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 16:04:06 | 耗时 22 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 16:04:06 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 16:04:06 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 16:06:15 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 16:06:15 | 耗时 18 ms | SQL 语句：
SELECT COUNT(1) FROM t_job;
2020-04-02 16:06:15 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 16:06:15 | 耗时 1 ms | SQL 语句：
SELECT JOB_ID, cron_expression, create_time, method_name, remark, bean_name, params, status FROM t_job ORDER BY create_Time DESC LIMIT 0,10;
2020-04-02 16:06:15 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 16:06:15 | 耗时 4 ms | SQL 语句：
SELECT COUNT(1) FROM t_job_log;
2020-04-02 16:06:16 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 16:06:16 | 耗时 4 ms | SQL 语句：
SELECT COUNT(1) FROM t_job;
2020-04-02 16:06:16 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 16:06:16 | 耗时 1 ms | SQL 语句：
SELECT JOB_ID, cron_expression, create_time, method_name, remark, bean_name, params, status FROM t_job ORDER BY create_Time DESC LIMIT 0,10;
2020-04-02 16:06:18 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 16:06:18 | 耗时 10 ms | SQL 语句：
SELECT COUNT(1) FROM t_log;
2020-04-02 16:06:18 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 16:06:18 | 耗时 11 ms | SQL 语句：
SELECT COUNT(1) FROM t_login_log;
2020-04-02 16:06:18 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 16:06:18 | 耗时 1 ms | SQL 语句：
SELECT ID, `SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME FROM t_login_log ORDER BY login_time DESC LIMIT 0,10;
2020-04-02 16:06:20 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 16:06:20 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_log;
2020-04-02 16:06:27 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 16:06:27 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 16:06:27 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 16:06:27 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ) TOTAL;
2020-04-02 16:06:27 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 16:06:27 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ORDER BY userId LIMIT 0,10;
2020-04-02 16:06:28 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 16:06:28 | 耗时 1 ms | SQL 语句：
SELECT MENU_ID, ICON, ORDER_NUM, MENU_NAME, TYPE, URL, PARENT_ID, MODIFY_TIME, CREATE_TIME, PERMS FROM t_menu ORDER BY ORDER_NUM ASC;
2020-04-02 16:06:28 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 16:06:28 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT r.role_id roleId, r.role_name roleName, r.remark, r.create_time createTime, r.modify_time modifyTime, GROUP_CONCAT(rm.menu_id) menuIds FROM t_role r LEFT JOIN t_role_menu rm ON (r.role_id = rm.role_id) WHERE 1 = 1 GROUP BY r.role_id ) TOTAL;
2020-04-02 16:06:28 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 16:06:28 | 耗时 2 ms | SQL 语句：
SELECT r.role_id roleId, r.role_name roleName, r.remark, r.create_time createTime, r.modify_time modifyTime, GROUP_CONCAT(rm.menu_id) menuIds FROM t_role r LEFT JOIN t_role_menu rm ON (r.role_id = rm.role_id) WHERE 1 = 1 GROUP BY r.role_id ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 16:06:29 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 16:06:29 | 耗时 1 ms | SQL 语句：
SELECT MENU_ID, ICON, ORDER_NUM, MENU_NAME, TYPE, URL, PARENT_ID, MODIFY_TIME, CREATE_TIME, PERMS FROM t_menu ORDER BY ORDER_NUM ASC;
2020-04-02 16:06:29 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 16:06:29 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept ORDER BY ORDER_NUM ASC;
2020-04-02 16:06:30 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 16:06:30 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 16:06:30 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 16:06:30 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ) TOTAL;
2020-04-02 16:06:30 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 16:06:30 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ORDER BY userId LIMIT 0,10;
2020-04-02 16:06:34 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 16:06:34 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 16:06:34 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 16:06:34 | 耗时 12 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 16:06:34 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 16:06:34 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:10:09 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 115844 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-02 17:10:09 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-02 17:10:09 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-02 17:10:09 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-02 17:10:11 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-02 17:10:11 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-02 17:10:11 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 157ms. Found 0 Redis repository interfaces.
2020-04-02 17:10:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:10:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$46adf835] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:10:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:10:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:10:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$9ed187e5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:10:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$c0eb3ded] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:10:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:10:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$e81a3ce1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:10:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:10:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$1ae7f3fe] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:10:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:10:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:10:12 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-02 17:10:12 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-02 17:10:12 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-02 17:10:12 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-02 17:10:12 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-02 17:10:12 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-02 17:10:12 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-02 17:10:12 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-02 17:10:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:10:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:10:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:10:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:10:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:10:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:10:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:10:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:10:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:10:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:10:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:10:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:10:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:10:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:10:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:10:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:10:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:10:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:10:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:10:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:10:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:10:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:10:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:10:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:10:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:10:15 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-02 17:10:15 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-02 17:10:15 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-02 17:10:15 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-02 17:10:15 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-02 17:10:15 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 6363 ms
2020-04-02 17:10:17 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-02 17:10:18 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-02 17:10:18 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-02 17:10:18 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-02 17:10:18 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-02 17:10:18 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-02 17:10:18 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-02 17:10:18 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585818618101'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-02 17:10:18 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-02 17:10:18 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-02 17:10:18 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@299022a9
2020-04-02 17:10:18 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-02 17:10:18 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-02 17:10:18 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-02 17:10:19 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-02 17:10:19 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-02 17:10:19 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-02 17:10:19 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-02 17:10:19 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-02 17:10:19 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-02 17:10:19 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-02 17:10:19 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-02 17:10:19 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-02 17:10:19 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-02 17:10:19 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-02 17:10:19 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-02 17:10:19 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-02 17:10:19 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-02 17:10:19 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-02 17:10:19 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-02 17:10:19 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: systemUserDetailUsingGET_1
2020-04-02 17:10:19 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-02 17:10:19 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-02 17:10:19 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-02 17:10:19 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-02 17:10:19 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-02 17:10:19 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-02 17:10:19 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 11.853 seconds (JVM running for 16.726)
2020-04-02 17:10:20 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-02 17:10:20 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-02 17:10:20 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-02 17:10:20 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-02 17:10:20 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-02 17:10:20 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-02 17:10:20 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-02 17:10:20 INFO  RMI TCP Connection(3)-192.168.80.1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-02 17:10:20 INFO  RMI TCP Connection(3)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-02 17:10:20 INFO  RMI TCP Connection(3)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 18 ms
2020-04-02 17:10:20 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-02 17:10:21 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-02 17:10:21 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585814626429"'s failed in-progress jobs.
2020-04-02 17:10:21 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585818618101 started.
2020-04-02 17:10:21 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-02 17:10:27 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:10:27 | 耗时 4 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:10:27 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:10:27 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-02T17:10:27.949+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-02 17:10:28 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:10:28 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 17:10:28 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:10:28 | 耗时 4 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:10:28 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:10:28 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:10:28 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:10:28 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 17:10:28 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:10:28 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T17:10:28.873+0800' WHERE (USERNAME = 'ccc');
2020-04-02 17:10:28 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:10:28 | 耗时 5 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 17:10:28 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:10:28 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 17:10:28 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:10:28 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 17:10:28 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:10:28 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 17:10:28 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:10:28 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 17:10:30 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:10:30 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 17:10:30 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:10:30 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:10:30 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:10:30 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:10:30 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:10:30 | 耗时 12 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:10:30 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:10:30 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:10:32 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:10:32 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chenc';
2020-04-02 17:10:49 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:10:49 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:10:49 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:10:49 | 耗时 1 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-02T17:10:49.210+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'cccc');
2020-04-02 17:10:49 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:10:49 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-02 17:10:49 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:10:49 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:10:49 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:10:49 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:10:49 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:10:49 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-02 17:10:49 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:10:49 | 耗时 3 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T17:10:49.846+0800' WHERE (USERNAME = 'cccc');
2020-04-02 17:10:49 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:10:49 | 耗时 2 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 17:10:49 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:10:49 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 17:10:49 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:10:49 | 耗时 2 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 17:10:49 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:10:49 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 17:10:49 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:10:49 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'cccc' GROUP BY days;
2020-04-02 17:10:55 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:10:55 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-02 17:10:55 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:10:55 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:10:55 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:10:55 | 耗时 6 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:10:55 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:10:55 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:10:55 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:10:55 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:10:59 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:10:59 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:12:56 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:12:56 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-02 17:12:56 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:12:56 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:12:56 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:12:56 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:12:56 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:12:56 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-02 17:12:56 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:12:56 | 耗时 4 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:12:56 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:12:56 | 耗时 21 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:12:56 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:12:56 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:12:57 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:12:57 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:12:59 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:12:59 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:13:10 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:13:10 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-02 17:13:10 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:13:10 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:13:10 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:13:10 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:13:10 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:13:10 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-02 17:13:10 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:13:10 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:13:10 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:13:10 | 耗时 8 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:13:10 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:13:10 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:13:11 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:13:11 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:13:14 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:13:14 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:13:29 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:13:29 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:13:56 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:13:56 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:13:59 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:13:59 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:14:01 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:14:01 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:14:03 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:14:03 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:14:05 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:14:05 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-02 17:14:05 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:14:05 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:14:05 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:14:05 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:14:05 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:14:05 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-02 17:14:05 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:14:05 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:14:05 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:14:05 | 耗时 11 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:14:05 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:14:05 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:14:06 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:14:06 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:14:08 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:14:08 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:14:11 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:14:11 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:14:41 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:14:41 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:14:43 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:14:43 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:15:32 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:15:32 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:15:34 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:15:34 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:16:04 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:16:04 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-02 17:16:04 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:16:04 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:16:04 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:16:04 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:16:05 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:16:05 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-02 17:16:05 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:16:05 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:16:05 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:16:05 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:16:05 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:16:05 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:16:06 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:16:06 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:16:11 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:16:11 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:21:18 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:21:18 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:21:21 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:21:21 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:21:27 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:21:27 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-02 17:21:27 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:21:27 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:21:27 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:21:27 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:21:28 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:21:28 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-02 17:21:28 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:21:28 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:21:28 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:21:28 | 耗时 9 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:21:28 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:21:28 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:21:30 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:21:30 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:21:33 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:21:33 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:21:35 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:21:35 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:21:38 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:21:38 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chencheng';
2020-04-02 17:24:20 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:24:20 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-02 17:24:20 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:24:20 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:24:20 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:24:20 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:24:20 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:24:20 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-02 17:24:20 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:24:20 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:24:20 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:24:20 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:24:20 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:24:20 | 耗时 2 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:24:22 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:24:22 | 耗时 0 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:26:07 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:26:07 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-02 17:26:07 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:26:07 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:26:07 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:26:07 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:26:08 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:26:08 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-02 17:26:08 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:26:08 | 耗时 0 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:26:08 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:26:08 | 耗时 14 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:26:08 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:26:08 | 耗时 0 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:26:09 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:26:09 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chencheng';
2020-04-02 17:26:18 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:26:18 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:27:01 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:27:01 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-02 17:27:01 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:27:01 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:27:01 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:27:01 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:27:01 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:27:01 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-02 17:27:01 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:27:01 | 耗时 0 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:27:01 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:27:01 | 耗时 11 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:27:01 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:27:01 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:27:03 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:27:03 | 耗时 0 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chencheng';
2020-04-02 17:27:11 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:27:11 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:27:13 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:27:13 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chenc';
2020-04-02 17:27:15 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:27:15 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:28:11 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:28:11 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-02 17:28:11 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:28:11 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:28:11 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:28:11 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:28:12 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:28:12 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-02 17:28:12 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:28:12 | 耗时 0 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:28:12 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:28:12 | 耗时 15 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:28:12 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:28:12 | 耗时 0 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:28:12 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:28:12 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-02 17:28:12 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:28:12 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:28:13 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:28:13 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:28:13 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:28:13 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-02 17:28:13 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:28:13 | 耗时 0 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:28:13 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:28:13 | 耗时 11 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:28:13 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:28:13 | 耗时 0 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:28:32 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:28:32 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:28:32 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:28:32 | 耗时 1 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-02T17:28:32.537+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'cccc');
2020-04-02 17:28:32 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:28:32 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-02 17:28:32 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:28:32 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:28:32 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:28:32 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:28:33 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:28:33 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-02 17:28:33 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:28:33 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T17:28:33.141+0800' WHERE (USERNAME = 'cccc');
2020-04-02 17:28:33 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:28:33 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 17:28:33 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:28:33 | 耗时 2 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 17:28:33 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:28:33 | 耗时 0 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 17:28:33 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:28:33 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 17:28:33 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:28:33 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'cccc' GROUP BY days;
2020-04-02 17:28:34 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:28:34 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-02 17:28:34 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:28:34 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:28:34 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:28:34 | 耗时 5 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:28:34 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:28:34 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:28:34 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:28:34 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:28:36 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:28:36 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:28:47 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:28:47 | 耗时 0 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chencheng';
2020-04-02 17:28:49 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:28:49 | 耗时 1 ms | SQL 语句：
INSERT INTO t_park (CREATETIME) VALUES ('2020-04-02T17:28:49.079+0800');
2020-04-02 17:28:49 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:28:49 | 耗时 2 ms | SQL 语句：
INSERT INTO t_park (CREATETIME) VALUES ('2020-04-02T17:28:49.079+0800');
2020-04-02 17:28:49 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:28:49 | 耗时 6 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:28:49 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:28:49 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:28:49 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:28:49 | 耗时 9 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:28:49 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:28:49 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:28:53 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:28:53 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:28:54 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:28:54 | 耗时 2 ms | SQL 语句：
INSERT INTO t_park (CREATETIME) VALUES ('2020-04-02T17:28:54.680+0800');
2020-04-02 17:28:54 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:28:54 | 耗时 2 ms | SQL 语句：
INSERT INTO t_park (CREATETIME) VALUES ('2020-04-02T17:28:54.680+0800');
2020-04-02 17:28:54 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:28:54 | 耗时 5 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:28:54 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:28:54 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:28:54 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:28:54 | 耗时 10 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:28:54 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:28:54 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:29:39 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:29:39 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-02 17:29:39 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:29:39 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:29:39 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:29:39 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:29:39 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:29:39 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-02 17:29:39 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:29:39 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:29:39 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:29:39 | 耗时 12 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:29:39 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:29:39 | 耗时 0 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:29:41 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:29:41 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:31:50 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:31:50 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-02 17:31:50 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:31:50 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:31:50 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:31:50 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:31:51 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:31:51 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-02 17:31:51 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:31:51 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:31:51 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:31:51 | 耗时 15 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:31:51 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:31:51 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:31:52 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:31:52 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'null';
2020-04-02 17:31:54 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:31:54 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T17:31:54.534+0800' WHERE (USERNAME = 'cccc');
2020-04-02 17:31:54 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:31:54 | 耗时 9 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 17:31:54 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:31:54 | 耗时 0 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 17:31:54 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:31:54 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 17:31:54 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:31:54 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 17:31:54 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:31:54 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'cccc' GROUP BY days;
2020-04-02 17:31:55 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:31:55 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-02 17:31:55 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:31:55 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:31:55 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:31:55 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:31:55 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:31:55 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-02 17:31:55 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:31:55 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T17:31:55.681+0800' WHERE (USERNAME = 'cccc');
2020-04-02 17:31:55 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:31:55 | 耗时 3 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 17:31:55 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:31:55 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 17:31:55 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:31:55 | 耗时 0 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 17:31:55 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:31:55 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 17:31:55 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:31:55 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'cccc' GROUP BY days;
2020-04-02 17:31:56 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:31:56 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:31:56 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:31:56 | 耗时 20 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:31:56 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:31:56 | 耗时 0 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:31:57 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:31:57 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:32:56 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:32:56 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-02 17:32:56 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:32:56 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:32:57 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:32:57 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:32:57 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:32:57 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-02 17:32:57 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:32:57 | 耗时 0 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:32:57 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:32:57 | 耗时 11 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:32:57 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:32:57 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:32:58 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:32:58 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chencheng';
2020-04-02 17:33:19 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:33:19 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-02 17:33:19 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:33:19 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:33:19 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:33:19 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:33:19 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:33:19 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-02 17:33:19 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:33:19 | 耗时 0 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:33:19 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:33:19 | 耗时 19 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:33:19 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:33:19 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:33:39 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:33:39 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:33:39 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:33:39 | 耗时 1 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-02T17:33:39.306+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-02 17:33:39 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:33:39 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 17:33:39 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:33:39 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:33:39 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:33:39 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:33:39 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:33:39 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 17:33:39 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:33:39 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T17:33:39.874+0800' WHERE (USERNAME = 'ccc');
2020-04-02 17:33:39 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:33:39 | 耗时 13 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 17:33:39 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:33:39 | 耗时 0 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 17:33:39 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:33:39 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 17:33:39 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:33:39 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 17:33:39 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:33:39 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 17:33:40 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:33:40 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 17:33:40 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:33:40 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:33:41 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:33:41 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:33:41 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:33:41 | 耗时 16 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:33:41 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:33:41 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:33:47 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:33:47 | 耗时 2 ms | SQL 语句：
DELETE FROM t_park WHERE ID IN ('20', '21', '18');
2020-04-02 17:33:47 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:33:47 | 耗时 11 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:33:47 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:33:47 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:33:52 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:33:52 | 耗时 1 ms | SQL 语句：
DELETE FROM t_park WHERE ID IN ('19');
2020-04-02 17:33:52 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:33:52 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:33:52 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:33:52 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:33:54 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:33:54 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 17:33:54 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:33:54 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:33:54 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:33:54 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:33:55 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:33:55 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 17:33:55 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:33:55 | 耗时 0 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:33:55 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:33:55 | 耗时 11 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:33:55 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:33:55 | 耗时 0 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:33:56 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:33:56 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:34:05 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:34:05 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:34:08 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:34:08 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 17:34:08 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:34:08 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:34:08 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:34:08 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:34:09 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:34:09 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 17:34:09 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:34:09 | 耗时 0 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:34:09 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:34:09 | 耗时 9 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:34:09 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:34:09 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:34:32 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:34:32 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 17:34:32 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:34:32 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:34:32 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:34:32 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:34:32 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:34:32 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 17:34:32 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:34:32 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:34:32 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:34:32 | 耗时 11 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:34:32 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:34:32 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:34:34 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:34:34 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:34:37 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:34:37 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:34:39 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:34:39 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:35:54 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:35:54 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 17:35:54 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:35:54 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:35:54 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:35:54 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:35:55 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:35:55 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 17:35:55 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:35:55 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:35:55 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:35:55 | 耗时 0 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:35:55 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:35:55 | 耗时 0 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:35:56 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:35:56 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 17:35:56 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:35:56 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:35:56 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:35:56 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:35:56 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:35:56 | 耗时 5 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 17:35:56 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:35:56 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:35:56 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:35:56 | 耗时 14 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:35:56 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:35:56 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:35:57 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:35:57 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 17:35:57 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:35:57 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:35:58 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:35:58 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:35:58 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:35:58 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 17:35:58 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:35:58 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:35:58 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:35:58 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:35:58 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:35:58 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:36:00 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:36:00 | 耗时 2 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:36:14 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:36:14 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 17:36:14 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:36:14 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:36:14 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:36:14 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:36:15 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:36:15 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 17:36:15 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:36:15 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:36:15 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:36:15 | 耗时 18 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:36:15 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:36:15 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:36:16 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:36:16 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 17:36:16 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:36:16 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:36:16 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:36:16 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:36:16 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:36:16 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 17:36:16 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:36:16 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:36:16 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:36:16 | 耗时 11 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:36:16 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:36:16 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:36:17 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:36:17 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 17:36:17 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:36:17 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:36:17 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:36:17 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:36:17 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:36:17 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 17:36:18 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:36:18 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:36:18 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:36:18 | 耗时 11 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:36:18 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:36:18 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:36:19 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:36:19 | 耗时 0 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:36:35 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:36:35 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 17:36:35 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:36:35 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:36:35 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:36:35 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:36:35 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:36:35 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 17:36:36 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:36:36 | 耗时 5 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:36:36 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:36:36 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:36:36 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:36:36 | 耗时 0 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:36:36 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:36:36 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 17:36:36 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:36:36 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:36:36 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:36:36 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:36:37 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:36:37 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 17:36:37 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:36:37 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:36:37 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:36:37 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:36:37 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:36:37 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:36:37 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:36:37 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 17:36:37 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:36:37 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:36:37 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:36:37 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:36:38 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:36:38 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 17:36:38 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:36:38 | 耗时 0 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:36:38 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:36:38 | 耗时 13 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:36:38 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:36:38 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:36:40 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:36:40 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:36:56 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:36:56 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 17:36:56 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:36:56 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:36:56 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:36:56 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:36:57 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:36:57 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 17:36:57 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:36:57 | 耗时 0 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:36:57 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:36:57 | 耗时 13 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:36:57 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:36:57 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:36:57 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:36:57 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 17:36:57 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:36:57 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:36:57 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:36:57 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:36:58 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:36:58 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 17:36:58 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:36:58 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:36:58 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:36:58 | 耗时 14 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:36:58 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:36:58 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:36:59 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:36:59 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 17:36:59 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:36:59 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:36:59 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:36:59 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:37:00 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:37:00 | 耗时 7 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 17:37:00 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:37:00 | 耗时 16 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:37:00 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:37:00 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:37:00 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:37:00 | 耗时 4 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:37:04 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:37:04 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 17:37:04 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:37:04 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:37:05 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:37:04 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:37:05 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:37:05 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 17:37:05 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:37:05 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:37:05 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:37:05 | 耗时 10 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:37:05 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:37:05 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:37:06 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:37:06 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 17:37:06 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:37:06 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:37:06 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:37:06 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:37:06 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:37:06 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 17:37:06 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:37:06 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:37:06 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:37:06 | 耗时 5 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:37:06 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:37:06 | 耗时 0 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:37:07 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:37:07 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 17:37:07 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:37:07 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:37:07 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:37:07 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:37:08 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:37:08 | 耗时 5 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 17:37:08 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:37:08 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:37:08 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:37:08 | 耗时 12 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:37:08 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:37:08 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:37:15 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:37:15 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 17:37:15 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:37:15 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:37:15 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:37:15 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:37:15 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:37:15 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 17:37:15 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:37:15 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:37:15 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:37:15 | 耗时 10 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:37:15 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:37:15 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:37:18 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:37:18 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 17:37:18 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:37:18 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:37:18 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:37:18 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:37:19 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:37:19 | 耗时 5 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 17:37:19 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:37:19 | 耗时 4 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:37:19 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:37:19 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:37:19 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:37:19 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:37:21 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:37:21 | 耗时 0 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:37:33 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:37:33 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 17:37:33 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:37:33 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:37:33 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:37:33 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:37:34 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:37:34 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 17:37:34 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:37:34 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:37:34 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:37:34 | 耗时 11 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:37:34 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:37:34 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:37:35 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:37:35 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 17:37:35 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:37:35 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:37:35 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:37:35 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:37:35 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:37:35 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 17:37:36 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:37:36 | 耗时 13 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:37:36 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:37:36 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:37:36 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:37:36 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:37:37 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:37:37 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 17:37:37 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:37:37 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:37:37 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:37:37 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:37:38 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:37:38 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 17:37:38 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:37:38 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:37:38 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:37:38 | 耗时 7 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:37:38 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:37:38 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:37:48 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:37:48 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 17:37:48 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:37:48 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:37:48 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:37:48 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:37:48 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:37:48 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 17:37:48 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:37:48 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:37:48 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:37:48 | 耗时 9 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:37:48 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:37:48 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:37:49 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:37:49 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 17:37:49 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:37:49 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:37:49 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:37:49 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:37:49 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:37:49 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 17:37:49 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:37:49 | 耗时 0 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:37:49 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:37:49 | 耗时 8 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:37:49 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:37:49 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:37:58 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:37:58 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 17:37:58 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:37:58 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:37:58 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:37:58 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:37:59 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:37:59 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 17:37:59 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:37:59 | 耗时 0 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 17:37:59 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:37:59 | 耗时 10 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:37:59 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:37:59 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:43:32 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:43:32 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 17:43:32 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:43:32 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:43:32 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:43:32 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:43:32 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:43:32 | 耗时 6 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 17:43:33 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:43:33 | 耗时 6 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:43:33 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 17:43:33 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:43:35 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:43:35 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 17:43:35 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:43:35 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:43:35 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 17:43:35 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:43:36 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:43:36 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 17:43:36 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:43:36 | 耗时 7 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:43:36 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:43:36 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:43:41 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:43:41 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:43:41 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:43:41 | 耗时 12 ms | SQL 语句：
INSERT INTO t_order (USER_ID, PARK_ID) VALUES (1, 15);
2020-04-02 17:43:41 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:43:41 | 耗时 7 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:43:41 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 17:43:41 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:44:11 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:44:11 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 17:44:11 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:44:11 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 17:44:11 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 17:44:11 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:44:11 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:44:11 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 17:44:11 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:44:11 | 耗时 11 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:44:11 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 17:44:11 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:44:16 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:44:16 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:44:16 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 17:44:16 | 耗时 12 ms | SQL 语句：
INSERT INTO t_order (USER_ID, PARK_ID) VALUES (1, 17);
2020-04-02 17:44:16 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:44:16 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-02 17:44:16 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 17:44:16 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 17:44:26 INFO  http-nio-8080-exec-3 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-02 17:44:26 INFO  http-nio-8080-exec-3 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 113ms. Found 0 Redis repository interfaces.
2020-04-02 17:44:27 INFO  http-nio-8080-exec-3 org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-02 17:44:27 INFO  http-nio-8080-exec-3 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-02 17:44:27 INFO  http-nio-8080-exec-3 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 229ms. Found 0 Redis repository interfaces.
2020-04-02 17:44:28 INFO  http-nio-8080-exec-3 springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-02 17:44:28 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:44:28 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:44:28 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 17:44:28 | 耗时 34 ms | SQL 语句：
INSERT INTO t_order (USER_ID, PARK_ID) VALUES (1, 17);
2020-04-02 17:44:38 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 17:44:38 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 17:44:49 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:44:49 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 17:44:49 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 17:44:49 | 耗时 2 ms | SQL 语句：
INSERT INTO t_order (USER_ID, PARK_ID) VALUES (1, 17);
2020-04-02 17:59:46 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 116032 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-02 17:59:46 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-02 17:59:46 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-02 17:59:46 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-02 17:59:49 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-02 17:59:49 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-02 17:59:49 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 156ms. Found 0 Redis repository interfaces.
2020-04-02 17:59:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:59:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$d37d4202] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:59:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:59:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:59:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$2ba0d1b2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:59:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$4dba87ba] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:59:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:59:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$74e986ae] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:59:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:59:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$a7b73dcb] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:59:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:59:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:59:50 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-02 17:59:50 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-02 17:59:50 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-02 17:59:50 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-02 17:59:50 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-02 17:59:50 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-02 17:59:50 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-02 17:59:50 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-02 17:59:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:59:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:59:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:59:51 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:59:51 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:59:51 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:59:51 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:59:51 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:59:51 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:59:51 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:59:51 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:59:51 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:59:51 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:59:51 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:59:51 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:59:51 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:59:51 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:59:52 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:59:52 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:59:52 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:59:52 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:59:52 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:59:52 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:59:52 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:59:52 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 17:59:52 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-02 17:59:52 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-02 17:59:52 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-02 17:59:52 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-02 17:59:52 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-02 17:59:52 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 6174 ms
2020-04-02 17:59:55 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-02 17:59:55 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-02 17:59:55 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-02 17:59:55 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-02 17:59:55 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-02 17:59:55 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-02 17:59:55 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-02 17:59:55 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585821595766'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-02 17:59:55 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-02 17:59:55 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-02 17:59:55 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@1f5797d5
2020-04-02 17:59:56 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-02 17:59:56 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-02 17:59:56 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-02 17:59:57 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-02 17:59:57 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-02 17:59:57 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-02 17:59:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-02 17:59:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-02 17:59:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-02 17:59:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-02 17:59:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-02 17:59:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-02 17:59:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-02 17:59:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-02 17:59:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-02 17:59:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-02 17:59:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-02 17:59:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-02 17:59:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-02 17:59:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-02 17:59:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-02 17:59:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-02 17:59:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: systemUserDetailUsingGET_1
2020-04-02 17:59:57 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-02 17:59:57 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-02 17:59:57 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-02 17:59:57 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 12.784 seconds (JVM running for 18.821)
2020-04-02 17:59:58 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-02 17:59:58 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-02 17:59:58 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-02 17:59:58 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-02 17:59:58 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-02 17:59:58 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-02 17:59:58 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-02 17:59:58 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-02 17:59:58 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-02 17:59:58 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585818618101"'s failed in-progress jobs.
2020-04-02 17:59:58 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585821595766 started.
2020-04-02 17:59:59 INFO  RMI TCP Connection(5)-192.168.80.1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-02 17:59:59 INFO  RMI TCP Connection(5)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-02 17:59:59 INFO  RMI TCP Connection(5)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 20 ms
2020-04-02 17:59:59 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-02 18:00:06 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 18:00:06 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:00:06 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 18:00:06 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-02T18:00:06.222+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-02 18:00:06 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 18:00:06 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 18:00:06 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 18:00:06 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 18:00:06 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 18:00:06 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:00:07 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 18:00:07 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 18:00:07 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 18:00:07 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T18:00:07.136+0800' WHERE (USERNAME = 'ccc');
2020-04-02 18:00:07 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 18:00:07 | 耗时 13 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 18:00:07 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 18:00:07 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 18:00:07 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 18:00:07 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 18:00:07 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 18:00:07 | 耗时 2 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 18:00:07 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 18:00:07 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 18:00:08 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 18:00:08 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 18:00:08 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 18:00:08 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 18:02:08 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 18:02:08 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 18:02:08 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 18:02:08 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 18:02:08 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 18:02:08 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:02:08 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 18:02:08 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 18:02:08 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 18:02:08 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 18:02:08 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 18:02:08 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 18:02:16 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 18:02:16 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 18:02:16 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 18:02:16 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 18:02:16 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 18:02:16 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:02:17 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 18:02:17 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 18:02:17 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 18:02:17 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 18:02:17 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 18:02:17 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 18:02:20 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 18:02:20 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 18:02:20 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 18:02:20 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 18:02:20 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 18:02:20 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:02:20 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 18:02:20 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 18:02:21 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 18:02:21 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 18:02:21 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 18:02:21 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 18:02:58 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585821595766 paused.
2020-04-02 18:02:58 INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-02 18:02:58 INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-04-02 18:02:58 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585821595766 shutting down.
2020-04-02 18:02:58 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585821595766 paused.
2020-04-02 18:02:58 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585821595766 shutdown complete.
2020-04-02 18:02:58 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-04-02 18:02:58 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-04-02 18:02:58 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-04-02 18:02:58 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-04-02 18:02:58 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-04-02 18:02:58 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-04-02 18:11:34 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 114036 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-02 18:11:34 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-02 18:11:34 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-02 18:11:34 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-02 18:11:36 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-02 18:11:36 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-02 18:11:36 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 152ms. Found 0 Redis repository interfaces.
2020-04-02 18:11:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:11:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$4a9a6994] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:11:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:11:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:11:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$a2bdf944] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:11:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$c4d7af4c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:11:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:11:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$ec06ae40] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:11:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:11:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$1ed4655d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:11:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:11:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:11:37 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-02 18:11:37 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-02 18:11:38 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-02 18:11:38 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-02 18:11:38 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-02 18:11:38 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-02 18:11:38 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-02 18:11:38 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-02 18:11:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:11:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:11:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:11:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:11:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:11:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:11:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:11:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:11:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:11:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:11:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:11:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:11:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:11:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:11:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:11:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:11:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:11:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:11:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:11:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:11:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:11:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:11:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:11:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:11:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:11:40 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-02 18:11:40 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-02 18:11:40 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-02 18:11:40 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-02 18:11:40 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-02 18:11:40 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 5898 ms
2020-04-02 18:11:42 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-02 18:11:42 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-02 18:11:42 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-02 18:11:42 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-02 18:11:42 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-02 18:11:42 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-02 18:11:42 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-02 18:11:42 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585822302798'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-02 18:11:42 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-02 18:11:42 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-02 18:11:42 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@3bfab643
2020-04-02 18:11:43 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-02 18:11:43 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-02 18:11:43 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-02 18:11:43 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-02 18:11:43 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-02 18:11:44 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-02 18:11:44 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-02 18:11:44 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-02 18:11:44 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-02 18:11:44 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-02 18:11:44 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-02 18:11:44 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-02 18:11:44 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-02 18:11:44 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-02 18:11:44 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-02 18:11:44 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-02 18:11:44 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-02 18:11:44 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-02 18:11:44 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-02 18:11:44 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-02 18:11:44 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-02 18:11:44 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-02 18:11:44 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: systemUserDetailUsingGET_1
2020-04-02 18:11:44 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-02 18:11:44 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-02 18:11:44 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-02 18:11:44 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 11.168 seconds (JVM running for 15.554)
2020-04-02 18:11:44 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-02 18:11:44 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-02 18:11:45 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-02 18:11:45 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-02 18:11:45 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-02 18:11:45 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-02 18:11:45 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-02 18:11:45 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-02 18:11:45 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-02 18:11:45 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585821595766"'s failed in-progress jobs.
2020-04-02 18:11:45 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585822302798 started.
2020-04-02 18:11:46 INFO  RMI TCP Connection(7)-192.168.80.1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-02 18:11:46 INFO  RMI TCP Connection(7)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-02 18:11:46 INFO  RMI TCP Connection(7)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 46 ms
2020-04-02 18:11:46 INFO  http-nio-8080-exec-2 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-02 18:11:54 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 18:11:54 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:11:54 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 18:11:54 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-02T18:11:54.697+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-02 18:11:54 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 18:11:54 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 18:11:54 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 18:11:54 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 18:11:54 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 18:11:54 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:11:55 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 18:11:55 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 18:11:55 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 18:11:55 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T18:11:55.697+0800' WHERE (USERNAME = 'ccc');
2020-04-02 18:11:55 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 18:11:55 | 耗时 14 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 18:11:55 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 18:11:55 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 18:11:55 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 18:11:55 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 18:11:55 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 18:11:55 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 18:11:55 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 18:11:55 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 18:11:57 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 18:11:57 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 18:11:57 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 18:11:57 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 18:11:57 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 18:11:57 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 18:11:57 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 18:11:57 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 18:11:58 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 18:11:58 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:11:58 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 18:11:58 | 耗时 1 ms | SQL 语句：
INSERT INTO t_order (USER_ID, PARK_ID) VALUES (1, 16);
2020-04-02 18:11:58 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 18:11:58 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (ID = 16);
2020-04-02 18:11:59 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 18:11:59 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 18:11:59 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 18:11:59 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 18:12:05 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 18:12:05 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:12:05 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 18:12:05 | 耗时 2 ms | SQL 语句：
INSERT INTO t_order (USER_ID, PARK_ID) VALUES (1, 17);
2020-04-02 18:12:05 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 18:12:05 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (ID = 17);
2020-04-02 18:12:05 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 18:12:05 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 18:12:05 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 18:12:05 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 18:13:20 INFO  File Watcher org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-02 18:13:20 INFO  File Watcher org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 91ms. Found 0 Redis repository interfaces.
2020-04-02 18:14:43 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 111072 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-02 18:14:43 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-02 18:14:43 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-02 18:14:43 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-02 18:14:46 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-02 18:14:46 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-02 18:14:47 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 410ms. Found 0 Redis repository interfaces.
2020-04-02 18:14:49 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:14:49 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$a55f24b2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:14:49 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:14:49 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:14:49 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$fd82b462] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:14:49 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$1f9c6a6a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:14:49 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:14:49 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$46cb695e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:14:49 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:14:49 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$7999207b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:14:49 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:14:49 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:14:49 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-02 18:14:49 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-02 18:14:49 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-02 18:14:49 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-02 18:14:49 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-02 18:14:49 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-02 18:14:49 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-02 18:14:49 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-02 18:14:49 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:14:49 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:14:49 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:14:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:14:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:14:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:14:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:14:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:14:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:14:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:14:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:14:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:14:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:14:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:14:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:14:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:14:51 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:14:51 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:14:51 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:14:51 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:14:51 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:14:51 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:14:51 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:14:51 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:14:51 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:14:51 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-02 18:14:51 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-02 18:14:51 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-02 18:14:51 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-02 18:14:52 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-02 18:14:52 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 8559 ms
2020-04-02 18:14:55 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-02 18:14:55 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-02 18:14:55 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-02 18:14:55 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-02 18:14:55 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-02 18:14:55 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-02 18:14:55 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-02 18:14:55 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585822495527'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-02 18:14:55 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-02 18:14:55 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-02 18:14:55 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@66f73d3d
2020-04-02 18:14:55 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-02 18:14:56 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-02 18:14:56 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-02 18:14:56 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-02 18:14:57 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-02 18:14:57 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-02 18:14:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-02 18:14:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-02 18:14:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-02 18:14:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-02 18:14:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-02 18:14:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-02 18:14:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-02 18:14:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-02 18:14:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-02 18:14:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-02 18:14:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-02 18:14:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-02 18:14:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-02 18:14:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-02 18:14:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-02 18:14:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-02 18:14:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: systemUserDetailUsingGET_1
2020-04-02 18:14:57 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-02 18:14:57 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-02 18:14:57 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-02 18:14:57 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 16.364 seconds (JVM running for 21.287)
2020-04-02 18:14:58 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-02 18:14:58 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-02 18:14:58 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-02 18:14:58 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-02 18:14:58 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-02 18:14:58 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-02 18:14:58 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-02 18:14:58 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-02 18:14:58 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-02 18:14:58 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585822302798"'s failed in-progress jobs.
2020-04-02 18:14:58 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585822495527 started.
2020-04-02 18:14:59 INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-02 18:14:59 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-02 18:14:59 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 24 ms
2020-04-02 18:14:59 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-02 18:15:02 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 18:15:02 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 18:15:02 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 18:15:02 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 18:15:02 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 18:15:02 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:15:03 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 18:15:03 | 耗时 5 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 18:15:04 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 18:15:04 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 18:15:04 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 18:15:04 | 耗时 2 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 18:15:07 INFO  http-nio-8080-exec-9 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-02 18:15:07 INFO  http-nio-8080-exec-9 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 62ms. Found 0 Redis repository interfaces.
2020-04-02 18:15:08 INFO  http-nio-8080-exec-9 org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-02 18:15:08 INFO  http-nio-8080-exec-9 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-02 18:15:08 INFO  http-nio-8080-exec-9 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 171ms. Found 0 Redis repository interfaces.
2020-04-02 18:15:08 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-02 18:15:09 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 18:15:09 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:15:09 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 18:15:09 | 耗时 2 ms | SQL 语句：
INSERT INTO t_order (USER_ID, PARK_ID) VALUES (1, 17);
2020-04-02 18:15:20 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 18:15:20 | 耗时 13 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (ID = 17);
2020-04-02 18:15:33 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 18:15:33 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 18:15:33 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 18:15:33 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 18:15:54 INFO  File Watcher org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-02 18:15:54 INFO  File Watcher org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 79ms. Found 0 Redis repository interfaces.
2020-04-02 18:16:00 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 18:16:00 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 18:16:00 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 18:16:00 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 18:16:00 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 18:16:00 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:16:01 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 18:16:01 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 18:16:01 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 18:16:01 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 18:16:01 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 18:16:01 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 18:16:03 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 18:16:03 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:16:03 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 18:16:03 | 耗时 44 ms | SQL 语句：
INSERT INTO t_order (USER_ID, PARK_ID) VALUES (1, 17);
2020-04-02 18:16:41 INFO  http-nio-8080-exec-4 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-02 18:16:41 INFO  http-nio-8080-exec-4 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 74ms. Found 0 Redis repository interfaces.
2020-04-02 18:16:42 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 18:16:42 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 18:16:42 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 18:16:42 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 18:16:42 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 18:16:42 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:16:42 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 18:16:42 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 18:16:42 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 18:16:42 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 18:16:42 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 18:16:42 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 18:16:48 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 18:16:48 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:16:48 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 18:16:48 | 耗时 1 ms | SQL 语句：
INSERT INTO t_order (USER_ID, PARK_ID) VALUES (1, 17);
2020-04-02 18:16:48 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 18:16:48 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (ID = 17);
2020-04-02 18:16:48 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 18:16:48 | 耗时 2 ms | SQL 语句：
UPDATE t_park SET MOBILE = '15623041759', DESCRIPTION = '86上山了 86上山了', MODIFYTIME = '2020-04-02T18:16:48.933+0800', CREATETIME = '2020-03-31T20:09:19.000+0800', PRICE = 4.0, PLACE = '秋名山', SPAN = 'AE86', STATUS = '0', USERNAME = '陈ccc' WHERE ID = 17;
2020-04-02 18:16:48 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 18:16:48 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 18:16:49 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 18:16:49 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 18:23:02 INFO  SpringContextShutdownHook org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-02 18:23:03 INFO  SpringContextShutdownHook org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 124ms. Found 0 Redis repository interfaces.
2020-04-02 18:23:04 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585822495527 paused.
2020-04-02 18:23:04 INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-02 18:23:04 INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-04-02 18:23:04 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585822495527 shutting down.
2020-04-02 18:23:04 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585822495527 paused.
2020-04-02 18:23:04 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585822495527 shutdown complete.
2020-04-02 18:23:04 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-04-02 18:23:04 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-04-02 18:23:04 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-04-02 18:23:04 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-04-02 18:23:04 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-04-02 18:23:04 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-04-02 18:31:01 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 112316 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-02 18:31:01 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-02 18:31:01 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-02 18:31:01 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-02 18:31:03 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-02 18:31:03 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-02 18:31:04 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 155ms. Found 0 Redis repository interfaces.
2020-04-02 18:31:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:31:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$e5db6210] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:31:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:31:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:31:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$3dfef1c0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:31:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$6018a7c8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:31:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:31:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$8747a6bc] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:31:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:31:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$ba155dd9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:31:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:31:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:31:05 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-02 18:31:05 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-02 18:31:05 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-02 18:31:05 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-02 18:31:05 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-02 18:31:05 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-02 18:31:05 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-02 18:31:05 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-02 18:31:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:31:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:31:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:31:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:31:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:31:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:31:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:31:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:31:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:31:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:31:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:31:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:31:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:31:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:31:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:31:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:31:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:31:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:31:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:31:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:31:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:31:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:31:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:31:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:31:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:31:07 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-02 18:31:07 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-02 18:31:07 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-02 18:31:07 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-02 18:31:07 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-02 18:31:07 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 5990 ms
2020-04-02 18:31:10 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-02 18:31:10 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-02 18:31:10 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-02 18:31:10 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-02 18:31:10 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-02 18:31:10 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-02 18:31:10 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-02 18:31:10 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585823470452'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-02 18:31:10 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-02 18:31:10 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-02 18:31:10 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@3d376f28
2020-04-02 18:31:10 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-02 18:31:10 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-02 18:31:10 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-02 18:31:11 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-02 18:31:11 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-02 18:31:11 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-02 18:31:12 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-02 18:31:12 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-02 18:31:12 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-02 18:31:12 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-02 18:31:12 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-02 18:31:12 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-02 18:31:12 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-02 18:31:12 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-02 18:31:12 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-02 18:31:12 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-02 18:31:12 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-02 18:31:12 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-02 18:31:12 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-02 18:31:12 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: systemUserDetailUsingGET_1
2020-04-02 18:31:12 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-02 18:31:12 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-02 18:31:12 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-02 18:31:12 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-02 18:31:12 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-02 18:31:12 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-02 18:31:12 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 12.072 seconds (JVM running for 17.448)
2020-04-02 18:31:12 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-02 18:31:12 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-02 18:31:13 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-02 18:31:13 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-02 18:31:13 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585822495527"'s failed in-progress jobs.
2020-04-02 18:31:13 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585823470452 started.
2020-04-02 18:31:13 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-02 18:31:13 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-02 18:31:13 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-02 18:31:13 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-02 18:31:13 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-02 18:31:14 INFO  RMI TCP Connection(4)-192.168.80.1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-02 18:31:14 INFO  RMI TCP Connection(4)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-02 18:31:14 INFO  RMI TCP Connection(4)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 24 ms
2020-04-02 18:31:14 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-02 18:31:20 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 18:31:20 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:31:20 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 18:31:20 | 耗时 1 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-02T18:31:20.745+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-02 18:31:20 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 18:31:20 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 18:31:20 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 18:31:20 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 18:31:20 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 18:31:20 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:31:21 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 18:31:21 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 18:31:21 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 18:31:21 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T18:31:21.746+0800' WHERE (USERNAME = 'ccc');
2020-04-02 18:31:21 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 18:31:21 | 耗时 10 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 18:31:21 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 18:31:21 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 18:31:21 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 18:31:21 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 18:31:21 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 18:31:21 | 耗时 2 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 18:31:21 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 18:31:21 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 18:31:23 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 18:31:23 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (AVAILABLE = '1');
2020-04-02 18:31:23 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 18:31:23 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 18:32:14 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 18:32:14 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 18:32:14 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 18:32:14 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 18:32:14 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 18:32:14 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:32:14 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 18:32:14 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 18:32:14 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 18:32:14 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (AVAILABLE = '1');
2020-04-02 18:32:14 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 18:32:14 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 18:32:17 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 18:32:17 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 18:32:17 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 18:32:17 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 18:32:17 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 18:32:17 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:32:17 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 18:32:17 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 18:32:17 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 18:32:17 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (AVAILABLE = '1');
2020-04-02 18:32:17 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 18:32:17 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 18:33:13 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 18:33:13 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 18:33:13 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 18:33:13 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 18:33:14 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 18:33:14 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:33:14 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 18:33:14 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 18:33:14 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 18:33:14 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (AVAILABLE = '1');
2020-04-02 18:33:14 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 18:33:14 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 18:33:15 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 18:33:15 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 18:33:15 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 18:33:15 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 18:33:15 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 18:33:15 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:33:16 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 18:33:16 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 18:33:16 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 18:33:16 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (AVAILABLE = '1');
2020-04-02 18:33:16 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 18:33:16 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 18:33:28 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 18:33:28 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:33:28 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 18:33:28 | 耗时 1 ms | SQL 语句：
INSERT INTO t_order (USER_ID, PARK_ID) VALUES (1, 17);
2020-04-02 18:33:28 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 18:33:28 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (ID = 17);
2020-04-02 18:33:28 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 18:33:28 | 耗时 1 ms | SQL 语句：
UPDATE t_park SET MOBILE = '15623041759', AVAILABLE = '1', DESCRIPTION = '86上山了 86上山了', MODIFYTIME = '2020-04-02T18:33:28.298+0800', CREATETIME = '2020-03-31T20:09:19.000+0800', PRICE = 4.0, PLACE = '秋名山', SPAN = 'AE86', STATUS = '0', USERNAME = '陈ccc' WHERE ID = 17;
2020-04-02 18:33:28 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 18:33:28 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (AVAILABLE = '1');
2020-04-02 18:33:28 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 18:33:28 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 18:35:40 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 18:35:40 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 18:35:43 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 18:35:43 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 18:39:38 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585823470452 paused.
2020-04-02 18:39:38 INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-02 18:39:38 INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-04-02 18:39:38 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585823470452 shutting down.
2020-04-02 18:39:38 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585823470452 paused.
2020-04-02 18:39:38 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585823470452 shutdown complete.
2020-04-02 18:39:38 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-04-02 18:39:38 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-04-02 18:39:38 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-04-02 18:39:38 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-04-02 18:39:38 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-04-02 18:39:38 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-04-02 18:44:33 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 104884 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-02 18:44:33 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-02 18:44:33 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-02 18:44:33 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-02 18:44:35 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-02 18:44:35 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-02 18:44:35 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 157ms. Found 0 Redis repository interfaces.
2020-04-02 18:44:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:44:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$b50c42c6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:44:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:44:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:44:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$d2fd276] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:44:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$2f49887e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:44:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:44:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$56788772] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:44:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:44:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$89463e8f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:44:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:44:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:44:37 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-02 18:44:37 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-02 18:44:37 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-02 18:44:37 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-02 18:44:37 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-02 18:44:37 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-02 18:44:37 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-02 18:44:37 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-02 18:44:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:44:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:44:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:44:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:44:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:44:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:44:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:44:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:44:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:44:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:44:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:44:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:44:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:44:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:44:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:44:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:44:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:44:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:44:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:44:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:44:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:44:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:44:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:44:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:44:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 18:44:39 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-02 18:44:39 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-02 18:44:39 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-02 18:44:39 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-02 18:44:39 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-02 18:44:39 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 6179 ms
2020-04-02 18:44:42 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-02 18:44:42 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-02 18:44:42 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-02 18:44:42 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-02 18:44:42 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-02 18:44:42 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-02 18:44:42 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-02 18:44:42 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585824282532'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-02 18:44:42 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-02 18:44:42 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-02 18:44:42 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@f456711
2020-04-02 18:44:42 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-02 18:44:42 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-02 18:44:43 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-02 18:44:43 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-02 18:44:43 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-02 18:44:44 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-02 18:44:44 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-02 18:44:44 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-02 18:44:44 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-02 18:44:44 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-02 18:44:44 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-02 18:44:44 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-02 18:44:44 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-02 18:44:44 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-02 18:44:44 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-02 18:44:44 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-02 18:44:44 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-02 18:44:44 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-02 18:44:44 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-02 18:44:44 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-02 18:44:44 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-02 18:44:44 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-02 18:44:44 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: systemUserDetailUsingGET_1
2020-04-02 18:44:44 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-02 18:44:44 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-02 18:44:44 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-02 18:44:44 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 12.479 seconds (JVM running for 17.5)
2020-04-02 18:44:45 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-02 18:44:45 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-02 18:44:45 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-02 18:44:45 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-02 18:44:45 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585823470452"'s failed in-progress jobs.
2020-04-02 18:44:45 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585824282532 started.
2020-04-02 18:44:46 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-02 18:44:46 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-02 18:44:46 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-02 18:44:46 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-02 18:44:46 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-02 18:44:46 INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-02 18:44:46 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-02 18:44:46 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 17 ms
2020-04-02 18:44:46 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-02 18:44:52 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 18:44:52 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:44:52 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 18:44:52 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-02T18:44:52.687+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-02 18:44:52 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 18:44:52 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 18:44:52 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 18:44:52 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 18:44:52 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 18:44:52 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:44:53 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 18:44:53 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 18:44:53 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 18:44:53 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T18:44:53.539+0800' WHERE (USERNAME = 'ccc');
2020-04-02 18:44:53 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 18:44:53 | 耗时 13 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 18:44:53 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 18:44:53 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 18:44:53 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 18:44:53 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 18:44:53 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 18:44:53 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 18:44:53 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 18:44:53 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 18:44:54 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 18:44:54 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 18:44:54 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 18:44:54 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 18:44:54 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 18:44:54 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (AVAILABLE = '1');
2020-04-02 18:44:54 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 18:44:54 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 18:44:57 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 18:44:57 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:44:57 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 18:44:57 | 耗时 2 ms | SQL 语句：
INSERT INTO t_order (USER_ID, PARK_ID) VALUES (1, 16);
2020-04-02 18:44:57 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 18:44:57 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (ID = 16);
2020-04-02 18:44:57 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 18:44:57 | 耗时 2 ms | SQL 语句：
UPDATE t_park SET MOBILE = '15623041759', AVAILABLE = '1', DESCRIPTION = '测试数据', MODIFYTIME = '2020-04-02T18:44:57.448+0800', CREATETIME = '2020-03-31T20:07:19.000+0800', PRICE = 4.0, PLACE = '武汉市', SPAN = 'GTR 32', STATUS = '0', USERNAME = 'chencheng' WHERE ID = 16;
2020-04-02 18:44:57 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 18:44:57 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (AVAILABLE = '1');
2020-04-02 18:44:57 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 18:44:57 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 18:45:55 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 18:45:55 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 18:45:55 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 18:45:55 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 18:45:55 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 18:45:55 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:45:56 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 18:45:56 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 18:45:56 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 18:45:56 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (AVAILABLE = '1');
2020-04-02 18:45:56 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 18:45:56 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 18:45:56 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 18:45:56 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 18:45:56 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 18:45:56 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 18:45:56 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 18:45:56 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:45:57 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 18:45:57 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 18:45:57 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 18:45:57 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (AVAILABLE = '1');
2020-04-02 18:45:57 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 18:45:57 | 耗时 2 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 18:45:58 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 18:45:58 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 18:45:58 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 18:45:58 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 18:45:58 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 18:45:58 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:45:58 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 18:45:58 | 耗时 6 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 18:45:58 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 18:45:58 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (AVAILABLE = '1');
2020-04-02 18:45:58 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 18:45:58 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 18:45:59 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 18:45:59 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 18:45:59 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 18:45:59 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 18:45:59 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 18:45:59 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:45:59 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 18:45:59 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 18:45:59 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 18:45:59 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (AVAILABLE = '1');
2020-04-02 18:45:59 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 18:45:59 | 耗时 2 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 18:46:00 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 18:46:00 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 18:46:00 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 18:46:00 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 18:46:00 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 18:46:00 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:46:01 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 18:46:01 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 18:46:01 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 18:46:01 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (AVAILABLE = '1');
2020-04-02 18:46:01 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 18:46:01 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 18:48:21 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 18:48:21 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 18:48:23 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 18:48:23 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 18:52:14 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 18:52:14 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 18:52:14 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 18:52:14 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 18:52:14 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 18:52:14 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:52:14 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 18:52:14 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 18:52:16 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 18:52:16 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 18:52:16 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 18:52:16 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 18:52:16 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 18:52:16 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:52:17 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 18:52:17 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 18:52:19 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 18:52:19 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 18:52:19 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 18:52:19 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 18:52:19 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 18:52:19 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:52:20 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 18:52:20 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 18:52:33 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 18:52:33 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 18:52:33 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 18:52:33 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 18:52:33 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 18:52:33 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:52:33 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 18:52:33 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 18:52:34 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 18:52:34 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 18:52:34 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 18:52:34 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 18:52:34 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 18:52:34 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:52:35 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 18:52:35 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 18:52:52 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 18:52:52 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 18:52:52 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 18:52:52 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 18:52:52 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 18:52:52 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:52:52 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 18:52:52 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 18:52:53 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 18:52:53 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 18:52:53 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 18:52:53 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 18:52:53 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 18:52:53 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:52:54 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 18:52:54 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 18:53:06 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 18:53:06 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 18:53:06 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 18:53:06 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 18:53:07 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 18:53:07 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:53:07 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 18:53:07 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 18:53:07 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 18:53:07 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (AVAILABLE = '1');
2020-04-02 18:53:07 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 18:53:07 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 18:53:08 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 18:53:08 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 18:53:08 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 18:53:08 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 18:53:08 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 18:53:08 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:53:08 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 18:53:08 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 18:53:08 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 18:53:08 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (AVAILABLE = '1');
2020-04-02 18:53:08 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 18:53:08 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 18:59:05 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 18:59:05 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 18:59:05 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 18:59:05 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 18:59:05 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 18:59:05 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:59:06 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 18:59:06 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 18:59:06 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 18:59:06 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (AVAILABLE = '1');
2020-04-02 18:59:06 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 18:59:06 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 18:59:08 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 18:59:08 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 18:59:08 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 18:59:08 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 18:59:08 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 18:59:08 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 18:59:08 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 18:59:08 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 18:59:08 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 18:59:08 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (AVAILABLE = '1');
2020-04-02 18:59:08 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 18:59:08 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 19:00:23 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 19:00:23 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 19:00:23 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 19:00:23 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 19:00:23 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 19:00:23 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 19:00:23 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 19:00:23 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 19:00:23 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 19:00:23 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (AVAILABLE = '1');
2020-04-02 19:00:23 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 19:00:23 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 19:00:26 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 19:00:26 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 19:00:26 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 19:00:26 | 耗时 1 ms | SQL 语句：
INSERT INTO t_order (USER_ID, PARK_ID) VALUES (1, 15);
2020-04-02 19:00:26 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 19:00:26 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (ID = 15);
2020-04-02 19:00:26 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 19:00:26 | 耗时 2 ms | SQL 语句：
UPDATE t_park SET MOBILE = '15623041759', AVAILABLE = '1', DESCRIPTION = '测试数据', MODIFYTIME = '2020-04-02T19:00:26.129+0800', CREATETIME = '2020-03-31T20:04:10.000+0800', PRICE = 4.0, PLACE = '上海市', SPAN = 'Evolution', STATUS = '0', USERNAME = 'chenc' WHERE ID = 15;
2020-04-02 19:00:26 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 19:00:26 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (AVAILABLE = '1');
2020-04-02 19:00:26 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 19:00:26 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 19:00:29 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 19:00:29 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 19:00:29 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 19:00:29 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 19:00:29 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 19:00:29 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 19:00:29 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 19:00:29 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 19:00:29 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 19:00:29 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (AVAILABLE = '1');
2020-04-02 19:00:29 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 19:00:29 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 19:01:16 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585824282532 paused.
2020-04-02 19:01:16 INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-02 19:01:16 INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-04-02 19:01:16 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585824282532 shutting down.
2020-04-02 19:01:16 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585824282532 paused.
2020-04-02 19:01:16 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585824282532 shutdown complete.
2020-04-02 19:01:16 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-04-02 19:01:16 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-04-02 19:01:16 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-04-02 19:01:16 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-04-02 19:01:16 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-04-02 19:01:16 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-04-02 20:08:41 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 104196 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-02 20:08:41 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-02 20:08:41 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-02 20:08:41 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-02 20:08:43 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-02 20:08:43 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-02 20:08:43 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 184ms. Found 0 Redis repository interfaces.
2020-04-02 20:08:44 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:08:44 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$5e0aa1a6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:08:44 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:08:44 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:08:44 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$b62e3156] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:08:44 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$d847e75e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:08:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:08:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$ff76e652] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:08:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:08:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$32449d6f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:08:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:08:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:08:45 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-02 20:08:45 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-02 20:08:45 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-02 20:08:45 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-02 20:08:45 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-02 20:08:45 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-02 20:08:45 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-02 20:08:45 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-02 20:08:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:08:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:08:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:08:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:08:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:08:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:08:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:08:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:08:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:08:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:08:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:08:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:08:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:08:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:08:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:08:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:08:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:08:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:08:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:08:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:08:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:08:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:08:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:08:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:08:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:08:47 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-02 20:08:47 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-02 20:08:47 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-02 20:08:47 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-02 20:08:47 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-02 20:08:47 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 6731 ms
2020-04-02 20:08:50 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-02 20:08:50 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-02 20:08:50 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-02 20:08:50 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-02 20:08:50 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-02 20:08:51 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-02 20:08:51 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-02 20:08:51 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585829330969'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-02 20:08:51 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-02 20:08:51 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-02 20:08:51 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@68b2ce71
2020-04-02 20:08:51 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-02 20:08:51 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-02 20:08:51 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-02 20:08:52 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-02 20:08:52 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-02 20:08:52 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-02 20:08:52 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-02 20:08:52 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-02 20:08:52 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-02 20:08:52 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-02 20:08:52 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-02 20:08:52 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-02 20:08:52 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-02 20:08:52 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-02 20:08:52 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-02 20:08:52 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-02 20:08:52 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-02 20:08:52 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-02 20:08:52 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-02 20:08:52 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAvailableUsingGET_1
2020-04-02 20:08:53 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-02 20:08:53 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-02 20:08:53 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-02 20:08:53 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-02 20:08:53 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-02 20:08:53 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-02 20:08:53 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 13.348 seconds (JVM running for 18.711)
2020-04-02 20:08:53 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-02 20:08:53 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-02 20:08:54 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-02 20:08:54 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-02 20:08:54 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-02 20:08:54 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-02 20:08:54 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-02 20:08:54 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-02 20:08:54 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-02 20:08:54 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585824282532"'s failed in-progress jobs.
2020-04-02 20:08:54 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585829330969 started.
2020-04-02 20:08:54 INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-02 20:08:54 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-02 20:08:54 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 32 ms
2020-04-02 20:08:54 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-02 20:09:05 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:09:05 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:09:06 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:09:06 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-02T20:09:05.962+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-02 20:09:06 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:09:06 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:09:06 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:09:06 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:09:06 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:09:06 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:09:06 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:09:06 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:09:07 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:09:07 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:09:06.951+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:09:07 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:09:07 | 耗时 2 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:09:07 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:09:07 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:09:07 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:09:07 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:09:07 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:09:07 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:09:07 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:09:07 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:09:12 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:09:12 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:09:12 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:09:12 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:09:13 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:09:13 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:09:12.997+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:09:13 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:09:13 | 耗时 2 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:09:13 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:09:13 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:09:13 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:09:13 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:09:13 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:09:13 | 耗时 2 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:09:13 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:09:13 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:09:24 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:09:24 | 耗时 2 ms | SQL 语句：
SELECT MENU_ID, ICON, ORDER_NUM, MENU_NAME, TYPE, URL, PARENT_ID, MODIFY_TIME, CREATE_TIME, PERMS FROM t_menu ORDER BY ORDER_NUM ASC;
2020-04-02 20:09:48 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:09:48 | 耗时 13 ms | SQL 语句：
UPDATE t_menu SET ICON = 'layui-icon-check-circle-fill', ORDER_NUM = 2, MENU_NAME = '信息审核', TYPE = '0', URL = 'park/available', PARENT_ID = 176, CREATE_TIME = '2020-04-02T20:09:48.799+0800', PERMS = 'available:view' WHERE MENU_ID = 182;
2020-04-02 20:09:48 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:09:48 | 耗时 2 ms | SQL 语句：
SELECT MENU_ID, ICON, ORDER_NUM, MENU_NAME, TYPE, URL, PARENT_ID, MODIFY_TIME, CREATE_TIME, PERMS FROM t_menu ORDER BY ORDER_NUM ASC;
2020-04-02 20:09:50 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:09:50 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:09:50 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:09:50 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:09:50 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:09:50 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:09:51 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:09:51 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:09:51 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:09:51 | 耗时 1 ms | SQL 语句：
SELECT MENU_ID, ICON, ORDER_NUM, MENU_NAME, TYPE, URL, PARENT_ID, MODIFY_TIME, CREATE_TIME, PERMS FROM t_menu ORDER BY ORDER_NUM ASC;
2020-04-02 20:09:54 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:09:54 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:09:54.526+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:09:54 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:09:54 | 耗时 13 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:09:54 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:09:54 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:09:54 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:09:54 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:09:54 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:09:54 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:09:54 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:09:54 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:10:00 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:10:00 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:10:00.711+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:10:00 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:10:00 | 耗时 8 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:10:00 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:10:00 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:10:00 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:10:00 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:10:00 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:10:00 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:10:00 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:10:00 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:10:05 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:10:05 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:10:05.751+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:10:05 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:10:05 | 耗时 5 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:10:05 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:10:05 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:10:05 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:10:05 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:10:05 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:10:05 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:10:05 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:10:05 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:12:25 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585829330969 paused.
2020-04-02 20:12:25 INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-02 20:12:25 INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-04-02 20:12:25 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585829330969 shutting down.
2020-04-02 20:12:25 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585829330969 paused.
2020-04-02 20:12:25 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585829330969 shutdown complete.
2020-04-02 20:12:25 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-04-02 20:12:25 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-04-02 20:12:25 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-04-02 20:12:25 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-04-02 20:12:25 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-04-02 20:12:25 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-04-02 20:13:08 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 115884 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-02 20:13:08 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-02 20:13:08 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-02 20:13:08 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-02 20:13:10 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-02 20:13:10 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-02 20:13:11 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 184ms. Found 0 Redis repository interfaces.
2020-04-02 20:13:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:13:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$7cdc81f3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:13:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:13:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:13:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$d50011a3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:13:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$f719c7ab] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:13:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:13:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$1e48c69f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:13:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:13:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$51167dbc] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:13:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:13:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:13:12 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-02 20:13:12 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-02 20:13:12 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-02 20:13:12 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-02 20:13:12 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-02 20:13:12 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-02 20:13:12 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-02 20:13:12 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-02 20:13:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:13:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:13:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:13:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:13:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:13:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:13:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:13:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:13:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:13:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:13:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:13:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:13:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:13:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:13:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:13:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:13:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:13:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:13:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:13:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:13:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:13:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:13:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:13:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:13:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:13:14 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-02 20:13:14 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-02 20:13:14 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-02 20:13:14 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-02 20:13:15 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-02 20:13:15 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 6660 ms
2020-04-02 20:13:18 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-02 20:13:18 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-02 20:13:18 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-02 20:13:18 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-02 20:13:18 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-02 20:13:18 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-02 20:13:18 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-02 20:13:18 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585829598639'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-02 20:13:18 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-02 20:13:18 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-02 20:13:18 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@1fd2716f
2020-04-02 20:13:19 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-02 20:13:19 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-02 20:13:19 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-02 20:13:20 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-02 20:13:20 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-02 20:13:20 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-02 20:13:20 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-02 20:13:20 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-02 20:13:20 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-02 20:13:20 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-02 20:13:20 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-02 20:13:20 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-02 20:13:20 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-02 20:13:20 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-02 20:13:20 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-02 20:13:20 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-02 20:13:20 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-02 20:13:20 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-02 20:13:20 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-02 20:13:20 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-02 20:13:20 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-02 20:13:20 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-02 20:13:20 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAvailableUsingGET_1
2020-04-02 20:13:20 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-02 20:13:20 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-02 20:13:21 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-02 20:13:21 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 13.919 seconds (JVM running for 18.611)
2020-04-02 20:13:21 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-02 20:13:21 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-02 20:13:21 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-02 20:13:21 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-02 20:13:21 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-02 20:13:21 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-02 20:13:21 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-02 20:13:21 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-02 20:13:22 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-02 20:13:22 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585829330969"'s failed in-progress jobs.
2020-04-02 20:13:22 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585829598639 started.
2020-04-02 20:13:22 INFO  http-nio-8080-exec-2 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-02 20:13:22 INFO  http-nio-8080-exec-2 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-02 20:13:22 INFO  http-nio-8080-exec-2 org.springframework.web.servlet.DispatcherServlet Completed initialization in 17 ms
2020-04-02 20:13:22 INFO  http-nio-8080-exec-2 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-02 20:13:28 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:13:28 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:13:28 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:13:28 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-02T20:13:28.546+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-02 20:13:28 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:13:28 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:13:28 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:13:28 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:13:28 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:13:28 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:13:29 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:13:29 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:13:29 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:13:29 | 耗时 3 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:13:29.547+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:13:29 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:13:29 | 耗时 6 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:13:29 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:13:29 | 耗时 2 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:13:29 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:13:29 | 耗时 2 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:13:29 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:13:29 | 耗时 2 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:13:29 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:13:29 | 耗时 2 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:15:35 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:15:35 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:15:35 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:15:35 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:15:35 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:15:35 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:15:36 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:15:36 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:17:27 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:17:27 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:17:27 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:17:27 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:17:27 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:17:27 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:17:28 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:17:28 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:20:13 INFO  File Watcher org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-02 20:20:13 INFO  File Watcher org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 71ms. Found 0 Redis repository interfaces.
2020-04-02 20:20:19 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:20:19 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:20:19 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:20:19 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:20:19 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:20:19 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:20:19 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:20:19 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:20:22 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:20:22 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:20:22 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:20:22 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:20:22 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:20:22 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:20:23 INFO  http-nio-8080-exec-1 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-02 20:20:23 INFO  http-nio-8080-exec-1 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 88ms. Found 0 Redis repository interfaces.
2020-04-02 20:20:24 INFO  http-nio-8080-exec-1 org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-02 20:20:24 INFO  http-nio-8080-exec-1 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-02 20:20:24 INFO  http-nio-8080-exec-1 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 197ms. Found 0 Redis repository interfaces.
2020-04-02 20:20:25 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:20:25 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:23:11 INFO  http-nio-8080-exec-9 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-02 20:23:11 INFO  http-nio-8080-exec-9 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 91ms. Found 0 Redis repository interfaces.
2020-04-02 20:23:12 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:23:12 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:23:12 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:23:12 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:23:13 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:23:13 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:23:13 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:23:13 | 耗时 8 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:23:23 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585829598639 paused.
2020-04-02 20:23:23 INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-02 20:23:23 INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-04-02 20:23:23 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585829598639 shutting down.
2020-04-02 20:23:23 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585829598639 paused.
2020-04-02 20:23:23 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585829598639 shutdown complete.
2020-04-02 20:23:24 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-04-02 20:23:24 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-04-02 20:23:24 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-04-02 20:23:24 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-04-02 20:23:24 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-04-02 20:23:24 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-04-02 20:24:30 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 80944 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-02 20:24:30 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-02 20:24:31 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-02 20:24:31 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-02 20:24:33 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-02 20:24:33 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-02 20:24:33 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 183ms. Found 0 Redis repository interfaces.
2020-04-02 20:24:34 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:24:34 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$74e2f3cd] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:24:34 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:24:34 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:24:34 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$cd06837d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:24:34 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$ef203985] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:24:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:24:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$164f3879] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:24:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:24:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$491cef96] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:24:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:24:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:24:35 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-02 20:24:35 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-02 20:24:35 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-02 20:24:35 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-02 20:24:35 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-02 20:24:35 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-02 20:24:35 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-02 20:24:35 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-02 20:24:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:24:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:24:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:24:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:24:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:24:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:24:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:24:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:24:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:24:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:24:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:24:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:24:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:24:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:24:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:24:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:24:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:24:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:24:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:24:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:24:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:24:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:24:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:24:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:24:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:24:37 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-02 20:24:37 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-02 20:24:37 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-02 20:24:37 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-02 20:24:37 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-02 20:24:37 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 6501 ms
2020-04-02 20:24:40 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-02 20:24:40 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-02 20:24:40 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-02 20:24:40 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-02 20:24:40 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-02 20:24:40 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-02 20:24:40 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-02 20:24:40 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585830280677'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-02 20:24:40 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-02 20:24:40 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-02 20:24:40 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@457512b
2020-04-02 20:24:40 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-02 20:24:41 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-02 20:24:41 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-02 20:24:41 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-02 20:24:42 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-02 20:24:42 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-02 20:24:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-02 20:24:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-02 20:24:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-02 20:24:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-02 20:24:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-02 20:24:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-02 20:24:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-02 20:24:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-02 20:24:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-02 20:24:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-02 20:24:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-02 20:24:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-02 20:24:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-02 20:24:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAvailableUsingGET_1
2020-04-02 20:24:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-02 20:24:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-02 20:24:42 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-02 20:24:42 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-02 20:24:42 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-02 20:24:42 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-02 20:24:42 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 13.497 seconds (JVM running for 18.876)
2020-04-02 20:24:43 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-02 20:24:43 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-02 20:24:43 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-02 20:24:43 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-02 20:24:43 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585829598639"'s failed in-progress jobs.
2020-04-02 20:24:43 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585830280677 started.
2020-04-02 20:24:44 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-02 20:24:44 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-02 20:24:44 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-02 20:24:44 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-02 20:24:44 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-02 20:24:44 INFO  RMI TCP Connection(1)-192.168.80.1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-02 20:24:44 INFO  RMI TCP Connection(1)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-02 20:24:44 INFO  RMI TCP Connection(1)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 25 ms
2020-04-02 20:24:44 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-02 20:24:51 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:24:51 | 耗时 4 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:24:51 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:24:51 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-02T20:24:51.312+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-02 20:24:51 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:24:51 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:24:51 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:24:51 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:24:51 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:24:51 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:24:52 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:24:52 | 耗时 5 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:24:52 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:24:52 | 耗时 3 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:24:52.484+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:24:52 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:24:52 | 耗时 9 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:24:52 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:24:52 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:24:52 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:24:52 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:24:52 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:24:52 | 耗时 2 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:24:52 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:24:52 | 耗时 2 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:24:53 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:24:53 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '0');
2020-04-02 20:24:53 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:24:53 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '0') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 20:24:57 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:24:57 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:24:57.503+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:24:57 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:24:57 | 耗时 7 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:24:57 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:24:57 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:24:57 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:24:57 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:24:57 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:24:57 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:24:57 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:24:57 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:24:58 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:24:58 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '0');
2020-04-02 20:24:58 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:24:58 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '0') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 20:27:01 INFO  http-nio-8080-exec-8 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-02 20:27:01 INFO  http-nio-8080-exec-8 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 80ms. Found 0 Redis repository interfaces.
2020-04-02 20:27:01 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:27:01 | 耗时 5 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:27:01.985+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:27:02 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:27:02 | 耗时 2 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:27:02 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:27:02 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:27:02 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:27:02 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:27:02 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:27:02 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:27:02 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:27:02 | 耗时 3 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:27:07 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:27:07 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 20:27:07 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:27:07 | 耗时 2 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 20:27:18 INFO  http-nio-8080-exec-2 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-02 20:27:18 INFO  http-nio-8080-exec-2 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 114ms. Found 0 Redis repository interfaces.
2020-04-02 20:27:19 INFO  http-nio-8080-exec-2 org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-02 20:27:19 INFO  http-nio-8080-exec-2 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-02 20:27:19 INFO  http-nio-8080-exec-2 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 200ms. Found 0 Redis repository interfaces.
2020-04-02 20:27:20 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:27:20 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:27:20.415+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:27:20 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:27:20 | 耗时 8 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:27:20 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:27:20 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:27:20 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:27:20 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:27:20 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:27:20 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:27:20 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:27:20 | 耗时 2 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:28:23 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:28:23 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:28:23 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:28:23 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:28:23 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:28:23 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:28:24 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:28:24 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:28:24 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:28:24 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:28:24.449+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:28:24 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:28:24 | 耗时 2 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:28:24 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:28:24 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:28:24 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:28:24 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:28:24 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:28:24 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:28:24 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:28:24 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:28:28 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:28:28 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 20:28:28 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:28:28 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 20:28:29 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:28:29 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:28:29.536+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:28:29 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:28:29 | 耗时 2 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:28:29 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:28:29 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:28:29 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:28:29 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:28:29 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:28:29 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:28:29 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:28:29 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:28:41 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:28:41 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:28:42 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:28:42 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:28:42 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:28:42 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:28:42 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:28:42 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:28:42 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:28:42 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:28:42.616+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:28:42 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:28:42 | 耗时 2 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:28:42 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:28:42 | 耗时 0 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:28:42 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:28:42 | 耗时 0 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:28:42 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:28:42 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:28:42 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:28:42 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:28:50 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:28:50 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 20:28:50 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:28:50 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 20:28:51 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:28:51 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:28:51.590+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:28:51 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:28:51 | 耗时 8 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:28:51 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:28:51 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:28:51 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:28:51 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:28:51 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:28:51 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:28:51 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:28:51 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:29:14 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:29:14 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 20:29:14 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:29:14 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 20:29:23 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:29:23 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (USERNAME LIKE '%cccccc%' AND STATUS = '1');
2020-04-02 20:29:23 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:29:23 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (USERNAME LIKE '%cccccc%' AND STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 20:29:27 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:29:27 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 20:29:27 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:29:27 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 20:29:58 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:29:58 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:29:58.396+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:29:58 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:29:58 | 耗时 12 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:29:58 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:29:58 | 耗时 0 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:29:58 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:29:58 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:29:58 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:29:58 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:29:58 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:29:58 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:30:53 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:30:53 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 20:30:53 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:30:53 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 20:30:54 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:30:54 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:30:54.116+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:30:54 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:30:54 | 耗时 9 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:30:54 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:30:54 | 耗时 0 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:30:54 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:30:54 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:30:54 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:30:54 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:30:54 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:30:54 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:31:19 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:31:19 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:31:19 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:31:19 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:31:19 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:31:19 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:31:19 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:31:19 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:31:19 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:31:19 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:31:19.946+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:31:19 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:31:19 | 耗时 11 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:31:19 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:31:19 | 耗时 0 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:31:19 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:31:19 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:31:19 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:31:19 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:31:20 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:31:20 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:31:23 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:31:23 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ) TOTAL;
2020-04-02 20:31:23 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:31:23 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ORDER BY userId LIMIT 0,10;
2020-04-02 20:31:23 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:31:23 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 20:31:23 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:31:23 | 耗时 1 ms | SQL 语句：
SELECT MENU_ID, ICON, ORDER_NUM, MENU_NAME, TYPE, URL, PARENT_ID, MODIFY_TIME, CREATE_TIME, PERMS FROM t_menu ORDER BY ORDER_NUM ASC;
2020-04-02 20:31:23 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:31:23 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT r.role_id roleId, r.role_name roleName, r.remark, r.create_time createTime, r.modify_time modifyTime, GROUP_CONCAT(rm.menu_id) menuIds FROM t_role r LEFT JOIN t_role_menu rm ON (r.role_id = rm.role_id) WHERE 1 = 1 GROUP BY r.role_id ) TOTAL;
2020-04-02 20:31:23 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:31:23 | 耗时 1 ms | SQL 语句：
SELECT r.role_id roleId, r.role_name roleName, r.remark, r.create_time createTime, r.modify_time modifyTime, GROUP_CONCAT(rm.menu_id) menuIds FROM t_role r LEFT JOIN t_role_menu rm ON (r.role_id = rm.role_id) WHERE 1 = 1 GROUP BY r.role_id ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 20:31:24 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:31:24 | 耗时 1 ms | SQL 语句：
SELECT MENU_ID, ICON, ORDER_NUM, MENU_NAME, TYPE, URL, PARENT_ID, MODIFY_TIME, CREATE_TIME, PERMS FROM t_menu ORDER BY ORDER_NUM ASC;
2020-04-02 20:31:24 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:31:24 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept ORDER BY ORDER_NUM ASC;
2020-04-02 20:31:27 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:31:27 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_log;
2020-04-02 20:31:28 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:31:28 | 耗时 7 ms | SQL 语句：
SELECT COUNT(1) FROM t_login_log;
2020-04-02 20:31:28 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:31:28 | 耗时 1 ms | SQL 语句：
SELECT ID, `SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME FROM t_login_log ORDER BY login_time DESC LIMIT 0,10;
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: errorUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: errorUsingHEAD_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: errorUsingPOST_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:31:34 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: errorUsingPUT_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: errorUsingPATCH_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: errorUsingDELETE_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: errorUsingOPTIONS_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:31:34 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: errorUsingTRACE_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: errorHtmlUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: errorHtmlUsingHEAD_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: errorHtmlUsingPOST_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: errorHtmlUsingPUT_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: errorHtmlUsingPATCH_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:31:34 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: errorHtmlUsingDELETE_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: errorHtmlUsingOPTIONS_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: errorHtmlUsingTRACE_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: addDeptUsingPOST_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: deleteDeptUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_10
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_2
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_3
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: updateDeptUsingPOST_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_2
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_11
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: findEximportsUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: generateImportTemplateUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: importExcelsUsingPOST_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: addJobUsingPOST_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: checkCronUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: deleteJobsUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_12
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: jobListUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: updateJobUsingPOST_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_13
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: jobLogListUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: jobLogsDeleteUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: deleteLogsUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_14
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logListUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: captchaUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_2
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: loginUsingPOST_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: registUsingPOST_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: deleteLoginLogUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_15
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: loginLogListUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: addMenusUsingPOST_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: deleteMenusUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_16
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getMenuTreeUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getUserMenuUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: updateMenuUsingPOST_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_3
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_4
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_5
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: thisOrderUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAvailableUsingGET_2
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_17
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAddUsingPOST_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkDeleteUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkListUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkUpdateUsingPOST_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: addRoleUsingPOST_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: deleteRoleUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_18
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getAllRolesUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: roleListUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: updateRoleUsingPOST_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: forceLogoutUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: listUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: addUserUsingPOST_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: checkUserNameUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: deleteUserUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_19
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getUserUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: pdateProfileUsingPOST_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: resetPasswordUsingPOST_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: updateAvatarUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: updatePasswordUsingPOST_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: updateThemeUsingPOST_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: updateUserUsingPOST_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: userListUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: error403UsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: error404UsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: error500UsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_3
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: layuotUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: loginUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: pageIndexUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: pageIndexUsingHEAD_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: pageIndexUsingPOST_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: pageIndexUsingPUT_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: pageIndexUsingPATCH_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: pageIndexUsingDELETE_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: pageIndexUsingOPTIONS_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: pageIndexUsingTRACE_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: passwordUpdateUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: profileUpdateUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: redirectIndexUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: systemDeptUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: systemMenuUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: systemRoleUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: systemUserUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: systemUserAddUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: systemUserDetailUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: systemUserUpdateUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: unauthorizedUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: userAvatarUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: userProfileUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAddUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAvailableUsingGET_3
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkDetailUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkUpdateUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkUserDetailUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: jobAddUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: jobUpdateUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_2
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_2
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_3
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: jvmInfoUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_3
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: loginLogUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_3
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: serverInfoUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: swaggerUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: tomcatInfoUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: apexAreaUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: apexBarUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: apexColumnUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: apexLineUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: apexMixUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: apexRadarUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: eircFromUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: eximportUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: eximportResultUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: febsFormGroupUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: febsIconUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: febsOthersUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: febsToolsUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: mapUsingGET_1
2020-04-02 20:31:34 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: linksUsingGET_1
2020-04-02 20:32:00 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:32:00 | 耗时 13 ms | SQL 语句：
SELECT COUNT(1) FROM t_job;
2020-04-02 20:32:00 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:32:00 | 耗时 1 ms | SQL 语句：
SELECT JOB_ID, cron_expression, create_time, method_name, remark, bean_name, params, status FROM t_job ORDER BY create_Time DESC LIMIT 0,10;
2020-04-02 20:32:01 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:32:01 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_job_log;
2020-04-02 20:32:08 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:32:08 | 耗时 16 ms | SQL 语句：
SELECT COUNT(1) FROM t_eximport;
2020-04-02 20:32:08 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:32:08 | 耗时 1 ms | SQL 语句：
SELECT field1, create_time, field3, field2 FROM t_eximport LIMIT 0,10;
2020-04-02 20:32:13 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:32:13 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:32:13 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:32:13 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:32:13 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:32:13 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:32:14 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:32:14 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:32:14 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:32:14 | 耗时 5 ms | SQL 语句：
SELECT COUNT(1) FROM t_eximport;
2020-04-02 20:32:14 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:32:14 | 耗时 1 ms | SQL 语句：
SELECT field1, create_time, field3, field2 FROM t_eximport LIMIT 0,10;
2020-04-02 20:32:19 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:32:19 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_job;
2020-04-02 20:32:19 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:32:19 | 耗时 1 ms | SQL 语句：
SELECT JOB_ID, cron_expression, create_time, method_name, remark, bean_name, params, status FROM t_job ORDER BY create_Time DESC LIMIT 0,10;
2020-04-02 20:32:19 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:32:19 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_job_log;
2020-04-02 20:32:26 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:32:26 | 耗时 9 ms | SQL 语句：
SELECT COUNT(1) FROM t_eximport;
2020-04-02 20:32:26 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:32:26 | 耗时 1 ms | SQL 语句：
SELECT field1, create_time, field3, field2 FROM t_eximport LIMIT 0,10;
2020-04-02 20:32:29 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:32:29 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:32:29 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:32:29 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:32:29 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:32:29 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:32:35 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:32:35 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 20:32:35 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:32:35 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 20:32:36 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:32:36 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:32:36.470+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:32:36 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:32:36 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:32:36 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:32:36 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:32:36 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:32:36 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:32:36 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:32:36 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:32:36 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:32:36 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:32:40 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:32:40 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:32:40 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:32:40 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:32:40 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:32:40 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:32:41 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:32:41 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:32:41 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:32:41 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:32:41.334+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:32:41 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:32:41 | 耗时 2 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:32:41 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:32:41 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:32:41 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:32:41 | 耗时 0 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:32:41 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:32:41 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:32:41 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:32:41 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:33:34 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:33:34 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:33:34 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:33:34 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:33:34 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:33:34 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:33:35 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:33:35 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:33:35 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:33:35 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:33:35.289+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:33:35 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:33:35 | 耗时 16 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:33:35 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:33:35 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:33:35 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:33:35 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:33:35 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:33:35 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:33:35 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:33:35 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:33:36 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:33:36 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:33:36 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:33:36 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:33:36 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:33:36 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:33:36 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:33:36 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:33:36 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:33:36 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:33:36.672+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:33:36 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:33:36 | 耗时 12 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:33:36 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:33:36 | 耗时 2 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:33:36 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:33:36 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:33:36 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:33:36 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:33:36 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:33:36 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:33:39 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:33:39 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 20:33:39 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:33:39 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 20:33:40 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:33:40 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:33:40.298+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:33:40 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:33:40 | 耗时 10 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:33:40 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:33:40 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:33:40 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:33:40 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:33:40 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:33:40 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:33:40 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:33:40 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:33:41 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:33:41 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:33:41 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:33:41 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:33:41 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:33:41 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:33:42 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:33:42 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:33:42 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:33:42 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:33:42.099+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:33:42 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:33:42 | 耗时 13 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:33:42 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:33:42 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:33:42 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:33:42 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:33:42 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:33:42 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:33:42 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:33:42 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:33:46 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:33:46 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 20:33:46 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:33:46 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 20:33:47 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:33:47 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:33:47.182+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:33:47 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:33:47 | 耗时 12 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:33:47 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:33:47 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:33:47 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:33:47 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:33:47 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:33:47 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:33:47 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:33:47 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:33:52 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:33:52 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:33:52 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:33:52 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:33:52 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:33:52 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:33:52 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:33:52 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:33:52 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:33:52 | 耗时 3 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:33:52.802+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:33:52 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:33:52 | 耗时 12 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:33:52 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:33:52 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:33:52 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:33:52 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:33:52 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:33:52 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:33:52 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:33:52 | 耗时 2 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:33:54 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:33:54 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 20:33:54 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:33:54 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 20:33:54 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:33:54 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:33:54.595+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:33:54 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:33:54 | 耗时 11 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:33:54 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:33:54 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:33:54 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:33:54 | 耗时 0 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:33:54 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:33:54 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:33:54 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:33:54 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:34:02 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:34:02 | 耗时 1 ms | SQL 语句：
SELECT MENU_ID, ICON, ORDER_NUM, MENU_NAME, TYPE, URL, PARENT_ID, MODIFY_TIME, CREATE_TIME, PERMS FROM t_menu ORDER BY ORDER_NUM ASC;
2020-04-02 20:35:16 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:35:16 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:35:16 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:35:16 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-02T20:35:16.762+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-02 20:35:16 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:35:16 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:35:16 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:35:16 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:35:16 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:35:16 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:35:17 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:35:17 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:35:17 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:35:17 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:35:17.350+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:35:17 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:35:17 | 耗时 14 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:35:17 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:35:17 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:35:17 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:35:17 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:35:17 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:35:17 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:35:17 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:35:17 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:35:18 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:35:18 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:35:18.586+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:35:18 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:35:18 | 耗时 13 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:35:18 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:35:18 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:35:18 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:35:18 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:35:18 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:35:18 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:35:18 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:35:18 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:35:20 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:35:20 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:35:20 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:35:20 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:35:20 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:35:20 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 20:35:20 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:35:20 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 20:35:21 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:35:21 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:35:21.581+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:35:21 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:35:21 | 耗时 12 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:35:21 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:35:21 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:35:21 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:35:21 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:35:21 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:35:21 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:35:21 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:35:21 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:35:23 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:35:23 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 20:35:23 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:35:23 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 20:35:25 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:35:25 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:35:25.973+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:35:26 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:35:26 | 耗时 13 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:35:26 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:35:26 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:35:26 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:35:26 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:35:26 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:35:26 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:35:26 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:35:26 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:36:48 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:36:48 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:36:48 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:36:48 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:36:48 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:36:48 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:36:49 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:36:49 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:36:49 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:36:49 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:36:49.370+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:36:49 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:36:49 | 耗时 8 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:36:49 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:36:49 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:36:49 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:36:49 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:36:49 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:36:49 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:36:49 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:36:49 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:36:52 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:36:52 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 20:36:52 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:36:52 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 20:36:53 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:36:53 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:36:53.180+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:36:53 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:36:53 | 耗时 11 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:36:53 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:36:53 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:36:53 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:36:53 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:36:53 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:36:53 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:36:53 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:36:53 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:36:54 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:36:54 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 20:36:54 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:36:54 | 耗时 16 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 20:36:55 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:36:55 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:36:55.468+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:36:55 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:36:55 | 耗时 15 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:36:55 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:36:55 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:36:55 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:36:55 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:36:55 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:36:55 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:36:55 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:36:55 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:36:58 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:36:58 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 20:36:58 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:36:58 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 20:36:59 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:36:59 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:36:59.534+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:36:59 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:36:59 | 耗时 14 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:36:59 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:36:59 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:36:59 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:36:59 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:36:59 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:36:59 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:36:59 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:36:59 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:37:06 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585830280677 paused.
2020-04-02 20:37:06 INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-02 20:37:06 INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-04-02 20:37:06 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585830280677 shutting down.
2020-04-02 20:37:06 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585830280677 paused.
2020-04-02 20:37:06 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585830280677 shutdown complete.
2020-04-02 20:37:06 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-04-02 20:37:06 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-04-02 20:37:06 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-04-02 20:37:06 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-04-02 20:37:07 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-04-02 20:37:07 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-04-02 20:38:52 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 112368 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-02 20:38:52 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-02 20:38:52 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-02 20:38:52 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-02 20:38:54 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-02 20:38:54 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-02 20:38:55 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 157ms. Found 0 Redis repository interfaces.
2020-04-02 20:38:55 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:38:55 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$d8de6109] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:38:55 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:38:55 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:38:56 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$3101f0b9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:38:56 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$531ba6c1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:38:56 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:38:56 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$7a4aa5b5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:38:56 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:38:56 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$ad185cd2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:38:56 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:38:56 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:38:56 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-02 20:38:56 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-02 20:38:56 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-02 20:38:56 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-02 20:38:56 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-02 20:38:56 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-02 20:38:56 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-02 20:38:56 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-02 20:38:56 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:38:56 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:38:56 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:38:57 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:38:57 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:38:57 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:38:57 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:38:57 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:38:57 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:38:57 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:38:57 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:38:57 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:38:57 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:38:57 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:38:57 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:38:57 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:38:57 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:38:57 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:38:57 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:38:57 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:38:57 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:38:57 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:38:57 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:38:57 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:38:57 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:38:58 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-02 20:38:58 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-02 20:38:58 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-02 20:38:58 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-02 20:38:58 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-02 20:38:58 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 5960 ms
2020-04-02 20:39:01 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-02 20:39:01 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-02 20:39:01 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-02 20:39:01 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-02 20:39:01 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-02 20:39:01 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-02 20:39:01 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-02 20:39:01 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585831141788'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-02 20:39:01 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-02 20:39:01 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-02 20:39:01 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@17236e87
2020-04-02 20:39:02 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-02 20:39:02 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-02 20:39:02 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-02 20:39:03 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-02 20:39:03 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-02 20:39:03 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-02 20:39:03 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-02 20:39:03 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-02 20:39:03 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-02 20:39:03 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-02 20:39:03 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-02 20:39:03 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-02 20:39:03 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-02 20:39:03 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-02 20:39:03 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-02 20:39:03 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-02 20:39:03 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-02 20:39:03 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-02 20:39:03 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-02 20:39:03 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAvailableUsingGET_1
2020-04-02 20:39:03 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-02 20:39:03 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-02 20:39:03 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-02 20:39:03 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-02 20:39:03 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-02 20:39:03 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-02 20:39:03 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 12.488 seconds (JVM running for 17.081)
2020-04-02 20:39:04 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-02 20:39:04 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-02 20:39:04 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-02 20:39:04 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-02 20:39:04 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585830280677"'s failed in-progress jobs.
2020-04-02 20:39:04 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585831141788 started.
2020-04-02 20:39:04 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-02 20:39:04 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-02 20:39:04 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-02 20:39:04 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-02 20:39:04 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-02 20:39:05 INFO  RMI TCP Connection(1)-192.168.80.1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-02 20:39:05 INFO  RMI TCP Connection(1)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-02 20:39:05 INFO  RMI TCP Connection(1)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 27 ms
2020-04-02 20:39:05 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-02 20:39:11 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:39:11 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:39:12 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:39:12 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-02T20:39:12.024+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-02 20:39:12 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:39:12 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:39:12 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:39:12 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:39:12 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:39:12 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:39:12 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:39:12 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:39:13 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:39:13 | 耗时 3 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:39:12.916+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:39:13 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:39:13 | 耗时 3 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:39:13 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:39:13 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:39:13 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:39:13 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:39:13 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:39:13 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:39:13 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:39:13 | 耗时 2 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:39:14 INFO  http-nio-8080-exec-2 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-02 20:39:14 INFO  http-nio-8080-exec-2 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 68ms. Found 0 Redis repository interfaces.
2020-04-02 20:39:14 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:39:14 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:39:14.316+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:39:14 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:39:14 | 耗时 8 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:39:14 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:39:14 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:39:14 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:39:14 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:39:14 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:39:14 | 耗时 2 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:39:14 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:39:14 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:39:15 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:39:15 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 20:39:15 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:39:15 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 20:39:16 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:39:16 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:39:16.739+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:39:16 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:39:16 | 耗时 3 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:39:16 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:39:16 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:39:16 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:39:16 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:39:16 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:39:16 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:39:16 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:39:16 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:39:19 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:39:19 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:39:19.146+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:39:19 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:39:19 | 耗时 5 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:39:19 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:39:19 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:39:19 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:39:19 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:39:19 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:39:19 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:39:19 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:39:19 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:39:21 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:39:21 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:39:21.019+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:39:21 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:39:21 | 耗时 6 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:39:21 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:39:21 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:39:21 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:39:21 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:39:21 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:39:21 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:39:21 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:39:21 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:39:25 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:39:25 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 20:39:25 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:39:25 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 20:39:43 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:39:43 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:39:43 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:39:43 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:39:43 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:39:43 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:39:44 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:39:44 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:39:44 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:39:44 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 20:39:44 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:39:44 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 20:39:45 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:39:45 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:39:45.800+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:39:45 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:39:45 | 耗时 3 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:39:45 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:39:45 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:39:45 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:39:45 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:39:45 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:39:45 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:39:45 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:39:45 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:39:59 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:39:59 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:39:59 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:39:59 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:39:59 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:39:59 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:39:59 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:39:59 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:39:59 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:39:59 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:39:59.618+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:39:59 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:39:59 | 耗时 13 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:39:59 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:39:59 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:39:59 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:39:59 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:39:59 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:39:59 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:39:59 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:39:59 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:40:03 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:40:03 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 20:40:03 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:40:03 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 20:40:03 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:40:03 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:40:03.855+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:40:03 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:40:03 | 耗时 3 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:40:03 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:40:03 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:40:03 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:40:03 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:40:03 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:40:03 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:40:03 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:40:03 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:40:12 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:40:12 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:40:13 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:40:13 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:40:13 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:40:13 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:40:13 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:40:13 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:40:13 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:40:13 | 耗时 4 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:40:13.680+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:40:13 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:40:13 | 耗时 4 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:40:13 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:40:13 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:40:13 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:40:13 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:40:13 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:40:13 | 耗时 2 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:40:13 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:40:13 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:41:00 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:41:00 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:41:00 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:41:00 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:41:00 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:41:00 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:41:00 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:41:00 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:41:00 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:41:00 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:41:00.933+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:41:00 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:41:00 | 耗时 5 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:41:00 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:41:00 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:41:00 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:41:00 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:41:00 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:41:00 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:41:00 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:41:00 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:41:02 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:41:02 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:41:02 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:41:02 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:41:02 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:41:02 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:41:02 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:41:02 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:41:02 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:41:02 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:41:02.881+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:41:02 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:41:02 | 耗时 9 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:41:02 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:41:02 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:41:02 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:41:02 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:41:02 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:41:02 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:41:02 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:41:02 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:42:06 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:42:06 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:42:06 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:42:06 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:42:06 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:42:06 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:42:11 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:42:11 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:42:11 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:42:11 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:42:11 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:42:11 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:42:11 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:42:11 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:42:11 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:42:11 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:42:11.722+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:42:11 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:42:11 | 耗时 9 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:42:11 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:42:11 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:42:11 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:42:11 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:42:11 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:42:11 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:42:11 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:42:11 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:42:14 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:42:14 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 20:42:14 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:42:14 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 20:42:15 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:42:15 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:42:15.219+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:42:15 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:42:15 | 耗时 7 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:42:15 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:42:15 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:42:15 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:42:15 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:42:15 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:42:15 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:42:15 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:42:15 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:42:16 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:42:16 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 20:42:16 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:42:16 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 20:42:17 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:42:17 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:42:17.460+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:42:17 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:42:17 | 耗时 5 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:42:17 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:42:17 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:42:17 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:42:17 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:42:17 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:42:17 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:42:17 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:42:17 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:42:55 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:42:55 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:42:55 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:42:55 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:42:55 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:42:55 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:42:55 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:42:55 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:42:56 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:42:56 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:42:56.024+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:42:56 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:42:56 | 耗时 7 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:42:56 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:42:56 | 耗时 0 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:42:56 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:42:56 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:42:56 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:42:56 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:42:56 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:42:56 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:42:56 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:42:56 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:42:56 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:42:56 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:42:56 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:42:56 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:42:57 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:42:57 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:42:57 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:42:57 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:42:57.282+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:42:57 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:42:57 | 耗时 6 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:42:57 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:42:57 | 耗时 0 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:42:57 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:42:57 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:42:57 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:42:57 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:42:57 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:42:57 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:43:00 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:43:00 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 20:43:00 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:43:00 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 20:43:01 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:43:01 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:43:01.450+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:43:01 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:43:01 | 耗时 8 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:43:01 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:43:01 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:43:01 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:43:01 | 耗时 0 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:43:01 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:43:01 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:43:01 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:43:01 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:44:09 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585831141788 paused.
2020-04-02 20:44:09 INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-02 20:44:09 INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-04-02 20:44:09 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585831141788 shutting down.
2020-04-02 20:44:09 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585831141788 paused.
2020-04-02 20:44:09 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585831141788 shutdown complete.
2020-04-02 20:44:09 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-04-02 20:44:09 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-04-02 20:44:09 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-04-02 20:44:09 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-04-02 20:44:09 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-04-02 20:44:09 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-04-02 20:44:33 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 106552 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-02 20:44:33 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-02 20:44:33 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-02 20:44:33 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-02 20:44:35 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-02 20:44:35 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-02 20:44:35 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 168ms. Found 0 Redis repository interfaces.
2020-04-02 20:44:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:44:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$6cfd8a97] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:44:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:44:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:44:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$c5211a47] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:44:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$e73ad04f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:44:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:44:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$e69cf43] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:44:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:44:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$41378660] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:44:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:44:37 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:44:37 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-02 20:44:37 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-02 20:44:37 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-02 20:44:37 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-02 20:44:38 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-02 20:44:38 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-02 20:44:38 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-02 20:44:38 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-02 20:44:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:44:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:44:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:44:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:44:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:44:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:44:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:44:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:44:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:44:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:44:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:44:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:44:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:44:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:44:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:44:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:44:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:44:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:44:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:44:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:44:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:44:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:44:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:44:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:44:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:44:39 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-02 20:44:39 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-02 20:44:39 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-02 20:44:39 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-02 20:44:40 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-02 20:44:40 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 6521 ms
2020-04-02 20:44:42 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-02 20:44:42 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-02 20:44:43 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-02 20:44:43 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-02 20:44:43 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-02 20:44:43 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-02 20:44:43 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-02 20:44:43 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585831483079'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-02 20:44:43 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-02 20:44:43 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-02 20:44:43 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@5aaab2b0
2020-04-02 20:44:43 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-02 20:44:43 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-02 20:44:43 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-02 20:44:44 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-02 20:44:44 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-02 20:44:44 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-02 20:44:45 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-02 20:44:45 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-02 20:44:45 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-02 20:44:45 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-02 20:44:45 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-02 20:44:45 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-02 20:44:45 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-02 20:44:45 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-02 20:44:45 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-02 20:44:45 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-02 20:44:45 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-02 20:44:45 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-02 20:44:45 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-02 20:44:45 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-02 20:44:45 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-02 20:44:45 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAvailableUsingGET_1
2020-04-02 20:44:45 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-02 20:44:45 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-02 20:44:45 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-02 20:44:45 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-02 20:44:45 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 13.014 seconds (JVM running for 18.067)
2020-04-02 20:44:45 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-02 20:44:45 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-02 20:44:46 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-02 20:44:46 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-02 20:44:46 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585831141788"'s failed in-progress jobs.
2020-04-02 20:44:46 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585831483079 started.
2020-04-02 20:44:46 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-02 20:44:46 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-02 20:44:46 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-02 20:44:46 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-02 20:44:46 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-02 20:44:47 INFO  RMI TCP Connection(4)-192.168.80.1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-02 20:44:47 INFO  RMI TCP Connection(4)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-02 20:44:47 INFO  RMI TCP Connection(4)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 22 ms
2020-04-02 20:44:47 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-02 20:44:54 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:44:54 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:44:54 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:44:54 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-02T20:44:54.106+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-02 20:44:54 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:44:54 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:44:54 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:44:54 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:44:54 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:44:54 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:44:54 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:44:54 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:44:55 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:44:55 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:44:55.024+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:44:55 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:44:55 | 耗时 3 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:44:55 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:44:55 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:44:55 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:44:55 | 耗时 2 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:44:55 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:44:55 | 耗时 2 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:44:55 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:44:55 | 耗时 3 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:44:56 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:44:56 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:44:56.256+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:44:56 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:44:56 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:44:56 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:44:56 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:44:56 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:44:56 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:44:56 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:44:56 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:44:56 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 20:44:56 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:44:57 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:44:57 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 20:44:57 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:44:57 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 20:45:16 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:45:16 | 耗时 4 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:45:16.444+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:45:16 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:45:16 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:45:16 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:45:16 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:45:16 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:45:16 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:45:16 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:45:16 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:45:16 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:45:16 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:45:40 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:45:40 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:45:40 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:45:40 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:45:40 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:45:40 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:45:41 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:45:41 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:45:41 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:45:41 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:45:41.070+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:45:41 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:45:41 | 耗时 4 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:45:41 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:45:41 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:45:41 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:45:41 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:45:41 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:45:41 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:45:41 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:45:41 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:45:41 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:45:41 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:45:41 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:45:41 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:45:41 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:45:41 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:45:42 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:45:42 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:45:42 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:45:42 | 耗时 3 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:45:42.405+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:45:42 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:45:42 | 耗时 3 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:45:42 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:45:42 | 耗时 2 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:45:42 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:45:42 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:45:42 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:45:42 | 耗时 4 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:45:42 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:45:42 | 耗时 3 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:45:44 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:45:44 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 20:45:44 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:45:44 | 耗时 2 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 20:45:45 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:45:45 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:45:45.011+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:45:45 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:45:45 | 耗时 2 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:45:45 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:45:45 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:45:45 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:45:45 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:45:45 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:45:45 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:45:45 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:45:45 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:45:45 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:45:45 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 20:45:45 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:45:45 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 20:45:46 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:45:46 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:45:46.066+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:45:46 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:45:46 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:45:46 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:45:46 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:45:46 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:45:46 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:45:46 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:45:46 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:45:46 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:45:46 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:47:51 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:47:51 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:47:51 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:47:51 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:47:51 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:47:51 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:47:51 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:47:51 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:47:51 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:47:51 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:47:51.809+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:47:51 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:47:51 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:47:51 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:47:51 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:47:51 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:47:51 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:47:51 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:47:51 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:47:51 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:47:51 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:47:55 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:47:55 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 20:47:55 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:47:55 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 20:47:55 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:47:55 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:47:55.711+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:47:55 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:47:55 | 耗时 5 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:47:55 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:47:55 | 耗时 0 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:47:55 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:47:55 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:47:55 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:47:55 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:47:55 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:47:55 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:49:32 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:49:32 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:49:32 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:49:32 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:49:32 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:49:32 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:49:32 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:49:32 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:49:32 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:49:32 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:49:32.941+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:49:32 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:49:32 | 耗时 2 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:49:32 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:49:32 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:49:32 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:49:32 | 耗时 0 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:49:32 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:49:32 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:49:32 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:49:32 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:50:33 INFO  http-nio-8080-exec-2 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-02 20:50:33 INFO  http-nio-8080-exec-2 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 95ms. Found 0 Redis repository interfaces.
2020-04-02 20:50:35 INFO  http-nio-8080-exec-2 org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-02 20:50:35 INFO  http-nio-8080-exec-2 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-02 20:50:35 INFO  http-nio-8080-exec-2 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 282ms. Found 0 Redis repository interfaces.
2020-04-02 20:50:36 INFO  http-nio-8080-exec-2 springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-02 20:50:36 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:50:36 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:50:36 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:50:36 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:50:36 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 20:50:36 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:50:37 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:50:37 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:50:37 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:50:37 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 20:50:37 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 20:50:37 | 耗时 38 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY create_time DESC LIMIT 0,10;
2020-04-02 20:51:19 INFO  http-nio-8080-exec-7 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-02 20:51:19 INFO  http-nio-8080-exec-7 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 112ms. Found 0 Redis repository interfaces.
2020-04-02 20:51:20 INFO  http-nio-8080-exec-7 springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-02 20:51:20 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:51:20 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:51:20 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:51:20 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:51:20 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:51:20 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:51:21 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:51:21 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:54:15 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585831483079 paused.
2020-04-02 20:54:15 INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-02 20:54:15 INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-04-02 20:54:15 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585831483079 shutting down.
2020-04-02 20:54:15 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585831483079 paused.
2020-04-02 20:54:15 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585831483079 shutdown complete.
2020-04-02 20:54:16 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-04-02 20:54:16 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-04-02 20:54:16 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-04-02 20:54:16 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-04-02 20:54:16 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-04-02 20:54:16 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-04-02 20:54:45 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 112876 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-02 20:54:45 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-02 20:54:45 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-02 20:54:45 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-02 20:54:47 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-02 20:54:47 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-02 20:54:47 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 162ms. Found 0 Redis repository interfaces.
2020-04-02 20:54:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:54:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$def907de] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:54:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:54:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:54:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$371c978e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:54:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$59364d96] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:54:49 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:54:49 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$80654c8a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:54:49 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:54:49 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$b33303a7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:54:49 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:54:49 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:54:49 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-02 20:54:49 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-02 20:54:49 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-02 20:54:49 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-02 20:54:49 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-02 20:54:49 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-02 20:54:49 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-02 20:54:49 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-02 20:54:49 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:54:49 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:54:49 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:54:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:54:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:54:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:54:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:54:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:54:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:54:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:54:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:54:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:54:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:54:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:54:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:54:50 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:54:51 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:54:51 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:54:51 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:54:51 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:54:51 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:54:51 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:54:51 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:54:51 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:54:51 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-02 20:54:51 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-02 20:54:51 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-02 20:54:51 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-02 20:54:51 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-02 20:54:52 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-02 20:54:52 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 6882 ms
2020-04-02 20:54:54 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-02 20:54:54 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-02 20:54:54 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-02 20:54:54 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-02 20:54:54 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-02 20:54:55 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-02 20:54:55 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-02 20:54:55 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585832094938'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-02 20:54:55 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-02 20:54:55 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-02 20:54:55 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@6183dd2
2020-04-02 20:54:55 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-02 20:54:55 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-02 20:54:55 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-02 20:54:56 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-02 20:54:56 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-02 20:54:56 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-02 20:54:56 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-02 20:54:56 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-02 20:54:56 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-02 20:54:56 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-02 20:54:56 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-02 20:54:56 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-02 20:54:56 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-02 20:54:56 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-02 20:54:56 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-02 20:54:56 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-02 20:54:56 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-02 20:54:56 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-02 20:54:56 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-02 20:54:56 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAvailableUsingGET_1
2020-04-02 20:54:56 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-02 20:54:56 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-02 20:54:56 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-02 20:54:56 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-02 20:54:56 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-02 20:54:57 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-02 20:54:57 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 13.33 seconds (JVM running for 18.043)
2020-04-02 20:54:57 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-02 20:54:57 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-02 20:54:57 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-02 20:54:58 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-02 20:54:58 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-02 20:54:58 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-02 20:54:58 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-02 20:54:58 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-02 20:54:58 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-02 20:54:58 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585831483079"'s failed in-progress jobs.
2020-04-02 20:54:58 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585832094938 started.
2020-04-02 20:54:58 INFO  RMI TCP Connection(1)-192.168.80.1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-02 20:54:58 INFO  RMI TCP Connection(1)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-02 20:54:58 INFO  RMI TCP Connection(1)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 31 ms
2020-04-02 20:54:58 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-02 20:55:04 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:55:04 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:55:04 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:55:04 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-02T20:55:04.903+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-02 20:55:05 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:55:05 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:55:05 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:55:05 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:55:05 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:55:05 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:55:05 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:55:05 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:55:06 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:55:06 | 耗时 3 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T20:55:05.877+0800' WHERE (USERNAME = 'ccc');
2020-04-02 20:55:06 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:55:06 | 耗时 3 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 20:55:06 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:55:06 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:55:06 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:55:06 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 20:55:06 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:55:06 | 耗时 2 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 20:55:06 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 20:55:06 | 耗时 2 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-02 20:57:41 INFO  File Watcher org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-02 20:57:41 INFO  File Watcher org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 76ms. Found 0 Redis repository interfaces.
2020-04-02 20:57:42 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:57:42 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:57:42 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:57:42 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:57:42 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:57:42 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:57:42 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:57:42 | 耗时 6 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:58:16 INFO  http-nio-8080-exec-8 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-02 20:58:16 INFO  http-nio-8080-exec-8 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 111ms. Found 0 Redis repository interfaces.
2020-04-02 20:58:17 INFO  http-nio-8080-exec-8 org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-02 20:58:17 INFO  http-nio-8080-exec-8 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-02 20:58:17 INFO  http-nio-8080-exec-8 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 203ms. Found 0 Redis repository interfaces.
2020-04-02 20:58:18 INFO  http-nio-8080-exec-8 springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-02 20:58:18 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:58:18 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:58:18 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:58:18 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:58:18 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 20:58:18 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:58:18 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 20:58:18 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:58:19 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:58:19 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 20:58:19 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 20:58:19 | 耗时 57 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY create___time DESC LIMIT 0,10;
2020-04-02 20:59:41 INFO  http-nio-8080-exec-7 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-02 20:59:41 INFO  http-nio-8080-exec-7 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 77ms. Found 0 Redis repository interfaces.
2020-04-02 20:59:41 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:59:41 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 20:59:42 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:59:42 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 20:59:42 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 20:59:42 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 20:59:42 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 20:59:42 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 20:59:42 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:59:42 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 20:59:42 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 20:59:42 | 耗时 2 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY create_time DESC LIMIT 0,10;
2020-04-02 21:00:58 INFO  http-nio-8080-exec-7 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-02 21:00:58 INFO  http-nio-8080-exec-7 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 68ms. Found 0 Redis repository interfaces.
2020-04-02 21:00:59 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 21:00:59 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 21:00:59 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 21:00:59 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 21:00:59 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 21:00:59 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 21:00:59 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 21:00:59 | 耗时 5 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 21:01:00 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 21:01:00 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:01:00 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 21:01:00 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:01:21 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 21:01:21 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 21:01:21 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 21:01:21 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:01:22 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 21:01:22 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:01:22 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 21:01:22 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:01:49 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:01:49 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 21:01:49 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:01:49 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-02T21:01:49.886+0800', 'Chrome 80', '127.0.0.1', '内网IP|0|0|内网IP|内网IP', 'cccc');
2020-04-02 21:01:49 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 21:01:49 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-02 21:01:49 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 21:01:49 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 21:01:49 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 21:01:49 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 21:01:50 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 21:01:50 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-02 21:01:50 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 21:01:50 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-02T21:01:50.800+0800' WHERE (USERNAME = 'cccc');
2020-04-02 21:01:50 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 21:01:50 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-02 21:01:50 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 21:01:50 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 21:01:50 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 21:01:50 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-02 21:01:50 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 21:01:50 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-02 21:01:50 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 21:01:50 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'cccc' GROUP BY days;
2020-04-02 21:01:52 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 21:01:52 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-02 21:01:52 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 21:01:52 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 21:01:52 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 21:01:52 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 21:01:52 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 21:01:52 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:01:55 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:01:55 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'cccccc';
2020-04-02 21:02:26 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 21:02:26 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1');
2020-04-02 21:02:26 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 21:02:26 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:02:35 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 21:02:35 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:02:35 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 21:02:35 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:02:55 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 21:02:55 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 21:02:58 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 21:02:58 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 21:04:46 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:04:46 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 21:04:46 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:04:46 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 21:04:46 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:04:46 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 21:04:46 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 21:04:46 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 21:04:46 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 21:04:46 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:04:46 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 21:04:46 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:04:47 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 21:04:47 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 21:04:47 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 21:04:47 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 21:04:47 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 21:04:47 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 21:04:48 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 21:04:48 | 耗时 5 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 21:04:48 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 21:04:48 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:04:48 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 21:04:48 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:06:01 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 21:06:01 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 21:06:01 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 21:06:01 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 21:06:02 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 21:06:02 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 21:06:02 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 21:06:02 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 21:06:02 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:06:02 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 21:06:02 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:06:02 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 21:06:02 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 21:06:02 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:06:02 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 21:06:02 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:07:47 INFO  http-nio-8080-exec-6 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-02 21:07:47 INFO  http-nio-8080-exec-6 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 83ms. Found 0 Redis repository interfaces.
2020-04-02 21:07:48 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 21:07:48 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 21:07:48 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 21:07:48 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 21:07:48 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 21:07:48 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 21:07:48 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 21:07:48 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 21:07:48 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 21:07:48 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:07:48 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 21:07:48 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:08:03 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 21:08:03 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-02 21:08:03 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 21:08:03 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:08:16 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:08:16 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 21:08:16 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:08:16 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 21:08:16 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:08:16 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 21:08:16 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 21:08:16 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 21:08:16 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 21:08:16 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-02 21:08:16 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 21:08:16 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:08:23 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 21:08:23 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:08:23 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 21:08:23 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:08:30 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:08:30 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 21:08:57 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 21:08:57 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 21:09:27 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 21:09:27 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 21:09:53 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:09:53 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 21:09:53 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:09:53 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 21:09:53 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:09:53 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 21:09:53 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 21:09:53 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 21:09:53 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 21:09:53 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:09:53 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 21:09:53 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:09:54 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 21:09:54 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 21:09:54 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 21:09:54 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 21:09:54 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 21:09:54 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 21:09:54 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 21:09:54 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 21:09:55 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 21:09:55 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:09:55 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 21:09:55 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:10:03 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 21:10:03 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:10:03 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 21:10:03 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:10:06 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:10:06 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:10:06 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:10:06 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:10:06 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 21:10:06 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:10:06 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 21:10:06 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:10:10 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 21:10:10 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '0' AND REVIEW = '1');
2020-04-02 21:10:10 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 21:10:10 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '0' AND REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:10:13 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 21:10:13 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND REVIEW = '1');
2020-04-02 21:10:13 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 21:10:13 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:10:19 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 21:10:19 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:10:19 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 21:10:19 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:10:23 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 21:10:23 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND REVIEW = '1');
2020-04-02 21:10:23 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 21:10:23 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:10:29 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 21:10:29 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-02 21:10:29 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 21:10:29 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:10:41 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 21:10:41 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (USERNAME LIKE '%cccccc%' AND STATUS = '1' AND AVAILABLE = '1');
2020-04-02 21:10:41 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 21:10:41 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (USERNAME LIKE '%cccccc%' AND STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:10:48 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:10:48 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:10:48 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:10:48 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:10:55 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 21:10:55 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 21:10:59 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 21:10:59 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 21:12:56 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 21:12:56 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:12:56 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 21:12:56 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:12:57 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 21:12:57 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:12:57 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 21:12:57 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:13:01 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 21:13:01 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-02 21:13:01 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 21:13:01 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ) TOTAL;
2020-04-02 21:13:01 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 21:13:01 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ORDER BY userId LIMIT 0,10;
2020-04-02 21:13:02 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 21:13:02 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ) TOTAL;
2020-04-02 21:13:02 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 21:13:02 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ORDER BY userId LIMIT 0,10;
2020-04-02 21:13:03 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 21:13:03 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ) TOTAL;
2020-04-02 21:13:03 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 21:13:03 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ORDER BY userId LIMIT 0,10;
2020-04-02 21:13:05 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 21:13:05 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-02 21:13:05 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 21:13:05 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:13:55 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:13:55 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 21:13:55 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:13:55 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 21:13:55 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:13:55 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 21:13:55 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 21:13:55 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 21:13:56 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 21:13:56 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-02 21:13:56 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 21:13:56 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:14:06 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 21:14:06 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 21:14:06 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 21:14:06 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 21:14:06 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 21:14:06 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 21:14:06 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:14:06 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 21:14:06 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 21:14:06 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-02 21:14:06 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 21:14:06 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:14:07 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 21:14:07 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-02 21:14:07 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 21:14:07 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:14:07 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 21:14:07 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-02 21:14:07 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 21:14:07 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:14:08 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 21:14:08 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-02 21:14:08 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 21:14:08 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:14:08 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:14:08 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-02 21:14:08 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:14:08 | 耗时 0 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:14:10 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 21:14:10 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:14:10 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 21:14:10 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:14:38 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 21:14:38 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 21:14:38 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 21:14:38 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 21:14:38 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 21:14:38 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 21:14:39 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:14:39 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 21:14:39 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 21:14:39 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:14:39 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 21:14:39 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:17:45 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 21:17:45 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 21:17:45 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 21:17:45 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 21:17:45 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 21:17:45 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 21:17:45 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 21:17:45 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 21:17:45 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:17:45 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:17:45 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:17:45 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:18:18 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 21:18:18 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 21:18:18 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 21:18:18 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 21:18:18 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 21:18:18 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 21:18:18 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 21:18:18 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 21:18:18 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 21:18:18 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:18:18 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 21:18:18 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:18:50 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 21:18:50 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 21:18:50 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 21:18:50 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 21:18:50 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 21:18:50 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 21:18:50 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 21:18:50 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 21:18:50 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 21:18:50 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:18:50 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 21:18:50 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:18:51 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 21:18:51 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 21:18:51 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 21:18:51 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 21:18:51 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 21:18:51 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 21:18:52 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:18:52 | 耗时 5 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 21:18:52 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 21:18:52 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:18:52 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 21:18:52 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:18:52 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 21:18:52 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 21:18:52 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 21:18:52 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 21:18:52 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 21:18:52 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 21:18:53 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 21:18:53 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 21:18:53 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:18:53 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:18:53 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:18:53 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:18:54 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 21:18:54 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 21:18:54 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 21:18:54 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 21:18:54 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 21:18:54 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 21:18:54 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 21:18:54 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 21:18:54 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 21:18:54 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:18:54 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 21:18:54 | 耗时 2 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:19:28 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 21:19:28 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 21:19:28 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 21:19:28 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 21:19:28 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 21:19:28 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 21:19:28 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 21:19:28 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 21:19:28 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 21:19:28 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:19:28 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 21:19:28 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:19:29 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 21:19:29 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 21:19:29 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 21:19:29 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 21:19:29 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 21:19:29 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 21:19:29 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:19:29 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 21:19:29 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 21:19:29 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:19:29 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 21:19:29 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:19:58 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 21:19:58 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 21:19:58 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 21:19:58 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 21:19:58 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 21:19:58 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 21:19:59 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 21:19:59 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 21:19:59 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 21:19:59 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:19:59 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 21:19:59 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:19:59 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 21:19:59 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 21:19:59 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 21:19:59 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 21:19:59 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 21:19:59 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 21:20:00 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 21:20:00 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 21:20:00 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 21:20:00 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:20:00 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 21:20:00 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:20:01 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 21:20:01 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 21:20:01 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 21:20:01 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 21:20:01 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 21:20:01 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 21:20:01 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 21:20:01 | 耗时 6 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 21:20:02 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 21:20:02 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:20:02 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 21:20:02 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:20:09 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 21:20:09 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 21:20:09 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 21:20:09 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 21:20:09 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 21:20:09 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 21:20:09 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 21:20:09 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 21:20:09 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 21:20:09 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:20:09 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 21:20:09 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:21:00 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:21:00 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 21:21:00 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:21:00 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 21:21:00 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:21:00 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 21:21:00 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 21:21:00 | 耗时 7 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 21:21:00 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 21:21:00 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:21:00 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 21:21:00 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:21:03 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 21:21:03 | 耗时 0 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 21:21:03 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 21:21:03 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 21:21:03 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 21:21:03 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 21:21:03 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 21:21:03 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 21:21:03 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 21:21:03 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:21:03 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 21:21:03 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:21:10 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 21:21:10 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 21:21:10 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 21:21:10 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 21:21:10 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 21:21:10 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 21:21:11 INFO  http-nio-8080-exec-4 p6spy 2020-04-02 21:21:11 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 21:21:11 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 21:21:11 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:21:11 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 21:21:11 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:21:11 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 21:21:11 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 21:21:11 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 21:21:11 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 21:21:11 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 21:21:11 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 21:21:12 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 21:21:12 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 21:21:12 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 21:21:12 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:21:12 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 21:21:12 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:21:13 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:21:13 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 21:21:13 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:21:13 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 21:21:13 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:21:13 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 21:21:13 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 21:21:13 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 21:21:13 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 21:21:13 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:21:13 INFO  http-nio-8080-exec-2 p6spy 2020-04-02 21:21:13 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:21:27 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 21:21:27 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 21:21:31 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 21:21:31 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '陈ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 21:21:31 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 21:21:31 | 耗时 1 ms | SQL 语句：
UPDATE t_park SET MOBILE = '15623041759', DESCRIPTION = '86上山了 86上山了', MODIFYTIME = '2020-04-02T21:21:31.934+0800', PRICE = 4.0, PLACE = '秋名山', SPAN = 'AE86', STATUS = '1', USERNAME = '陈ccc' WHERE ID = 17;
2020-04-02 21:21:34 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:21:34 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 21:21:34 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:21:34 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 21:21:34 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:21:34 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 21:21:34 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 21:21:34 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 21:21:34 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 21:21:34 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:21:34 INFO  http-nio-8080-exec-8 p6spy 2020-04-02 21:21:34 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:21:38 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 21:21:38 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-02 21:21:40 INFO  http-nio-8080-exec-5 p6spy 2020-04-02 21:21:40 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '陈ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 21:21:40 INFO  http-nio-8080-exec-6 p6spy 2020-04-02 21:21:40 | 耗时 1 ms | SQL 语句：
UPDATE t_park SET MOBILE = '15623041759', DESCRIPTION = '86上山了 86上山了', MODIFYTIME = '2020-04-02T21:21:40.592+0800', PRICE = 4.0, PLACE = '秋名山', SPAN = 'AE86', STATUS = '0', USERNAME = '陈ccc' WHERE ID = 17;
2020-04-02 21:21:42 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:21:42 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-02 21:21:42 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:21:42 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-02 21:21:42 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:21:42 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-02 21:21:42 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 21:21:42 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-02 21:21:42 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 21:21:42 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:21:42 INFO  http-nio-8080-exec-3 p6spy 2020-04-02 21:21:42 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:22:01 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 21:22:01 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-02 21:22:01 INFO  http-nio-8080-exec-7 p6spy 2020-04-02 21:22:01 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:22:04 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 21:22:04 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:22:04 INFO  http-nio-8080-exec-1 p6spy 2020-04-02 21:22:04 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:22:36 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:22:36 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-02 21:22:36 INFO  http-nio-8080-exec-10 p6spy 2020-04-02 21:22:36 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:22:38 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 21:22:38 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-02 21:22:38 INFO  http-nio-8080-exec-9 p6spy 2020-04-02 21:22:38 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-02 21:22:47 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585832094938 paused.
2020-04-02 21:22:47 INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-02 21:22:47 INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-04-02 21:22:47 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585832094938 shutting down.
2020-04-02 21:22:47 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585832094938 paused.
2020-04-02 21:22:47 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585832094938 shutdown complete.
2020-04-02 21:22:47 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-04-02 21:22:47 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-04-02 21:22:47 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-04-02 21:22:47 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-04-02 21:22:47 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-04-02 21:22:47 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
