2020-04-03 12:38:38 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 118724 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-03 12:38:38 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-03 12:38:38 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-03 12:38:38 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-03 12:38:44 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-03 12:38:44 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 12:38:44 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 238ms. Found 0 Redis repository interfaces.
2020-04-03 12:38:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 12:38:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$9c088ac6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 12:38:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 12:38:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 12:38:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$f42c1a76] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 12:38:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$1645d07e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 12:38:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 12:38:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$3d74cf72] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 12:38:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 12:38:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$7042868f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 12:38:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 12:38:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 12:38:46 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-03 12:38:46 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-03 12:38:46 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-03 12:38:46 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-03 12:38:46 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-03 12:38:46 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-03 12:38:46 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-03 12:38:46 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-03 12:38:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 12:38:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 12:38:47 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 12:38:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 12:38:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 12:38:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 12:38:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 12:38:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 12:38:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 12:38:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 12:38:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 12:38:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 12:38:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 12:38:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 12:38:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 12:38:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 12:38:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 12:38:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 12:38:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 12:38:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 12:38:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 12:38:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 12:38:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 12:38:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 12:38:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 12:38:49 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-03 12:38:49 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-03 12:38:49 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-03 12:38:49 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-03 12:38:49 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-03 12:38:49 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 11045 ms
2020-04-03 12:38:53 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-03 12:38:53 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-03 12:38:54 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-03 12:38:54 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-03 12:38:54 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-03 12:38:54 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-03 12:38:54 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-03 12:38:54 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585888734012'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-03 12:38:54 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-03 12:38:54 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-03 12:38:54 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@4907472e
2020-04-03 12:38:54 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-03 12:38:54 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-03 12:38:54 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-03 12:38:55 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-03 12:38:56 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-03 12:38:56 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-03 12:38:56 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-03 12:38:56 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-03 12:38:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-03 12:38:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-03 12:38:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-03 12:38:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-03 12:38:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-03 12:38:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-03 12:38:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-03 12:38:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-03 12:38:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-03 12:38:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-03 12:38:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-03 12:38:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-03 12:38:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-03 12:38:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-03 12:38:57 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAvailableUsingGET_1
2020-04-03 12:38:57 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-03 12:38:57 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-03 12:38:57 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-03 12:38:57 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 20.732 seconds (JVM running for 27.913)
2020-04-03 12:38:58 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-03 12:38:58 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-03 12:38:58 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-03 12:38:58 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-03 12:38:58 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585832094938"'s failed in-progress jobs.
2020-04-03 12:38:58 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585888734012 started.
2020-04-03 12:38:58 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-03 12:38:58 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-03 12:38:58 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-03 12:38:58 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-03 12:38:58 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-03 12:38:59 INFO  RMI TCP Connection(3)-192.168.80.1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-03 12:38:59 INFO  RMI TCP Connection(3)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-03 12:38:59 INFO  RMI TCP Connection(3)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 18 ms
2020-04-03 12:39:00 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-03 12:39:09 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 12:39:09 | 耗时 42 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 12:39:09 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 12:39:09 | 耗时 11 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T12:39:09.331+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-03 12:39:09 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 12:39:09 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 12:39:09 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 12:39:09 | 耗时 25 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 12:39:09 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 12:39:09 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 12:39:11 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 12:39:11 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 12:39:11 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 12:39:11 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T12:39:11.198+0800' WHERE (USERNAME = 'ccc');
2020-04-03 12:39:11 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 12:39:11 | 耗时 21 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 12:39:11 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 12:39:11 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 12:39:11 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 12:39:11 | 耗时 2 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 12:39:11 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 12:39:11 | 耗时 13 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 12:39:11 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 12:39:11 | 耗时 3 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-03 12:39:14 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 12:39:14 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 12:39:14 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 12:39:14 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 12:39:14 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 12:39:14 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 12:39:14 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 12:39:14 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:40:08 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 12:40:08 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 12:40:08 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 12:40:08 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 12:40:08 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 12:40:08 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 12:40:09 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 12:40:09 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 12:40:09 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 12:40:09 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 12:40:09 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 12:40:09 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:40:10 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 12:40:10 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 12:40:10 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 12:40:10 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 12:40:10 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 12:40:10 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 12:40:11 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 12:40:11 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 12:40:11 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 12:40:11 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 12:40:11 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 12:40:11 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:43:16 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 12:43:16 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 12:43:16 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 12:43:16 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 12:43:16 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 12:43:16 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 12:43:17 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 12:43:17 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 12:43:17 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 12:43:17 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 12:43:17 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 12:43:17 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:43:18 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 12:43:18 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 12:43:18 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 12:43:18 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 12:43:18 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 12:43:18 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 12:43:19 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 12:43:19 | 耗时 6 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 12:43:19 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 12:43:19 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 12:43:19 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 12:43:19 | 耗时 2 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:45:07 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 12:45:07 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-03 12:45:10 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 12:45:10 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-03 12:48:41 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 12:48:41 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 12:48:41 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 12:48:41 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 12:48:41 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 12:48:41 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 12:48:42 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 12:48:42 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 12:48:42 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 12:48:42 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 12:48:42 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 12:48:42 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:48:47 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 12:48:47 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (USERNAME = '陈ccc' AND REVIEW = '1');
2020-04-03 12:48:47 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 12:48:47 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (USERNAME = '陈ccc' AND REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:48:54 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 12:48:54 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (PLACE = '秋名山' AND REVIEW = '1');
2020-04-03 12:48:54 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 12:48:54 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (PLACE = '秋名山' AND REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:48:54 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 12:48:54 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (PLACE = '秋名山' AND REVIEW = '1');
2020-04-03 12:48:54 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 12:48:54 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (PLACE = '秋名山' AND REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:49:07 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 12:49:07 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (PLACE = '上海市' AND REVIEW = '1');
2020-04-03 12:49:07 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 12:49:07 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (PLACE = '上海市' AND REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:49:08 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 12:49:08 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (PLACE = '上海市' AND REVIEW = '1');
2020-04-03 12:49:08 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 12:49:08 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (PLACE = '上海市' AND REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:49:13 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 12:49:13 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (PLACE = '武汉市' AND REVIEW = '1');
2020-04-03 12:49:13 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 12:49:13 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (PLACE = '武汉市' AND REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:49:24 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 12:49:24 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '0' AND REVIEW = '1');
2020-04-03 12:49:24 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 12:49:24 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '0' AND REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:49:31 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 12:49:31 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '0' AND AVAILABLE = '0' AND REVIEW = '1');
2020-04-03 12:49:31 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 12:49:31 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '0' AND AVAILABLE = '0' AND REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:51:31 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 12:51:31 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (AVAILABLE = '0' AND REVIEW = '1');
2020-04-03 12:51:31 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 12:51:31 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (AVAILABLE = '0' AND REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:51:34 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 12:51:34 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (AVAILABLE = '1' AND REVIEW = '1');
2020-04-03 12:51:34 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 12:51:34 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (AVAILABLE = '1' AND REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:51:39 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 12:51:39 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 12:51:39 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 12:51:39 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:51:42 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 12:51:42 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 12:51:42 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 12:51:42 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:52:18 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 12:52:18 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 12:52:18 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 12:52:18 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 12:52:18 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 12:52:18 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 12:52:19 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 12:52:19 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 12:52:19 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 12:52:19 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 12:52:19 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 12:52:19 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:52:21 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 12:52:21 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 12:52:21 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 12:52:21 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 12:52:21 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 12:52:21 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 12:52:22 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 12:52:22 | 耗时 5 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 12:52:22 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 12:52:22 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 12:52:22 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 12:52:22 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:52:25 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 12:52:25 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 12:52:25 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 12:52:25 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:52:29 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 12:52:29 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 12:52:29 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 12:52:29 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:52:32 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 12:52:32 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 12:52:32 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 12:52:32 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:52:35 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 12:52:35 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'cccccc';
2020-04-03 12:52:37 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 12:52:37 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'cccccc';
2020-04-03 12:52:41 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 12:52:41 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 12:52:41 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 12:52:41 | 耗时 3 ms | SQL 语句：
INSERT INTO t_order (USER_ID, PARK_ID) VALUES (1, 14);
2020-04-03 12:52:41 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 12:52:41 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (ID = 14);
2020-04-03 12:52:41 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 12:52:41 | 耗时 1 ms | SQL 语句：
UPDATE t_park SET MOBILE = '15623041759', AVAILABLE = '1', DESCRIPTION = '88888', MODIFYTIME = '2020-04-03T12:52:41.665+0800', CREATETIME = '2020-03-31T18:59:35.000+0800', REVIEW = '1', PRICE = 0.0, PLACE = '武汉市', SPAN = 'FC', STATUS = '0', USERNAME = 'cccccc' WHERE ID = 14;
2020-04-03 12:52:41 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 12:52:41 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 12:52:41 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 12:52:41 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:52:43 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 12:52:43 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 12:52:43 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 12:52:43 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:53:31 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 12:53:31 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 12:53:31 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 12:53:31 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 12:53:31 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 12:53:31 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 12:53:32 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 12:53:32 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 12:53:32 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 12:53:32 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 12:53:32 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 12:53:32 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:53:33 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 12:53:33 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 12:53:33 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 12:53:33 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:53:35 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 12:53:35 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 12:53:35 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 12:53:35 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:56:49 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 12:56:49 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 12:56:49 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 12:56:49 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 12:56:49 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 12:56:49 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 12:56:50 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 12:56:50 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 12:56:50 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 12:56:50 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 12:56:50 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 12:56:50 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:56:50 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 12:56:50 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 12:56:50 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 12:56:50 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 12:56:50 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 12:56:50 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 12:56:51 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 12:56:51 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 12:56:51 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 12:56:51 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 12:56:51 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 12:56:51 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:56:53 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 12:56:53 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 12:56:53 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 12:56:53 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 12:56:53 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 12:56:53 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 12:56:54 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 12:56:54 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 12:56:54 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 12:56:54 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 12:56:54 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 12:56:54 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:57:01 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 12:57:01 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 12:57:01 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 12:57:01 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:57:02 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 12:57:02 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 12:57:02 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 12:57:02 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:57:03 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 12:57:03 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 12:57:03 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 12:57:03 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:57:04 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 12:57:04 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 12:57:04 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 12:57:04 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:57:45 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 12:57:45 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-03 12:57:48 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 12:57:48 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chencheng';
2020-04-03 12:59:01 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 12:59:01 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 12:59:01 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 12:59:01 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 12:59:01 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 12:59:01 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 12:59:01 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 12:59:01 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 12:59:02 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 12:59:02 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 12:59:02 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 12:59:02 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:59:02 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 12:59:02 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 12:59:02 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 12:59:02 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 12:59:02 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 12:59:02 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 12:59:03 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 12:59:03 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 12:59:03 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 12:59:03 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 12:59:03 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 12:59:03 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:59:03 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 12:59:03 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 12:59:03 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 12:59:03 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 12:59:03 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 12:59:03 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 12:59:04 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 12:59:04 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 12:59:04 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 12:59:04 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 12:59:04 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 12:59:04 | 耗时 2 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:59:05 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 12:59:05 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 12:59:05 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 12:59:05 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 12:59:05 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 12:59:05 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 12:59:05 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 12:59:05 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 12:59:05 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 12:59:05 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 12:59:05 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 12:59:05 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:59:25 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 12:59:25 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 12:59:25 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 12:59:25 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 12:59:25 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 12:59:25 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 12:59:26 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 12:59:26 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 12:59:26 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 12:59:26 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 12:59:26 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 12:59:26 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:59:26 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 12:59:26 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 12:59:26 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 12:59:26 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 12:59:26 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 12:59:26 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 12:59:27 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 12:59:27 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 12:59:27 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 12:59:27 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 12:59:27 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 12:59:27 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 12:59:27 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 12:59:27 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 12:59:27 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 12:59:27 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 12:59:27 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 12:59:27 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 12:59:28 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 12:59:28 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 12:59:28 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 12:59:28 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 12:59:28 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 12:59:28 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 13:09:53 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 13:09:53 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 13:09:53 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 13:09:53 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 13:09:53 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 13:09:53 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 13:09:53 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 13:09:53 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 13:09:57 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 13:09:57 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 13:09:57 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 13:09:57 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 13:10:00 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 13:10:00 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 13:10:00 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 13:10:00 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 13:10:51 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 13:10:51 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '藤原拓海' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 13:10:51 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 13:10:51 | 耗时 2 ms | SQL 语句：
INSERT INTO t_park (MOBILE, AVAILABLE, DESCRIPTION, CREATETIME, PRICE, PLACE, SPAN, STATUS, USERNAME) VALUES ('15623041759', '0', '111111', '2020-04-03T13:10:51.231+0800', 4.0, '秋名山', 'AE 86', '1', '藤原拓海');
2020-04-03 13:10:51 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 13:10:51 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 13:10:51 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 13:10:51 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 13:10:58 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 13:10:58 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 13:10:58 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 13:10:58 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 13:11:04 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 13:11:04 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 13:11:04 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 13:11:04 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 13:11:11 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 13:11:11 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 13:11:11 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 13:11:11 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 13:11:11 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 13:11:11 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 13:11:11 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 13:11:11 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 13:11:12 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 13:11:12 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 13:11:12 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 13:11:12 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 13:11:15 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 13:11:15 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 13:11:15 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 13:11:15 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 13:13:37 INFO  http-nio-8080-exec-7 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 13:13:38 INFO  http-nio-8080-exec-7 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 141ms. Found 0 Redis repository interfaces.
2020-04-03 13:13:39 INFO  http-nio-8080-exec-7 org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-03 13:13:39 INFO  http-nio-8080-exec-7 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 13:13:40 INFO  http-nio-8080-exec-7 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 280ms. Found 0 Redis repository interfaces.
2020-04-03 13:13:40 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 13:13:40 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 13:13:40 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 13:13:40 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 13:13:40 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 13:13:40 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 13:13:41 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 13:13:41 | 耗时 5 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 13:13:41 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 13:13:41 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 13:13:41 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 13:13:41 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 13:13:42 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 13:13:42 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 13:13:42 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 13:13:42 | 耗时 2 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 13:14:20 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 13:14:20 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '阿木' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 13:14:20 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 13:14:20 | 耗时 2 ms | SQL 语句：
INSERT INTO t_park (MOBILE, AVAILABLE, DESCRIPTION, CREATETIME, REVIEW, PRICE, PLACE, SPAN, USERNAME) VALUES ('15623041759', '0', '1111111', '2020-04-03T13:14:20.758+0800', '1', 4.0, '秋名山', 'AE 85', '阿木');
2020-04-03 13:14:20 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 13:14:20 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 13:14:20 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 13:14:20 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 13:14:22 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 13:14:22 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 13:14:22 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 13:14:22 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 13:15:43 INFO  http-nio-8080-exec-6 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 13:15:43 INFO  http-nio-8080-exec-6 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 71ms. Found 0 Redis repository interfaces.
2020-04-03 13:15:44 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 13:15:44 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 13:15:44 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 13:15:44 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 13:15:44 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 13:15:44 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 13:15:44 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 13:15:44 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 13:15:44 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 13:15:44 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 13:15:44 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 13:15:44 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 13:15:46 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 13:15:46 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 13:15:46 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 13:15:46 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 13:16:41 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 13:16:41 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '范甘迪' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 13:16:47 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 13:16:47 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '范甘迪' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 13:16:47 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 13:16:47 | 耗时 2 ms | SQL 语句：
INSERT INTO t_park (MOBILE, AVAILABLE, DESCRIPTION, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME) VALUES ('15623041777', '0', '22222', '2020-04-03T13:16:47.318+0800', '1', 4.0, '湖北', 'GTR', '1', '范甘迪');
2020-04-03 13:16:47 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 13:16:47 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 13:16:47 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 13:16:47 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 13:16:48 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 13:16:48 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 13:16:48 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 13:16:48 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 13:16:51 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 13:16:51 | 耗时 2 ms | SQL 语句：
DELETE FROM t_park WHERE ID IN ('23');
2020-04-03 13:16:51 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 13:16:51 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 13:16:51 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 13:16:51 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 13:17:25 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 13:17:25 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 13:17:25 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 13:17:25 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 13:17:31 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 13:17:31 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 13:17:31 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 13:17:31 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 13:17:47 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 13:17:47 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 13:17:47 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 13:17:47 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 13:17:48 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 13:17:48 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 13:17:48 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 13:17:48 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 13:17:49 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 13:17:49 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 13:17:49 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 13:17:49 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 13:17:53 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585888734012 paused.
2020-04-03 13:17:53 INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-03 13:17:53 INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-04-03 13:17:53 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585888734012 shutting down.
2020-04-03 13:17:53 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585888734012 paused.
2020-04-03 13:17:53 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585888734012 shutdown complete.
2020-04-03 13:17:53 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-04-03 13:17:53 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-04-03 13:17:54 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-04-03 13:17:54 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-04-03 13:17:54 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-04-03 13:17:54 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-04-03 13:54:57 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 102028 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-03 13:54:57 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-03 13:54:57 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-03 13:54:57 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-03 13:54:59 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-03 13:54:59 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 13:54:59 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 212ms. Found 0 Redis repository interfaces.
2020-04-03 13:55:00 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 13:55:00 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$10a5ce88] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 13:55:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 13:55:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 13:55:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$68c95e38] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 13:55:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$8ae31440] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 13:55:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 13:55:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$b2121334] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 13:55:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 13:55:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$e4dfca51] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 13:55:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 13:55:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 13:55:01 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-03 13:55:01 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-03 13:55:01 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-03 13:55:01 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-03 13:55:01 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-03 13:55:01 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-03 13:55:01 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-03 13:55:01 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-03 13:55:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 13:55:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 13:55:01 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 13:55:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 13:55:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 13:55:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 13:55:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 13:55:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 13:55:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 13:55:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 13:55:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 13:55:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 13:55:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 13:55:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 13:55:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 13:55:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 13:55:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 13:55:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 13:55:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 13:55:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 13:55:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 13:55:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 13:55:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 13:55:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 13:55:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 13:55:03 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-03 13:55:03 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-03 13:55:03 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-03 13:55:03 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-03 13:55:03 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-03 13:55:03 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 6296 ms
2020-04-03 13:55:06 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-03 13:55:06 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-03 13:55:06 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-03 13:55:06 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-03 13:55:06 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-03 13:55:06 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-03 13:55:06 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-03 13:55:06 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585893306588'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-03 13:55:06 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-03 13:55:06 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-03 13:55:06 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@3695e28a
2020-04-03 13:55:06 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-03 13:55:06 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-03 13:55:07 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-03 13:55:07 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-03 13:55:07 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-03 13:55:08 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-03 13:55:08 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-03 13:55:08 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-03 13:55:08 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-03 13:55:08 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-03 13:55:08 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-03 13:55:08 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-03 13:55:08 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-03 13:55:08 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-03 13:55:08 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-03 13:55:08 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-03 13:55:08 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-03 13:55:08 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-03 13:55:08 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-03 13:55:08 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-03 13:55:08 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-03 13:55:08 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-03 13:55:08 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAvailableUsingGET_1
2020-04-03 13:55:08 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-03 13:55:08 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-03 13:55:08 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-03 13:55:08 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 12.703 seconds (JVM running for 17.754)
2020-04-03 13:55:09 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-03 13:55:09 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-03 13:55:09 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-03 13:55:09 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-03 13:55:09 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-03 13:55:09 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-03 13:55:09 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-03 13:55:09 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-03 13:55:09 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-03 13:55:09 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585888734012"'s failed in-progress jobs.
2020-04-03 13:55:09 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585893306588 started.
2020-04-03 13:55:10 INFO  RMI TCP Connection(5)-192.168.80.1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-03 13:55:10 INFO  RMI TCP Connection(5)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-03 13:55:10 INFO  RMI TCP Connection(5)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 39 ms
2020-04-03 13:55:10 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-03 13:55:19 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 13:55:19 | 耗时 4 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 13:55:19 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 13:55:19 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T13:55:19.542+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-03 13:55:19 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 13:55:19 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 13:55:19 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 13:55:19 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 13:55:19 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 13:55:19 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 13:55:20 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 13:55:20 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 13:55:20 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 13:55:20 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T13:55:20.547+0800' WHERE (USERNAME = 'ccc');
2020-04-03 13:55:20 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 13:55:20 | 耗时 14 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 13:55:20 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 13:55:20 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 13:55:20 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 13:55:20 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 13:55:20 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 13:55:20 | 耗时 2 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 13:55:20 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 13:55:20 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-03 13:55:21 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 13:55:21 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 13:55:21 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 13:55:21 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 13:55:21 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 13:55:21 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 13:55:21 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 13:55:21 | 耗时 2 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 13:55:24 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 13:55:24 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 13:55:24 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 13:55:24 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 13:55:28 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 13:55:28 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 13:55:31 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 13:55:31 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 13:57:22 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 13:57:22 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 13:57:24 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 13:57:24 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 13:57:24 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 13:57:24 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 13:57:25 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 13:57:25 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-03 14:00:40 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585893306588 paused.
2020-04-03 14:00:40 INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-03 14:00:40 INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-04-03 14:00:40 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585893306588 shutting down.
2020-04-03 14:00:40 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585893306588 paused.
2020-04-03 14:00:40 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585893306588 shutdown complete.
2020-04-03 14:00:40 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-04-03 14:00:40 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-04-03 14:00:40 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-04-03 14:00:40 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-04-03 14:00:40 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-04-03 14:00:40 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-04-03 14:04:54 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 114564 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-03 14:04:54 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-03 14:04:54 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-03 14:04:54 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-03 14:04:57 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-03 14:04:57 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 14:04:57 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 181ms. Found 0 Redis repository interfaces.
2020-04-03 14:04:58 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:04:58 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$f348d396] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:04:58 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:04:58 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:04:58 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$4b6c6346] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:04:58 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$6d86194e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:04:58 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:04:58 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$94b51842] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:04:58 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:04:58 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$c782cf5f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:04:58 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:04:58 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:04:58 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-03 14:04:58 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-03 14:04:59 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-03 14:04:59 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-03 14:04:59 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-03 14:04:59 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-03 14:04:59 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-03 14:04:59 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-03 14:04:59 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:04:59 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:04:59 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:04:59 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:04:59 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:04:59 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:04:59 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:05:00 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:05:00 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:05:00 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:05:00 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:05:00 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:05:00 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:05:00 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:05:00 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:05:00 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:05:00 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:05:00 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:05:00 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:05:00 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:05:00 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:05:00 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:05:00 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:05:00 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:05:00 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:05:01 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-03 14:05:01 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-03 14:05:01 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-03 14:05:01 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-03 14:05:01 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-03 14:05:01 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 7052 ms
2020-04-03 14:05:04 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-03 14:05:04 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-03 14:05:04 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-03 14:05:04 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-03 14:05:04 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-03 14:05:04 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-03 14:05:04 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-03 14:05:04 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585893904431'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-03 14:05:04 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-03 14:05:04 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-03 14:05:04 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@4d94b0af
2020-04-03 14:05:04 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-03 14:05:04 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-03 14:05:04 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-03 14:05:05 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-03 14:05:05 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-03 14:05:05 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-03 14:05:06 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-03 14:05:06 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-03 14:05:06 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-03 14:05:06 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-03 14:05:06 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-03 14:05:06 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-03 14:05:06 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-03 14:05:06 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-03 14:05:06 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-03 14:05:06 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-03 14:05:06 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-03 14:05:06 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-03 14:05:06 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-03 14:05:06 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-03 14:05:06 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-03 14:05:06 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-03 14:05:06 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAvailableUsingGET_1
2020-04-03 14:05:06 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-03 14:05:06 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-03 14:05:06 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-03 14:05:06 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 13.532 seconds (JVM running for 18.361)
2020-04-03 14:05:06 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-03 14:05:06 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-03 14:05:07 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-03 14:05:07 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-03 14:05:07 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-03 14:05:07 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-03 14:05:07 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-03 14:05:07 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-03 14:05:07 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-03 14:05:07 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585893306588"'s failed in-progress jobs.
2020-04-03 14:05:07 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585893904431 started.
2020-04-03 14:05:07 INFO  RMI TCP Connection(6)-192.168.80.1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-03 14:05:07 INFO  RMI TCP Connection(6)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-03 14:05:07 INFO  RMI TCP Connection(6)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 21 ms
2020-04-03 14:05:08 INFO  http-nio-8080-exec-2 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-03 14:05:14 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 14:05:14 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:05:14 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 14:05:14 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T14:05:14.170+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-03 14:05:14 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 14:05:14 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 14:05:14 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 14:05:14 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 14:05:14 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 14:05:14 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:05:14 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 14:05:14 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 14:05:15 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 14:05:15 | 耗时 3 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T14:05:15.071+0800' WHERE (USERNAME = 'ccc');
2020-04-03 14:05:15 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 14:05:15 | 耗时 3 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 14:05:15 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 14:05:15 | 耗时 2 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 14:05:15 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 14:05:15 | 耗时 2 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 14:05:15 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 14:05:15 | 耗时 2 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 14:05:15 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 14:05:15 | 耗时 2 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-03 14:05:16 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:05:16 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:05:16 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:05:16 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:05:18 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 14:05:18 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 14:06:32 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 14:06:32 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 14:06:32 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 14:06:32 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:06:33 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 14:06:33 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:06:33 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 14:06:33 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:06:36 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 14:06:36 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (AVAILABLE = '0' AND REVIEW = '1');
2020-04-03 14:06:36 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 14:06:36 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (AVAILABLE = '0' AND REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:06:39 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:06:39 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:06:39 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:06:39 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:06:43 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 14:06:43 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 14:06:47 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:06:47 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 14:06:47 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:06:47 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:08:03 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 14:08:03 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 14:08:03 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 14:08:03 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 14:08:03 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 14:08:03 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:08:04 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 14:08:04 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 14:08:04 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:08:04 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 14:08:04 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:08:04 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:08:06 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 14:08:06 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:08:06 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 14:08:06 | 耗时 2 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:08:07 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 14:08:07 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原拓海';
2020-04-03 14:08:10 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 14:08:10 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原拓海';
2020-04-03 14:08:12 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 14:08:12 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 14:08:12 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 14:08:12 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:08:13 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:08:13 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:08:13 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:08:13 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:08:15 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 14:08:15 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原拓海';
2020-04-03 14:08:18 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 14:08:18 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 14:08:18 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 14:08:18 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:08:18 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:08:18 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 14:08:18 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:08:18 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 14:08:18 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:08:18 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:08:19 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 14:08:19 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 14:08:19 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 14:08:19 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 14:08:19 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 14:08:19 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:08:19 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:08:19 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 14:08:19 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:08:19 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 14:08:19 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:08:19 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:08:20 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 14:08:20 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 14:08:20 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 14:08:20 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 14:08:20 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 14:08:20 | 耗时 3 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:08:21 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:08:21 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chencheng';
2020-04-03 14:08:23 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 14:08:23 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chenc';
2020-04-03 14:08:27 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:08:27 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:08:27 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:08:27 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:08:28 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 14:08:28 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原拓海';
2020-04-03 14:08:31 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 14:08:31 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 14:08:31 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 14:08:31 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:09:49 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:09:49 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 14:09:49 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:09:49 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 14:09:49 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:09:49 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:09:49 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 14:09:49 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 14:09:49 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 14:09:49 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 14:09:49 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 14:09:49 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:09:50 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:09:50 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 14:09:50 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:09:50 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 14:09:50 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:09:50 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:09:50 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 14:09:50 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 14:09:51 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 14:09:51 | 耗时 5 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 14:09:51 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 14:09:51 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:09:51 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:09:51 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:09:51 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:09:51 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:09:53 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 14:09:53 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 14:09:55 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:09:55 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 14:09:58 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 14:09:58 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 14:09:58 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 14:09:58 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:14:06 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585893904431 paused.
2020-04-03 14:14:06 INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-03 14:14:06 INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-04-03 14:14:06 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585893904431 shutting down.
2020-04-03 14:14:06 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585893904431 paused.
2020-04-03 14:14:06 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585893904431 shutdown complete.
2020-04-03 14:14:06 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-04-03 14:14:06 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-04-03 14:14:06 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-04-03 14:14:06 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-04-03 14:14:06 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-04-03 14:14:06 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-04-03 14:37:09 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 115640 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-03 14:37:09 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-03 14:37:09 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-03 14:37:09 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-03 14:37:12 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-03 14:37:12 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 14:37:12 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 173ms. Found 0 Redis repository interfaces.
2020-04-03 14:37:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:37:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$2e8b10a5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:37:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:37:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:37:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$86aea055] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:37:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$a8c8565d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:37:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:37:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$cff75551] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:37:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:37:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$2c50c6e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:37:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:37:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:37:14 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-03 14:37:14 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-03 14:37:14 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-03 14:37:14 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-03 14:37:14 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-03 14:37:14 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-03 14:37:14 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-03 14:37:14 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-03 14:37:14 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:37:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:37:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:37:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:37:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:37:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:37:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:37:16 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:37:16 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:37:16 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:37:16 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:37:16 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:37:16 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:37:16 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:37:16 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:37:16 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:37:16 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:37:16 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:37:16 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:37:16 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:37:16 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:37:16 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:37:16 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:37:16 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:37:16 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 14:37:17 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-03 14:37:17 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-03 14:37:17 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-03 14:37:17 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-03 14:37:17 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-03 14:37:17 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 7957 ms
2020-04-03 14:37:20 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-03 14:37:20 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-03 14:37:20 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-03 14:37:20 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-03 14:37:20 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-03 14:37:20 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-03 14:37:20 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-03 14:37:20 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585895840820'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-03 14:37:20 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-03 14:37:20 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-03 14:37:20 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@19e78fa
2020-04-03 14:37:21 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-03 14:37:21 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-03 14:37:21 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-03 14:37:22 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-03 14:37:22 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-03 14:37:22 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-03 14:37:22 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-03 14:37:22 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-03 14:37:23 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-03 14:37:23 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-03 14:37:23 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-03 14:37:23 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-03 14:37:23 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-03 14:37:23 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-03 14:37:23 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-03 14:37:23 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-03 14:37:23 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-03 14:37:23 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-03 14:37:23 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-03 14:37:23 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-03 14:37:23 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-03 14:37:23 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-03 14:37:23 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAvailableUsingGET_1
2020-04-03 14:37:23 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAvailableReviewUsingGET_1
2020-04-03 14:37:23 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-03 14:37:23 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-03 14:37:23 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-03 14:37:23 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 15.738 seconds (JVM running for 21.749)
2020-04-03 14:37:23 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-03 14:37:23 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-03 14:37:24 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-03 14:37:24 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-03 14:37:24 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585893904431"'s failed in-progress jobs.
2020-04-03 14:37:24 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585895840820 started.
2020-04-03 14:37:24 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-03 14:37:24 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-03 14:37:24 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-03 14:37:24 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-03 14:37:24 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-03 14:37:25 INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-03 14:37:25 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-03 14:37:25 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 32 ms
2020-04-03 14:37:25 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-03 14:37:30 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 14:37:30 | 耗时 4 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:37:30 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 14:37:30 | 耗时 1 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T14:37:30.790+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-03 14:37:30 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 14:37:30 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 14:37:30 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 14:37:30 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 14:37:31 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 14:37:31 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:37:31 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 14:37:31 | 耗时 6 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 14:37:32 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:37:32 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T14:37:32.108+0800' WHERE (USERNAME = 'ccc');
2020-04-03 14:37:32 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:37:32 | 耗时 13 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 14:37:32 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:37:32 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 14:37:32 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:37:32 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 14:37:32 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:37:32 | 耗时 2 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 14:37:32 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:37:32 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-03 14:37:33 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 14:37:33 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 14:37:33 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 14:37:33 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 14:37:33 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 14:37:33 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 14:37:33 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 14:37:33 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:37:34 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 14:37:34 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:37:34 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 14:37:34 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:37:35 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 14:37:35 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 14:37:38 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 14:37:38 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 14:38:25 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 14:38:25 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 14:38:29 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 14:38:29 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 14:38:33 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:38:33 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 14:38:33 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:38:33 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:38:34 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:38:34 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-03 14:38:39 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 14:38:39 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:38:39 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 14:38:39 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:38:40 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 14:38:40 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 14:40:03 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 14:40:03 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 14:40:03 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 14:40:03 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 14:40:03 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 14:40:03 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:40:04 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 14:40:04 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 14:40:04 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:40:04 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:40:04 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:40:04 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:40:05 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 14:40:05 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 14:40:05 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 14:40:05 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 14:40:05 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 14:40:05 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:40:05 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 14:40:05 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 14:40:05 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 14:40:05 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:40:05 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 14:40:05 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:40:06 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:40:06 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 14:40:09 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 14:40:09 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 14:40:09 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 14:40:09 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:40:10 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 14:40:10 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-03 14:40:12 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 14:40:12 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:40:12 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 14:40:12 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:40:13 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 14:40:13 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 14:40:48 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 14:40:48 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 14:40:48 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 14:40:48 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 14:40:48 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 14:40:48 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:40:49 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 14:40:49 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 14:40:49 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 14:40:49 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:40:49 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 14:40:49 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:40:50 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 14:40:50 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-03 14:40:56 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 14:40:56 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'cccccc';
2020-04-03 14:42:48 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 14:42:48 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 14:42:48 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 14:42:48 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 14:42:48 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 14:42:48 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:42:49 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 14:42:49 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 14:42:49 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 14:42:49 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:42:49 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 14:42:49 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:42:49 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 14:42:49 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 14:42:49 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 14:42:49 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 14:42:49 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 14:42:49 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:42:50 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 14:42:50 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 14:42:50 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:42:50 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:42:50 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:42:50 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:42:51 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 14:42:51 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 14:42:56 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 14:42:56 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 14:42:56 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 14:42:56 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:42:57 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 14:42:57 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chenc';
2020-04-03 14:43:06 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:43:06 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:43:06 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:43:06 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:43:07 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 14:43:07 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 14:43:59 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 14:43:59 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 14:43:59 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 14:43:59 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 14:43:59 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 14:43:59 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:44:00 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 14:44:00 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 14:44:00 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 14:44:00 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:44:00 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 14:44:00 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:44:01 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:44:01 | 耗时 5 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 14:44:01 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:44:01 | 耗时 6 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 14:44:01 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:44:01 | 耗时 5 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:44:01 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 14:44:01 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 14:44:01 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 14:44:01 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:44:01 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 14:44:01 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:44:02 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 14:44:02 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 14:45:06 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 14:45:06 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 14:45:06 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 14:45:06 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 14:45:06 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 14:45:06 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:45:06 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 14:45:06 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 14:45:06 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 14:45:06 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:45:06 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 14:45:06 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:45:07 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 14:45:07 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 14:45:07 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 14:45:07 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 14:45:07 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 14:45:07 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:45:07 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:45:07 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 14:45:07 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 14:45:07 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:45:07 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 14:45:07 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:45:15 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 14:45:15 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 14:45:18 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:45:18 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '范甘迪' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:45:18 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 14:45:18 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 14:45:18 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 14:45:18 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 14:45:18 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 14:45:18 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:45:19 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:45:19 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 14:45:19 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 14:45:19 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:45:19 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 14:45:19 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:45:37 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 14:45:37 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 14:48:06 INFO  http-nio-8080-exec-1 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 14:48:06 INFO  http-nio-8080-exec-1 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 92ms. Found 0 Redis repository interfaces.
2020-04-03 14:48:07 INFO  http-nio-8080-exec-1 org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-03 14:48:07 INFO  http-nio-8080-exec-1 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 14:48:07 INFO  http-nio-8080-exec-1 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 207ms. Found 0 Redis repository interfaces.
2020-04-03 14:48:08 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 14:48:08 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 14:48:08 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 14:48:08 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 14:48:08 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 14:48:08 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:48:09 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:48:09 | 耗时 5 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 14:48:09 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 14:48:09 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:48:09 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 14:48:09 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:48:10 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 14:48:10 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 14:48:12 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 14:48:12 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '范甘迪' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:48:14 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 14:48:14 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '范甘迪' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:48:25 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:48:25 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '范甘迪' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:48:30 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 14:48:30 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '范甘迪' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:48:31 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 14:48:31 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '范甘迪' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:48:52 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:48:52 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 14:48:52 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:48:52 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 14:48:52 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:48:52 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:48:52 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 14:48:52 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 14:48:53 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 14:48:53 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:48:53 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 14:48:53 | 耗时 2 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:48:54 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 14:48:54 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 14:48:56 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 14:48:56 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '范甘迪' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:49:48 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 14:49:48 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 14:49:48 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 14:49:48 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 14:49:48 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 14:49:48 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:49:49 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 14:49:49 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 14:49:49 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:49:49 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:49:49 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:49:49 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:49:49 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 14:49:49 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 14:49:49 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 14:49:49 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 14:49:49 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 14:49:49 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:49:50 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:49:50 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 14:49:50 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 14:49:50 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:49:50 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 14:49:50 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:49:51 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 14:49:51 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 14:49:53 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:49:53 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '范甘迪' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:50:52 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 14:50:52 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 14:50:52 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 14:50:52 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 14:50:52 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 14:50:52 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:50:53 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 14:50:53 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 14:50:53 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 14:50:53 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:50:53 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 14:50:53 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:50:54 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:50:54 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 14:50:54 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:50:54 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 14:50:54 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:50:54 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:50:55 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 14:50:55 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 14:50:55 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 14:50:55 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:50:55 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 14:50:55 | 耗时 2 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:50:57 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 14:50:57 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 14:50:58 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 14:50:58 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '范甘迪' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:52:05 INFO  http-nio-8080-exec-5 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 14:52:05 INFO  http-nio-8080-exec-5 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 76ms. Found 0 Redis repository interfaces.
2020-04-03 14:52:06 INFO  http-nio-8080-exec-5 springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-03 14:52:06 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 14:52:06 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 14:52:06 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 14:52:06 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 14:52:06 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 14:52:06 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:52:07 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:52:07 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 14:52:07 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 14:52:07 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:52:07 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 14:52:07 | 耗时 2 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:52:10 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 14:52:10 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 14:52:12 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:52:12 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '范甘迪' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:53:26 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 14:53:26 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 14:53:26 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 14:53:26 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 14:53:26 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 14:53:26 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:53:26 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 14:53:26 | 耗时 6 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 14:53:26 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 14:53:26 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:53:26 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 14:53:26 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:53:28 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:53:28 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 14:53:28 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:53:28 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 14:53:28 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:53:28 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:53:29 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 14:53:29 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 14:53:29 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 14:53:29 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:53:29 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 14:53:29 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:53:30 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 14:53:30 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 14:53:32 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 14:53:32 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '范甘迪' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:53:51 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 14:53:51 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:53:51 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 14:53:51 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T14:53:51.352+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-03 14:53:51 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 14:53:51 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 14:53:51 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 14:53:51 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 14:53:51 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 14:53:51 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:53:51 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:53:51 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 14:53:52 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 14:53:52 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T14:53:52.071+0800' WHERE (USERNAME = 'ccc');
2020-04-03 14:53:52 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 14:53:52 | 耗时 10 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 14:53:52 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 14:53:52 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 14:53:52 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 14:53:52 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 14:53:52 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 14:53:52 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 14:53:52 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 14:53:52 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-03 14:53:53 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 14:53:53 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 14:53:53 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 14:53:53 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 14:53:53 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 14:53:53 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:53:53 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 14:53:53 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:53:54 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 14:53:54 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 14:53:56 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 14:53:56 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '范甘迪' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:54:00 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 14:54:00 | 耗时 1 ms | SQL 语句：
UPDATE t_park SET MOBILE = '15623041777', AVAILABLE = '1', WHY = ' ', DESCRIPTION = '22222', MODIFYTIME = '2020-04-03T14:54:00.614+0800', PRICE = 4.0, PLACE = '湖北', SPAN = 'GTR', USERNAME = '范甘迪' WHERE ID = 24;
2020-04-03 14:54:00 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 14:54:00 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:54:00 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 14:54:00 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:54:06 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:54:06 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 14:54:06 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:54:06 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:54:07 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 14:54:07 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:54:07 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 14:54:07 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:54:11 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 14:54:11 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 14:54:21 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 14:54:21 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 14:54:31 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:54:31 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原拓海';
2020-04-03 14:54:46 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 14:54:46 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '藤原拓海' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:54:49 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 14:54:49 | 耗时 1 ms | SQL 语句：
UPDATE t_park SET MOBILE = '15623041759', AVAILABLE = '0', WHY = '我才是车神', DESCRIPTION = '111111', MODIFYTIME = '2020-04-03T14:54:49.819+0800', PRICE = 4.0, PLACE = '秋名山', SPAN = 'AE 86', USERNAME = '藤原拓海' WHERE ID = 22;
2020-04-03 14:54:49 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 14:54:49 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:54:49 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 14:54:49 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:54:58 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 14:54:58 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原拓海';
2020-04-03 14:55:02 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:55:02 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 14:55:02 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:55:02 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 14:55:02 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:55:02 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:55:02 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 14:55:02 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 14:55:02 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:55:02 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:55:02 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:55:02 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:55:03 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 14:55:03 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原拓海';
2020-04-03 14:56:11 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:56:11 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 14:56:11 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:56:11 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 14:56:11 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:56:11 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:56:12 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 14:56:12 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 14:56:12 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 14:56:12 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:56:12 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 14:56:12 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:56:14 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 14:56:14 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 14:56:16 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 14:56:16 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原拓海';
2020-04-03 14:58:06 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 14:58:06 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 14:58:06 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 14:58:06 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 14:58:06 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 14:58:06 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:58:06 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 14:58:06 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 14:58:06 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 14:58:06 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:58:06 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 14:58:06 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:58:07 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 14:58:07 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 14:58:07 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 14:58:07 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 14:58:07 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 14:58:07 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:58:08 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 14:58:08 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 14:58:08 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 14:58:08 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:58:08 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 14:58:08 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:58:33 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 14:58:33 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 14:58:33 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 14:58:33 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 14:58:33 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 14:58:33 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:58:34 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:58:34 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 14:58:34 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 14:58:34 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:58:34 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 14:58:34 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:58:35 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 14:58:35 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 14:58:35 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 14:58:35 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 14:58:35 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 14:58:35 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:58:36 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 14:58:36 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 14:58:36 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 14:58:36 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:58:36 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 14:58:36 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:58:36 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:58:36 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 14:58:36 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:58:36 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 14:58:36 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:58:36 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:58:37 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 14:58:37 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 14:58:37 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:58:37 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:58:37 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 14:58:37 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:59:42 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 14:59:42 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 14:59:42 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 14:59:42 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 14:59:42 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 14:59:42 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:59:43 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 14:59:43 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 14:59:43 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:59:43 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:59:43 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 14:59:43 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:59:44 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 14:59:44 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 14:59:44 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 14:59:44 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 14:59:44 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 14:59:44 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 14:59:44 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 14:59:44 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 14:59:44 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 14:59:44 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:59:44 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 14:59:44 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:59:46 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 14:59:46 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 14:59:54 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 14:59:54 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 14:59:54 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 14:59:54 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:59:55 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 14:59:55 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 14:59:55 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 14:59:55 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 14:59:57 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 14:59:57 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 15:00:01 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 15:00:01 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '范甘迪' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 15:00:01 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 15:00:01 | 耗时 1 ms | SQL 语句：
UPDATE t_park SET MOBILE = '15623041777', AVAILABLE = '0', WHY = ' ', DESCRIPTION = '22222', MODIFYTIME = '2020-04-03T15:00:01.243+0800', PRICE = 4.0, PLACE = '湖北', SPAN = 'GTR', USERNAME = '范甘迪' WHERE ID = 24;
2020-04-03 15:00:01 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 15:00:01 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 15:00:01 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 15:00:01 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:00:02 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 15:00:02 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 15:00:02 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 15:00:02 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:00:04 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 15:00:04 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 15:00:04 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 15:00:04 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:00:10 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 15:00:10 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 15:00:19 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 15:00:19 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 15:01:25 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 15:01:25 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 15:01:25 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 15:01:25 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 15:01:25 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 15:01:25 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 15:01:26 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 15:01:26 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 15:01:26 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 15:01:26 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 15:01:26 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 15:01:26 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:01:28 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 15:01:28 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 15:05:10 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 15:05:10 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 15:05:10 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 15:05:10 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 15:05:10 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 15:05:10 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 15:05:11 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 15:05:11 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 15:05:11 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 15:05:11 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 15:05:11 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 15:05:11 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:05:14 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 15:05:14 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 15:05:14 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 15:05:14 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 15:05:14 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 15:05:14 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 15:05:14 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 15:05:14 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 15:05:14 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 15:05:14 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 15:05:14 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 15:05:14 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:05:16 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 15:05:16 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 15:05:22 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 15:05:22 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 15:05:25 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 15:05:25 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 15:05:36 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 15:05:36 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (AVAILABLE = '0' AND REVIEW = '1');
2020-04-03 15:05:36 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 15:05:36 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (AVAILABLE = '0' AND REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:05:45 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 15:05:45 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '0' AND AVAILABLE = '0' AND REVIEW = '1');
2020-04-03 15:05:48 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 15:05:48 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '0' AND REVIEW = '1');
2020-04-03 15:05:48 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 15:05:48 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '0' AND REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:05:52 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 15:05:52 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 15:05:52 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 15:05:52 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:06:02 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 15:06:02 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (PLACE = '湖北' AND REVIEW = '1');
2020-04-03 15:06:02 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 15:06:02 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (PLACE = '湖北' AND REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:06:04 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 15:06:04 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 15:06:04 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 15:06:04 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:06:43 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 15:06:43 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 15:06:43 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 15:06:43 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 15:06:43 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 15:06:43 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 15:06:44 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 15:06:44 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 15:06:44 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 15:06:44 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 15:06:44 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 15:06:44 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:06:45 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 15:06:45 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 15:06:45 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 15:06:45 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 15:06:45 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 15:06:45 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 15:06:45 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 15:06:45 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 15:06:45 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 15:06:45 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 15:06:45 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 15:06:45 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:06:48 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 15:06:48 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 15:06:48 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 15:06:48 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 15:06:48 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 15:06:48 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 15:06:49 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 15:06:49 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 15:06:49 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 15:06:49 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 15:06:49 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 15:06:49 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:07:08 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 15:07:08 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 15:07:08 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 15:07:08 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 15:07:08 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 15:07:08 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 15:07:08 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 15:07:08 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 15:07:09 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 15:07:09 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 15:07:09 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 15:07:09 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:07:09 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 15:07:09 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 15:07:09 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 15:07:09 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 15:07:09 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 15:07:09 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 15:07:10 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 15:07:10 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 15:07:10 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 15:07:10 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 15:07:10 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 15:07:10 | 耗时 3 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:07:11 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 15:07:11 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 15:07:11 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 15:07:11 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 15:07:11 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 15:07:11 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 15:07:11 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 15:07:11 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 15:07:11 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 15:07:11 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 15:07:11 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 15:07:11 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:07:13 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 15:07:13 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 15:07:19 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 15:07:19 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 15:07:20 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 15:07:20 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:07:35 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 15:07:35 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 15:07:35 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 15:07:35 | 耗时 1 ms | SQL 语句：
INSERT INTO t_order (USER_ID, PARK_ID) VALUES (1, 17);
2020-04-03 15:07:35 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 15:07:35 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (ID = 17);
2020-04-03 15:07:35 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 15:07:35 | 耗时 1 ms | SQL 语句：
UPDATE t_park SET MOBILE = '15623041759', AVAILABLE = '1', DESCRIPTION = '86上山了 86上山了', MODIFYTIME = '2020-04-03T15:07:35.169+0800', CREATETIME = '2020-03-31T20:09:19.000+0800', REVIEW = '1', PRICE = 4.0, PLACE = '秋名山', SPAN = 'AE86', STATUS = '0', USERNAME = '陈ccc' WHERE ID = 17;
2020-04-03 15:07:35 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 15:07:35 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 15:07:35 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 15:07:35 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:07:36 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 15:07:36 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 15:07:36 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 15:07:36 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:07:40 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 15:07:40 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 15:07:40 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 15:07:40 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:07:55 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 15:07:55 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 15:07:55 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 15:07:55 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 15:07:55 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 15:07:55 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 15:07:55 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 15:07:55 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 15:07:55 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 15:07:55 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 15:07:55 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 15:07:55 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:07:57 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 15:07:57 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 15:07:57 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 15:07:57 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:08:02 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 15:08:02 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-03 15:08:14 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 15:08:14 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 15:08:14 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 15:08:14 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 15:08:14 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 15:08:14 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 15:08:14 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 15:08:14 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 15:08:15 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 15:08:15 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 15:08:15 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 15:08:15 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:08:16 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 15:08:16 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 15:08:16 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 15:08:16 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:08:33 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 15:08:33 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 15:08:33 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 15:08:33 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:08:34 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 15:08:34 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 15:08:42 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 15:08:42 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原拓海';
2020-04-03 15:08:46 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 15:08:46 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-03 15:08:48 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 15:08:48 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原拓海';
2020-04-03 15:14:23 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 15:14:23 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 15:14:23 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 15:14:23 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 15:14:23 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 15:14:23 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 15:14:23 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 15:14:23 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 15:14:23 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 15:14:23 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 15:14:23 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 15:14:23 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:14:32 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 15:14:32 | 耗时 1 ms | SQL 语句：
SELECT MENU_ID, ICON, ORDER_NUM, MENU_NAME, TYPE, URL, PARENT_ID, MODIFY_TIME, CREATE_TIME, PERMS FROM t_menu ORDER BY ORDER_NUM ASC;
2020-04-03 15:15:12 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 15:15:12 | 耗时 12 ms | SQL 语句：
UPDATE t_menu SET ICON = 'layui-icon-check-square', ORDER_NUM = 2, MENU_NAME = '信息审核', TYPE = '0', URL = '/park/available', PARENT_ID = 176, CREATE_TIME = '2020-04-03T15:15:12.805+0800', PERMS = 'available:view' WHERE MENU_ID = 183;
2020-04-03 15:15:12 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 15:15:12 | 耗时 2 ms | SQL 语句：
SELECT MENU_ID, ICON, ORDER_NUM, MENU_NAME, TYPE, URL, PARENT_ID, MODIFY_TIME, CREATE_TIME, PERMS FROM t_menu ORDER BY ORDER_NUM ASC;
2020-04-03 15:15:15 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 15:15:15 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 15:15:15 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 15:15:15 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 15:15:15 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 15:15:15 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 15:15:16 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 15:15:16 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 15:15:16 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 15:15:16 | 耗时 1 ms | SQL 语句：
SELECT MENU_ID, ICON, ORDER_NUM, MENU_NAME, TYPE, URL, PARENT_ID, MODIFY_TIME, CREATE_TIME, PERMS FROM t_menu ORDER BY ORDER_NUM ASC;
2020-04-03 15:15:44 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 15:15:44 | 耗时 12 ms | SQL 语句：
UPDATE t_menu SET ICON = 'layui-icon-user', ORDER_NUM = 3, MENU_NAME = '我的车位', TYPE = '0', URL = '/park/mypark', PARENT_ID = 176, CREATE_TIME = '2020-04-03T15:15:44.869+0800', PERMS = 'user:park' WHERE MENU_ID = 184;
2020-04-03 15:15:44 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 15:15:44 | 耗时 1 ms | SQL 语句：
SELECT MENU_ID, ICON, ORDER_NUM, MENU_NAME, TYPE, URL, PARENT_ID, MODIFY_TIME, CREATE_TIME, PERMS FROM t_menu ORDER BY ORDER_NUM ASC;
2020-04-03 15:15:46 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 15:15:46 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 15:15:46 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 15:15:46 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 15:15:46 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 15:15:46 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 15:15:46 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 15:15:46 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 15:15:46 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 15:15:46 | 耗时 1 ms | SQL 语句：
SELECT MENU_ID, ICON, ORDER_NUM, MENU_NAME, TYPE, URL, PARENT_ID, MODIFY_TIME, CREATE_TIME, PERMS FROM t_menu ORDER BY ORDER_NUM ASC;
2020-04-03 15:16:00 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585895840820 paused.
2020-04-03 15:16:00 INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-03 15:16:00 INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-04-03 15:16:00 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585895840820 shutting down.
2020-04-03 15:16:00 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585895840820 paused.
2020-04-03 15:16:00 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585895840820 shutdown complete.
2020-04-03 15:16:00 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-04-03 15:16:00 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-04-03 15:16:00 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-04-03 15:16:00 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-04-03 15:16:00 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-04-03 15:16:00 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-04-03 15:20:01 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 107724 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-03 15:20:01 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-03 15:20:01 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-03 15:20:01 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-03 15:20:03 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-03 15:20:03 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 15:20:04 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 180ms. Found 0 Redis repository interfaces.
2020-04-03 15:20:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:20:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$b9ede02c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:20:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:20:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:20:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$12116fdc] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:20:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$342b25e4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:20:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:20:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$5b5a24d8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:20:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:20:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$8e27dbf5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:20:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:20:05 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:20:05 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-03 15:20:05 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-03 15:20:06 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-03 15:20:06 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-03 15:20:06 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-03 15:20:06 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-03 15:20:06 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-03 15:20:06 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-03 15:20:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:20:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:20:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:20:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:20:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:20:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:20:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:20:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:20:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:20:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:20:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:20:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:20:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:20:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:20:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:20:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:20:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:20:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:20:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:20:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:20:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:20:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:20:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:20:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:20:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:20:08 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-03 15:20:08 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-03 15:20:08 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-03 15:20:08 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-03 15:20:08 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-03 15:20:08 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 6998 ms
2020-04-03 15:20:10 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-03 15:20:11 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-03 15:20:11 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-03 15:20:11 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-03 15:20:11 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-03 15:20:11 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-03 15:20:11 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-03 15:20:11 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585898411200'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-03 15:20:11 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-03 15:20:11 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-03 15:20:11 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@4ee6b207
2020-04-03 15:20:11 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-03 15:20:11 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-03 15:20:11 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-03 15:20:12 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-03 15:20:12 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-03 15:20:12 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-03 15:20:13 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-03 15:20:13 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-03 15:20:13 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-03 15:20:13 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-03 15:20:13 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-03 15:20:13 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-03 15:20:13 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-03 15:20:13 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-03 15:20:13 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-03 15:20:13 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-03 15:20:13 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-03 15:20:13 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-03 15:20:13 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAvailableUsingGET_1
2020-04-03 15:20:13 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-03 15:20:13 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-03 15:20:13 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-03 15:20:13 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-03 15:20:13 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-03 15:20:13 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-03 15:20:13 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-03 15:20:13 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 13.609 seconds (JVM running for 18.47)
2020-04-03 15:20:14 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-03 15:20:14 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-03 15:20:14 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-03 15:20:14 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-03 15:20:14 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-03 15:20:14 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-03 15:20:14 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-03 15:20:14 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-03 15:20:14 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-03 15:20:14 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585895840820"'s failed in-progress jobs.
2020-04-03 15:20:14 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585898411200 started.
2020-04-03 15:20:15 INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-03 15:20:15 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-03 15:20:15 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 20 ms
2020-04-03 15:20:15 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-03 15:20:24 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 15:20:24 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 15:20:24 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 15:20:24 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T15:20:24.259+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'cccc');
2020-04-03 15:20:24 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 15:20:24 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-03 15:20:24 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 15:20:24 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 15:20:24 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 15:20:24 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 15:20:25 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 15:20:25 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-03 15:20:25 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 15:20:25 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T15:20:25.269+0800' WHERE (USERNAME = 'cccc');
2020-04-03 15:20:25 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 15:20:25 | 耗时 9 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 15:20:25 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 15:20:25 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 15:20:25 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 15:20:25 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 15:20:25 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 15:20:25 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 15:20:25 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 15:20:25 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'cccc' GROUP BY days;
2020-04-03 15:20:26 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 15:20:26 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-03 15:20:26 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 15:20:26 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 15:20:26 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 15:20:26 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 15:20:26 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 15:20:26 | 耗时 3 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:20:31 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 15:20:31 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-03 15:20:49 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 15:20:49 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 15:20:49 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 15:20:49 | 耗时 2 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:20:57 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 15:20:57 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 15:20:57 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 15:20:57 | 耗时 2 ms | SQL 语句：
INSERT INTO t_order (USER_ID, PARK_ID) VALUES (10, 17);
2020-04-03 15:20:57 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 15:20:57 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (ID = 17);
2020-04-03 15:20:57 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 15:20:57 | 耗时 2 ms | SQL 语句：
UPDATE t_park SET MOBILE = '15623041759', AVAILABLE = '1', DESCRIPTION = '86上山了 86上山了', MODIFYTIME = '2020-04-03T15:20:57.108+0800', CREATETIME = '2020-03-31T20:09:19.000+0800', REVIEW = '1', PRICE = 4.0, PLACE = '秋名山', SPAN = 'AE86', STATUS = '0', USERNAME = '陈ccc' WHERE ID = 17;
2020-04-03 15:20:57 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 15:20:57 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 15:20:57 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 15:20:57 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:21:21 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 15:21:21 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 15:21:21 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 15:21:21 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T15:21:21.669+0800', 'Chrome 80', '127.0.0.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-03 15:21:21 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 15:21:21 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 15:21:21 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 15:21:21 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 15:21:21 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 15:21:21 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 15:21:22 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 15:21:22 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 15:21:22 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 15:21:22 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T15:21:22.370+0800' WHERE (USERNAME = 'ccc');
2020-04-03 15:21:22 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 15:21:22 | 耗时 11 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 15:21:22 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 15:21:22 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 15:21:22 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 15:21:22 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 15:21:22 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 15:21:22 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 15:21:22 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 15:21:22 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-03 15:21:24 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 15:21:24 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 15:21:24 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 15:21:24 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:21:26 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 15:21:26 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 15:21:26 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 15:21:26 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:23:56 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585898411200 paused.
2020-04-03 15:23:56 INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-03 15:23:56 INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-04-03 15:23:56 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585898411200 shutting down.
2020-04-03 15:23:56 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585898411200 paused.
2020-04-03 15:23:56 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585898411200 shutdown complete.
2020-04-03 15:23:56 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-04-03 15:23:56 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-04-03 15:23:56 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-04-03 15:23:56 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-04-03 15:23:56 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-04-03 15:23:56 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-04-03 15:56:18 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 111576 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-03 15:56:18 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-03 15:56:18 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-03 15:56:18 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-03 15:56:20 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-03 15:56:20 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 15:56:20 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 179ms. Found 0 Redis repository interfaces.
2020-04-03 15:56:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:56:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$e9e77101] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:56:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:56:21 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:56:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$420b00b1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:56:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$6424b6b9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:56:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:56:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$8b53b5ad] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:56:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:56:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$be216cca] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:56:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:56:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:56:22 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-03 15:56:22 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-03 15:56:22 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-03 15:56:22 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-03 15:56:22 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-03 15:56:22 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-03 15:56:22 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-03 15:56:22 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-03 15:56:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:56:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:56:22 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:56:23 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:56:24 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:56:24 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:56:24 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:56:24 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 15:56:24 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-03 15:56:24 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-03 15:56:24 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-03 15:56:24 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-03 15:56:25 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-03 15:56:25 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 6893 ms
2020-04-03 15:56:27 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-03 15:56:27 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-03 15:56:27 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-03 15:56:28 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-03 15:56:28 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-03 15:56:28 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-03 15:56:28 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-03 15:56:28 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585900587998'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-03 15:56:28 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-03 15:56:28 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-03 15:56:28 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@34c9c4be
2020-04-03 15:56:28 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-03 15:56:28 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-03 15:56:28 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-03 15:56:29 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-03 15:56:29 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-03 15:56:29 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-03 15:56:29 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-03 15:56:29 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-03 15:56:29 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-03 15:56:29 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-03 15:56:29 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-03 15:56:29 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-03 15:56:29 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-03 15:56:30 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-03 15:56:30 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-03 15:56:30 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-03 15:56:30 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-03 15:56:30 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-03 15:56:30 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-03 15:56:30 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-03 15:56:30 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-03 15:56:30 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-03 15:56:30 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAvailableUsingGET_1
2020-04-03 15:56:30 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-03 15:56:30 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-03 15:56:30 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-03 15:56:30 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 13.363 seconds (JVM running for 18.543)
2020-04-03 15:56:30 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-03 15:56:30 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-03 15:56:31 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-03 15:56:31 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-03 15:56:31 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585898411200"'s failed in-progress jobs.
2020-04-03 15:56:31 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585900587998 started.
2020-04-03 15:56:31 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-03 15:56:31 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-03 15:56:31 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-03 15:56:31 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-03 15:56:31 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-03 15:56:31 INFO  RMI TCP Connection(5)-192.168.80.1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-03 15:56:31 INFO  RMI TCP Connection(5)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-03 15:56:32 INFO  RMI TCP Connection(5)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 46 ms
2020-04-03 15:56:32 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-03 15:56:53 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 15:56:53 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 15:56:53 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 15:56:53 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T15:56:53.158+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-03 15:56:53 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 15:56:53 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 15:56:53 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 15:56:53 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 15:56:53 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 15:56:53 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 15:56:53 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 15:56:53 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 15:56:54 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 15:56:54 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T15:56:54.044+0800' WHERE (USERNAME = 'ccc');
2020-04-03 15:56:54 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 15:56:54 | 耗时 3 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 15:56:54 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 15:56:54 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 15:56:54 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 15:56:54 | 耗时 2 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 15:56:54 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 15:56:54 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 15:56:54 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 15:56:54 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-03 15:56:55 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 15:56:55 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 15:56:55 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 15:56:55 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 15:56:55 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 15:56:55 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 15:56:55 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 15:56:55 | 耗时 1 ms | SQL 语句：
SELECT USER_ID, PARK_ID FROM t_order WHERE (USER_ID = 1);
2020-04-03 15:56:55 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 15:56:55 | 耗时 12 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-03 15:56:55 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 15:56:55 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:57:01 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 15:57:01 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 15:57:01 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 15:57:01 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:57:02 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 15:57:02 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 15:57:02 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 15:57:02 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:57:02 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 15:57:02 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 15:57:02 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 15:57:02 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:57:03 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 15:57:03 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 15:57:03 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 15:57:03 | 耗时 1 ms | SQL 语句：
SELECT USER_ID, PARK_ID FROM t_order WHERE (USER_ID = 1);
2020-04-03 15:57:03 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 15:57:03 | 耗时 6 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-03 15:57:03 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 15:57:03 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:57:06 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 15:57:06 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 15:57:06 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 15:57:06 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:57:07 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 15:57:07 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 15:57:07 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 15:57:07 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:57:07 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 15:57:07 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 15:57:07 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 15:57:07 | 耗时 1 ms | SQL 语句：
SELECT USER_ID, PARK_ID FROM t_order WHERE (USER_ID = 1);
2020-04-03 15:57:07 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 15:57:07 | 耗时 12 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-03 15:57:07 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 15:57:07 | 耗时 1 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 15:58:21 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 15:58:21 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 15:58:21 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 15:58:21 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 15:58:21 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 15:58:21 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 15:58:21 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 15:58:21 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 15:58:21 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 15:58:21 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 15:58:21 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 15:58:21 | 耗时 0 ms | SQL 语句：
SELECT USER_ID, PARK_ID FROM t_order WHERE (USER_ID = 1);
2020-04-03 15:58:40 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 15:58:40 | 耗时 13 ms | SQL 语句：
SELECT COUNT(1) FROM t_park;
2020-04-03 15:58:40 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 15:58:40 | 耗时 29 ms | SQL 语句：
SELECT ID, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:03:45 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585900587998 paused.
2020-04-03 16:03:45 INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-03 16:03:45 INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-04-03 16:03:45 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585900587998 shutting down.
2020-04-03 16:03:45 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585900587998 paused.
2020-04-03 16:03:45 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585900587998 shutdown complete.
2020-04-03 16:03:45 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-04-03 16:03:45 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-04-03 16:03:45 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-04-03 16:03:45 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-04-03 16:03:45 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-04-03 16:03:45 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-04-03 16:26:49 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 110812 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-03 16:26:49 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-03 16:26:49 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-03 16:26:49 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-03 16:26:52 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-03 16:26:52 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 16:26:52 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 155ms. Found 0 Redis repository interfaces.
2020-04-03 16:26:52 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:26:52 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$1b134b22] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:26:52 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:26:52 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:26:53 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$7336dad2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:26:53 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$955090da] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:26:53 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:26:53 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$bc7f8fce] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:26:53 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:26:53 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$ef4d46eb] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:26:53 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:26:53 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:26:53 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-03 16:26:53 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-03 16:26:53 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-03 16:26:53 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-03 16:26:53 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-03 16:26:53 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-03 16:26:53 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-03 16:26:53 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-03 16:26:53 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:26:53 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:26:53 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:26:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:26:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:26:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:26:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:26:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:26:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:26:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:26:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:26:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:26:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:26:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:26:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:26:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:26:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:26:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:26:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:26:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:26:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:26:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:26:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:26:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:26:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:26:55 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-03 16:26:55 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-03 16:26:55 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-03 16:26:55 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-03 16:26:55 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-03 16:26:55 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 5680 ms
2020-04-03 16:26:57 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-03 16:26:57 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-03 16:26:58 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-03 16:26:58 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-03 16:26:58 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-03 16:26:58 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-03 16:26:58 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-03 16:26:58 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585902418051'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-03 16:26:58 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-03 16:26:58 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-03 16:26:58 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@426d7d23
2020-04-03 16:26:58 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-03 16:26:58 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-03 16:26:58 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-03 16:26:59 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-03 16:26:59 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-03 16:26:59 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-03 16:27:00 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-03 16:27:00 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-03 16:27:00 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-03 16:27:00 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-03 16:27:00 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-03 16:27:00 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-03 16:27:00 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-03 16:27:00 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-03 16:27:00 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-03 16:27:00 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-03 16:27:00 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-03 16:27:00 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-03 16:27:00 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-03 16:27:00 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-03 16:27:00 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-03 16:27:00 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-03 16:27:01 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAvailableUsingGET_1
2020-04-03 16:27:01 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-03 16:27:01 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-03 16:27:01 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-03 16:27:01 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 12.286 seconds (JVM running for 17.166)
2020-04-03 16:27:01 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-03 16:27:01 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-03 16:27:02 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-03 16:27:02 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-03 16:27:02 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585900587998"'s failed in-progress jobs.
2020-04-03 16:27:02 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585902418051 started.
2020-04-03 16:27:02 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-03 16:27:02 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-03 16:27:02 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-03 16:27:02 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-03 16:27:02 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-03 16:27:03 INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-03 16:27:03 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-03 16:27:03 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 26 ms
2020-04-03 16:27:03 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-03 16:27:09 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 16:27:09 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:27:09 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 16:27:09 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T16:27:09.397+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-03 16:27:09 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 16:27:09 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 16:27:09 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 16:27:09 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 16:27:09 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 16:27:09 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:27:10 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 16:27:10 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 16:27:10 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:27:10 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T16:27:10.529+0800' WHERE (USERNAME = 'ccc');
2020-04-03 16:27:10 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:27:10 | 耗时 11 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 16:27:10 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:27:10 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 16:27:10 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:27:10 | 耗时 3 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 16:27:10 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:27:10 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 16:27:10 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:27:10 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-03 16:27:11 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 16:27:11 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 16:27:11 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 16:27:11 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 16:27:11 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:27:11 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:27:11 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:27:11 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 16:27:12 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:27:12 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:27:16 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 16:27:16 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 16:27:16 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 16:27:16 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:27:17 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:27:17 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:27:17 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:27:17 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 16:27:17 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:27:17 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:27:20 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 16:27:20 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 16:27:20 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 16:27:20 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 16:27:20 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 16:27:20 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:27:21 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 16:27:21 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 16:27:21 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:27:21 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 16:27:21 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:27:21 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:27:34 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 16:27:34 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 16:27:34 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 16:27:34 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 16:27:34 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 16:27:34 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:27:35 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 16:27:35 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 16:27:35 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 16:27:35 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:27:35 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 16:27:35 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 16:27:35 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 16:27:35 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:27:55 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 16:27:55 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:27:55 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 16:27:55 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T16:27:55.660+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'cccc');
2020-04-03 16:27:55 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:27:55 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-03 16:27:55 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:27:55 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 16:27:55 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:27:55 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:27:56 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 16:27:56 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-03 16:27:56 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 16:27:56 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T16:27:56.230+0800' WHERE (USERNAME = 'cccc');
2020-04-03 16:27:56 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 16:27:56 | 耗时 12 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 16:27:56 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 16:27:56 | 耗时 0 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 16:27:56 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 16:27:56 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 16:27:56 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 16:27:56 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 16:27:56 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 16:27:56 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'cccc' GROUP BY days;
2020-04-03 16:27:58 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 16:27:58 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-03 16:27:58 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 16:27:58 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 16:27:58 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 16:27:58 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 16:27:58 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 16:27:58 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:29:12 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 16:29:12 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:29:12 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 16:29:12 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T16:29:12.607+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'cccc');
2020-04-03 16:29:12 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 16:29:12 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-03 16:29:12 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 16:29:12 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 16:29:12 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 16:29:12 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:29:13 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 16:29:13 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-03 16:29:13 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:29:13 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T16:29:13.185+0800' WHERE (USERNAME = 'cccc');
2020-04-03 16:29:13 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:29:13 | 耗时 14 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 16:29:13 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:29:13 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 16:29:13 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:29:13 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 16:29:13 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:29:13 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 16:29:13 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:29:13 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'cccc' GROUP BY days;
2020-04-03 16:29:14 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 16:29:14 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-03 16:29:14 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 16:29:14 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 16:29:14 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 16:29:14 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:29:14 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 16:29:14 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 10);
2020-04-03 16:29:41 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 16:29:41 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-03 16:29:41 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 16:29:41 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 16:29:41 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 16:29:41 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:29:41 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:29:41 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-03 16:29:41 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 16:29:41 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:29:41 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 16:29:41 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 10);
2020-04-03 16:29:41 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 16:29:41 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 10) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:29:50 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 16:29:50 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:29:50 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 16:29:50 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 10);
2020-04-03 16:29:50 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 16:29:50 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 10) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:30:06 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 16:30:06 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-03 16:30:06 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 16:30:06 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 16:30:06 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 16:30:06 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:30:06 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 16:30:06 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-03 16:30:06 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 16:30:06 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:30:06 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 16:30:06 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 10);
2020-04-03 16:30:06 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 16:30:06 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 10) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:30:16 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 16:30:16 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:30:16 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 16:30:16 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T16:30:16.986+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-03 16:30:17 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 16:30:17 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 16:30:17 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 16:30:17 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 16:30:17 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 16:30:17 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:30:17 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 16:30:17 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 16:30:17 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 16:30:17 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T16:30:17.556+0800' WHERE (USERNAME = 'ccc');
2020-04-03 16:30:17 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 16:30:17 | 耗时 9 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 16:30:17 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 16:30:17 | 耗时 0 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 16:30:17 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 16:30:17 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 16:30:17 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 16:30:17 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 16:30:17 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 16:30:17 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-03 16:30:18 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:30:18 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 16:30:18 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:30:18 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 16:30:19 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 16:30:19 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:30:19 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 16:30:19 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 16:30:19 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 16:30:19 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:30:30 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 16:30:30 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 16:30:30 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 16:30:30 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:30:32 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 16:30:32 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 16:30:32 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 16:30:32 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:31:10 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 16:31:10 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '舒马赫' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:31:10 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 16:31:10 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:31:10 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 16:31:10 | 耗时 1 ms | SQL 语句：
INSERT INTO t_park (OWNER, MOBILE, AVAILABLE, DESCRIPTION, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME) VALUES (1, '15623041759', '0', 'LALALALA', '2020-04-03T16:31:10.532+0800', '1', 4.0, '巴音布鲁克', 'AE 87', '1', '舒马赫');
2020-04-03 16:31:10 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 16:31:10 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 16:31:10 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 16:31:10 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:31:11 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:31:11 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:31:11 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:31:11 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 16:31:11 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:31:11 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:31:16 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 16:31:16 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 16:31:16 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 16:31:16 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 16:31:16 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 16:31:16 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:31:16 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 16:31:16 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 16:31:16 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 16:31:16 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:31:16 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 16:31:16 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 16:31:16 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 16:31:16 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:31:34 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 16:31:34 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:31:34 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 16:31:34 | 耗时 1 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T16:31:34.307+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'cccc');
2020-04-03 16:31:34 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 16:31:34 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-03 16:31:34 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 16:31:34 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 16:31:34 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 16:31:34 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:31:34 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 16:31:34 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-03 16:31:34 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:31:34 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T16:31:34.926+0800' WHERE (USERNAME = 'cccc');
2020-04-03 16:31:34 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:31:34 | 耗时 9 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 16:31:34 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:31:34 | 耗时 0 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 16:31:34 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:31:34 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 16:31:34 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:31:34 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 16:31:34 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:31:34 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'cccc' GROUP BY days;
2020-04-03 16:31:36 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 16:31:36 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-03 16:31:36 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 16:31:36 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 16:31:36 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:31:36 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:31:36 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:31:36 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 10);
2020-04-03 16:31:36 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:31:36 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 10) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:31:37 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 16:31:37 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 16:31:37 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 16:31:37 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:31:56 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:31:56 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:31:56 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:31:56 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 10);
2020-04-03 16:31:56 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:31:56 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 10) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:31:58 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 16:31:58 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:31:58 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 16:31:58 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 10);
2020-04-03 16:31:58 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 16:31:58 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 10) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:32:12 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:32:12 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:32:12 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:32:12 | 耗时 1 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T16:32:12.594+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-03 16:32:12 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 16:32:12 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 16:32:12 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 16:32:12 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 16:32:12 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 16:32:12 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:32:13 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 16:32:13 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 16:32:13 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:32:13 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T16:32:13.149+0800' WHERE (USERNAME = 'ccc');
2020-04-03 16:32:13 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:32:13 | 耗时 4 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 16:32:13 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:32:13 | 耗时 0 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 16:32:13 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:32:13 | 耗时 0 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 16:32:13 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:32:13 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 16:32:13 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:32:13 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-03 16:32:14 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 16:32:14 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 16:32:14 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 16:32:14 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 16:32:14 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 16:32:14 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:32:14 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 16:32:14 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 16:32:14 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 16:32:14 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:32:18 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:32:18 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 16:32:18 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:32:18 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:32:22 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:32:22 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:32:22 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:32:22 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 16:32:22 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:32:22 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:32:28 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 16:32:28 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 16:32:28 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 16:32:28 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:32:30 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 16:32:30 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:32:30 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 16:32:30 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 16:32:30 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 16:32:30 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:33:39 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 16:33:39 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 16:33:39 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 16:33:39 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 16:33:39 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 16:33:39 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:33:40 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:33:40 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 16:33:40 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 16:33:40 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:33:40 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 16:33:40 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 16:33:40 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 16:33:40 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:33:41 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 16:33:41 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 16:33:41 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 16:33:41 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 16:33:41 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 16:33:41 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:33:41 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 16:33:41 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 16:33:41 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:33:41 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:33:41 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:33:41 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 16:33:41 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:33:41 | 耗时 2 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:33:44 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 16:33:44 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 16:33:44 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 16:33:44 | 耗时 2 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:33:45 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 16:33:45 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:33:45 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 16:33:45 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 16:33:45 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 16:33:45 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:33:47 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 16:33:47 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 16:33:47 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 16:33:47 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 16:33:47 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 16:33:47 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:33:48 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 16:33:48 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 16:33:48 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:33:48 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:33:48 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:33:48 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 16:33:48 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:33:48 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:33:56 INFO  http-nio-8080-exec-4 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 16:33:56 INFO  http-nio-8080-exec-4 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 85ms. Found 0 Redis repository interfaces.
2020-04-03 16:33:56 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 16:33:56 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 16:33:56 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 16:33:56 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:33:58 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 16:33:58 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:33:58 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 16:33:58 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 16:33:58 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 16:33:58 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:34:19 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 16:34:19 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 16:34:19 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 16:34:19 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 16:34:19 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 16:34:19 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:34:20 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 16:34:20 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 16:34:20 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 16:34:20 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:34:20 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 16:34:20 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 16:34:20 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 16:34:20 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:34:27 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:34:27 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'ssssss';
2020-04-03 16:34:30 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:34:30 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'ssssss';
2020-04-03 16:34:40 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 16:34:40 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'ssssss';
2020-04-03 16:34:52 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 16:34:52 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'ssssss';
2020-04-03 16:34:57 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 16:34:57 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 16:34:57 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 16:34:57 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:35:00 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:35:00 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 16:35:00 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:35:00 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:35:00 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:35:00 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 16:35:00 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:35:00 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:35:01 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 16:35:01 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:35:01 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 16:35:01 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 16:35:01 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 16:35:01 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:54:39 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 115992 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-03 16:54:39 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-03 16:54:39 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-03 16:54:39 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-03 16:54:42 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-03 16:54:42 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 16:54:42 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 205ms. Found 0 Redis repository interfaces.
2020-04-03 16:54:43 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:54:43 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$72d2de12] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:54:43 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:54:43 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:54:43 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$caf66dc2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:54:43 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$ed1023ca] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:54:43 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:54:43 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$143f22be] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:54:43 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:54:43 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$470cd9db] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:54:43 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:54:43 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:54:43 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-03 16:54:43 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-03 16:54:44 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-03 16:54:44 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-03 16:54:44 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-03 16:54:44 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-03 16:54:44 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-03 16:54:44 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-03 16:54:44 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:54:44 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:54:44 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:54:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:54:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:54:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:54:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:54:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:54:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:54:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:54:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:54:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:54:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:54:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:54:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:54:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:54:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:54:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:54:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:54:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:54:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:54:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:54:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:54:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:54:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 16:54:46 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-03 16:54:46 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-03 16:54:46 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-03 16:54:46 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-03 16:54:46 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-03 16:54:46 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 6515 ms
2020-04-03 16:54:49 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-03 16:54:49 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-03 16:54:49 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-03 16:54:49 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-03 16:54:49 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-03 16:54:49 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-03 16:54:49 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-03 16:54:49 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585904089511'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-03 16:54:49 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-03 16:54:49 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-03 16:54:49 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@7ff167c4
2020-04-03 16:54:49 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-03 16:54:49 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-03 16:54:50 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-03 16:54:50 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-03 16:54:50 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-03 16:54:51 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-03 16:54:51 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-03 16:54:51 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-03 16:54:51 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-03 16:54:51 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-03 16:54:51 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-03 16:54:51 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-03 16:54:51 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-03 16:54:51 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-03 16:54:51 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-03 16:54:51 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-03 16:54:51 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-03 16:54:51 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-03 16:54:51 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-03 16:54:51 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAvailableUsingGET_1
2020-04-03 16:54:51 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-03 16:54:51 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-03 16:54:51 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-03 16:54:51 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-03 16:54:51 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-03 16:54:51 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-03 16:54:51 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 13.308 seconds (JVM running for 18.418)
2020-04-03 16:54:52 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-03 16:54:52 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-03 16:54:52 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-03 16:54:52 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-03 16:54:52 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-03 16:54:52 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-03 16:54:52 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-03 16:54:52 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-03 16:54:52 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-03 16:54:52 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585902418051"'s failed in-progress jobs.
2020-04-03 16:54:52 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585904089511 started.
2020-04-03 16:54:53 INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-03 16:54:53 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-03 16:54:53 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 20 ms
2020-04-03 16:54:53 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-03 16:54:59 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 16:54:59 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:55:00 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 16:55:00 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T16:55:00.035+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-03 16:55:00 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 16:55:00 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 16:55:00 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 16:55:00 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 16:55:00 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 16:55:00 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:55:01 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 16:55:01 | 耗时 6 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 16:55:01 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:55:01 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T16:55:01.301+0800' WHERE (USERNAME = 'ccc');
2020-04-03 16:55:01 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:55:01 | 耗时 14 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 16:55:01 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:55:01 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 16:55:01 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:55:01 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 16:55:01 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:55:01 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 16:55:01 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:55:01 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-03 16:55:02 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 16:55:02 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:55:02 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 16:55:02 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 16:55:02 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 16:55:02 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:55:04 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 16:55:04 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'ssssss';
2020-04-03 16:55:07 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 16:55:07 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'ssssss';
2020-04-03 16:56:28 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 16:56:28 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 16:56:28 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 16:56:28 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 16:56:28 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 16:56:28 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:56:29 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 16:56:29 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 16:56:29 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:56:29 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:56:29 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:56:29 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 16:56:29 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:56:29 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:56:30 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:56:30 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'ssssss';
2020-04-03 16:56:58 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 16:56:58 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 16:56:58 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 16:56:58 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 16:56:58 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 16:56:58 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:56:58 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:56:58 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 16:56:59 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 16:56:59 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:56:59 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 16:56:59 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 16:56:59 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 16:56:59 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:56:59 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 16:56:59 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 16:56:59 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 16:56:59 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 16:56:59 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 16:56:59 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:57:00 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 16:57:00 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 16:57:00 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:57:00 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:57:00 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:57:00 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 16:57:00 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:57:00 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:57:01 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 16:57:01 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'ssssss';
2020-04-03 16:57:03 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 16:57:03 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'ssssss';
2020-04-03 16:57:07 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 16:57:07 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'ssssss';
2020-04-03 16:57:21 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 16:57:21 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 16:57:21 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 16:57:21 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 16:57:21 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 16:57:21 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:57:21 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 16:57:21 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 16:57:21 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 16:57:21 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:57:21 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 16:57:21 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 16:57:21 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 16:57:21 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:57:23 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:57:23 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'ssssss';
2020-04-03 16:58:06 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 16:58:06 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 16:58:06 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 16:58:06 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 16:58:06 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 16:58:06 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:58:06 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 16:58:06 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 16:58:06 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 16:58:06 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 16:58:06 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 16:58:06 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 16:58:06 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 16:58:06 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 16:58:07 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 16:58:07 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'ssssss';
2020-04-03 17:00:23 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:00:23 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:00:23 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:00:23 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:00:23 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:00:23 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:00:24 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:00:24 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:00:24 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 17:00:24 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:00:24 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 17:00:24 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 17:00:24 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 17:00:24 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:00:24 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:00:24 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:00:24 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:00:24 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:00:24 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:00:24 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:00:25 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 17:00:25 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:00:25 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:00:25 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:00:25 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:00:25 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 17:00:25 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:00:25 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:00:26 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:00:26 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:00:26 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:00:26 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:00:28 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 17:00:28 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 17:01:08 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585904089511 paused.
2020-04-03 17:01:08 INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-03 17:01:08 INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-04-03 17:01:08 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585904089511 shutting down.
2020-04-03 17:01:08 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585904089511 paused.
2020-04-03 17:01:08 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585904089511 shutdown complete.
2020-04-03 17:01:08 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-04-03 17:01:08 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-04-03 17:01:08 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-04-03 17:01:08 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-04-03 17:01:08 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-04-03 17:01:08 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-04-03 17:01:23 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 110604 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-03 17:01:23 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-03 17:01:23 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-03 17:01:23 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-03 17:01:25 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-03 17:01:25 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 17:01:26 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 194ms. Found 0 Redis repository interfaces.
2020-04-03 17:01:27 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:01:27 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$62fbddfc] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:01:27 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:01:27 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:01:27 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$bb1f6dac] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:01:27 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$dd3923b4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:01:27 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:01:27 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$46822a8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:01:27 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:01:27 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$3735d9c5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:01:27 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:01:27 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:01:27 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-03 17:01:27 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-03 17:01:27 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-03 17:01:27 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-03 17:01:27 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-03 17:01:27 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-03 17:01:27 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-03 17:01:27 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-03 17:01:27 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:01:27 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:01:27 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:01:28 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:01:28 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:01:28 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:01:28 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:01:28 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:01:28 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:01:28 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:01:28 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:01:28 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:01:28 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:01:28 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:01:28 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:01:28 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:01:28 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:01:28 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:01:28 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:01:28 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:01:28 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:01:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:01:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:01:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:01:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:01:29 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-03 17:01:29 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-03 17:01:29 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-03 17:01:29 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-03 17:01:29 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-03 17:01:29 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 6432 ms
2020-04-03 17:01:32 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-03 17:01:32 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-03 17:01:32 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-03 17:01:32 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-03 17:01:32 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-03 17:01:32 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-03 17:01:32 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-03 17:01:32 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585904492804'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-03 17:01:32 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-03 17:01:32 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-03 17:01:32 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@5837b801
2020-04-03 17:01:33 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-03 17:01:33 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-03 17:01:33 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-03 17:01:34 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-03 17:01:34 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-03 17:01:34 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-03 17:01:34 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-03 17:01:34 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-03 17:01:34 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-03 17:01:34 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-03 17:01:34 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-03 17:01:34 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-03 17:01:34 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-03 17:01:34 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-03 17:01:34 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-03 17:01:34 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-03 17:01:34 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-03 17:01:34 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-03 17:01:34 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAvailableUsingGET_1
2020-04-03 17:01:34 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-03 17:01:34 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-03 17:01:34 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-03 17:01:34 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-03 17:01:34 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-03 17:01:34 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-03 17:01:34 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-03 17:01:34 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 12.786 seconds (JVM running for 18.092)
2020-04-03 17:01:35 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-03 17:01:35 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-03 17:01:35 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-03 17:01:35 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-03 17:01:35 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-03 17:01:35 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-03 17:01:35 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-03 17:01:35 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-03 17:01:35 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-03 17:01:35 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585904089511"'s failed in-progress jobs.
2020-04-03 17:01:35 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585904492804 started.
2020-04-03 17:01:37 INFO  RMI TCP Connection(2)-192.168.80.1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-03 17:01:37 INFO  RMI TCP Connection(2)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-03 17:01:37 INFO  RMI TCP Connection(2)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 25 ms
2020-04-03 17:01:37 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-03 17:01:48 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:01:48 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:01:48 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:01:48 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T17:01:48.920+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-03 17:01:49 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:01:49 | 耗时 3 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:01:49 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:01:49 | 耗时 6 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:01:49 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:01:49 | 耗时 6 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:01:50 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:01:50 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:01:50 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:01:50 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T17:01:50.316+0800' WHERE (USERNAME = 'ccc');
2020-04-03 17:01:50 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:01:50 | 耗时 2 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 17:01:50 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:01:50 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 17:01:50 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:01:50 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 17:01:50 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:01:50 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 17:01:50 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:01:50 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-03 17:01:52 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 17:01:52 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:01:52 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 17:01:52 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:01:53 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:01:53 | 耗时 2 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 17:02:09 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 17:02:09 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:02:09 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 17:02:09 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:02:09 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 17:02:09 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:02:09 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:02:09 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:02:09 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:02:09 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:02:09 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:02:09 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:02:11 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:02:11 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 17:02:15 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 17:02:15 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-03 17:02:58 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:02:58 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:02:58 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:02:58 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:02:58 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:02:58 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:02:59 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:02:59 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:02:59 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:02:59 | 耗时 3 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:02:59 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:02:59 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:02:59 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 17:02:59 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:02:59 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 17:02:59 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:03:04 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:03:04 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 17:04:05 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 17:04:05 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:04:05 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 17:04:05 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:04:05 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 17:04:05 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:04:06 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 17:04:06 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:04:06 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:04:06 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:04:06 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:04:06 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:04:08 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:04:08 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 17:05:29 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:05:29 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:05:29 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:05:29 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:05:29 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:05:29 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:05:29 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 17:05:29 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:05:29 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 17:05:29 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:05:29 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 17:05:29 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:05:30 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:05:30 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 17:05:30 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:05:30 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:05:31 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:05:31 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chencheng';
2020-04-03 17:05:34 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:05:34 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'chencheng' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:05:34 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:05:34 | 耗时 1 ms | SQL 语句：
UPDATE t_park SET OWNER = 0, MOBILE = '15623041759', DESCRIPTION = '测试数据111', MODIFYTIME = '2020-04-03T17:05:34.706+0800', PRICE = 4.0, PLACE = '武汉市', SPAN = 'GTR 32', USERNAME = 'chencheng' WHERE ID = 16;
2020-04-03 17:05:34 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:05:34 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 17:05:34 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:05:34 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:05:37 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 17:05:37 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chencheng';
2020-04-03 17:05:41 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 17:05:41 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:05:41 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 17:05:41 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:05:43 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:05:43 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 17:10:50 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:10:50 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:10:50 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:10:50 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:10:50 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:10:50 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:10:51 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 17:10:51 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:10:51 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:10:51 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:10:51 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:10:51 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:10:52 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:10:52 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:10:52 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:10:52 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:10:52 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:10:52 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:10:53 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:10:53 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:10:53 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 17:10:53 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:10:53 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 17:10:53 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:10:57 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:10:57 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:10:57 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:10:57 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:10:57 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:10:57 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:11:06 INFO  http-nio-8080-exec-9 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 17:11:07 INFO  http-nio-8080-exec-9 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 81ms. Found 0 Redis repository interfaces.
2020-04-03 17:11:08 INFO  http-nio-8080-exec-9 org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-03 17:11:08 INFO  http-nio-8080-exec-9 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 17:11:08 INFO  http-nio-8080-exec-9 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 220ms. Found 0 Redis repository interfaces.
2020-04-03 17:11:09 INFO  http-nio-8080-exec-9 springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-03 17:11:47 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 17:11:47 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:11:47 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 17:11:47 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:11:49 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:11:49 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 17:14:23 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 17:14:23 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:14:23 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 17:14:23 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:14:23 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 17:14:23 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:14:24 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:14:24 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:14:28 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:14:28 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:14:28 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:14:28 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:16:58 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:16:58 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:16:58 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:16:58 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:16:58 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:16:58 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:16:59 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 17:16:59 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:16:59 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:16:59 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:16:59 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:16:59 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:17:00 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:17:00 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:17:00 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:17:00 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:17:00 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:17:00 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:17:00 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 17:17:00 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:17:00 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:17:00 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:17:00 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:17:00 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:17:02 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 17:17:02 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 17:17:24 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:17:24 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:17:24 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:17:24 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:17:24 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:17:24 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:17:25 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 17:17:25 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:17:25 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:17:25 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:17:25 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:17:25 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:17:25 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:17:25 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:17:25 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:17:25 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:17:25 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:17:25 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:17:26 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:17:26 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:17:26 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:17:26 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:17:26 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:17:26 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:17:27 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 17:17:27 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 17:19:35 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:19:35 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:19:35 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:19:35 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:19:35 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:19:35 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:19:36 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 17:19:36 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:19:36 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 17:19:36 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:19:36 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 17:19:36 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:19:38 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:19:38 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:19:38 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:19:38 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:19:38 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:19:38 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:19:39 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:19:39 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:19:39 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 17:19:39 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:19:39 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 17:19:39 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:19:39 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 17:19:39 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 17:20:34 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 17:20:34 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 17:20:48 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 17:20:48 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 17:23:00 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:23:00 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:23:00 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:23:00 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:23:00 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:23:00 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:23:00 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:23:00 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:23:00 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:23:00 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:23:00 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:23:00 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:23:02 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:23:02 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 17:23:24 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:23:24 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 17:23:30 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 17:23:30 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chencheng';
2020-04-03 17:23:54 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:23:54 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 17:23:54 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:23:54 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:23:55 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 17:23:55 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:23:55 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 17:23:55 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:23:56 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:23:56 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 17:23:56 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:23:56 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:23:57 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:23:57 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:23:57 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:23:57 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:25:06 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:25:06 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:25:06 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:25:06 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:25:06 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:25:06 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:25:07 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 17:25:07 | 耗时 5 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:25:07 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:25:07 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:25:07 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:25:07 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:25:09 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:25:09 | 耗时 3 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:25:09 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:25:09 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:25:09 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:25:09 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:25:10 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:25:10 | 耗时 8 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:25:10 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 17:25:10 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:25:10 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 17:25:10 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:25:12 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:25:12 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 17:25:23 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 17:25:23 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 17:25:26 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:25:26 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 17:25:29 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:25:29 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:25:29 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:25:29 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:25:29 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:25:29 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:25:29 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:25:29 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:25:29 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:25:29 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:25:29 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:25:29 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:25:31 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 17:25:31 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 17:26:04 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:26:04 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 17:26:04 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:26:04 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:26:06 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:26:06 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chencheng';
2020-04-03 17:26:09 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:26:09 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'chencheng' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:26:09 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 17:26:09 | 耗时 2 ms | SQL 语句：
UPDATE t_park SET OWNER = 0, MOBILE = '15623041759', DESCRIPTION = '测试数据11111111', MODIFYTIME = '2020-04-03T17:26:09.617+0800', PRICE = 4.0, PLACE = '武汉市', SPAN = 'GTR 32', USERNAME = 'chencheng' WHERE ID = 16;
2020-04-03 17:26:09 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:26:09 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 17:26:09 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:26:09 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:30:24 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:30:24 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:30:24 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:30:24 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:30:24 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:30:24 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:30:25 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 17:30:25 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:30:25 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 17:30:25 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 17:30:25 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 17:30:25 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:30:29 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 17:30:29 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:30:29 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 17:30:29 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:30:29 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 17:30:29 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:30:30 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 17:30:30 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:30:30 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:30:30 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 17:30:30 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:30:30 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:30:31 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:30:31 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:30:31 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:30:31 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:30:34 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:30:34 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 17:30:40 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 17:30:40 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:30:40 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 17:30:40 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:30:40 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 17:30:40 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:30:41 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:30:41 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:30:41 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:30:41 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:30:41 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:30:41 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:30:41 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:30:41 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:30:41 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:30:41 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:30:41 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:30:41 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:30:42 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:30:42 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:30:42 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:30:42 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:30:42 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:30:42 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:30:43 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 17:30:43 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 17:31:26 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:31:26 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:31:26 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:31:26 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:31:26 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:31:26 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:31:26 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 17:31:26 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:31:26 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:31:26 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:31:26 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:31:26 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:31:29 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:31:29 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 17:31:45 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 17:31:45 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:31:45 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 17:31:45 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 17:31:45 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 17:31:45 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:31:57 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:31:57 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:31:57 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:31:57 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:31:57 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:31:57 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:31:57 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:31:57 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:31:57 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:31:57 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:31:57 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:31:57 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 17:31:57 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:31:57 | 耗时 2 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:31:57 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 17:31:57 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:31:57 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 17:31:57 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:31:57 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 17:31:57 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:31:58 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 17:31:58 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:31:58 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:31:58 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:31:58 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:31:58 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 17:31:58 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:31:58 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:31:59 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:31:59 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:31:59 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:31:59 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:31:59 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:31:59 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:31:59 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 17:31:59 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:31:59 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:31:59 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:31:59 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:31:59 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 17:31:59 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:31:59 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:32:01 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 17:32:01 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'ssssss';
2020-04-03 17:32:06 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:32:06 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:32:06 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:32:06 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:32:07 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 17:32:07 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原拓海';
2020-04-03 17:32:23 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:32:23 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (PLACE = '巴音布鲁克' AND REVIEW = '1');
2020-04-03 17:32:23 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:32:23 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (PLACE = '巴音布鲁克' AND REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:32:23 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 17:32:23 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (PLACE = '巴音布鲁克' AND REVIEW = '1');
2020-04-03 17:32:23 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 17:32:23 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (PLACE = '巴音布鲁克' AND REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:32:27 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:32:27 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:32:27 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:32:27 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:32:28 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:32:28 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 17:32:53 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 17:32:53 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 17:32:57 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 17:32:57 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 17:33:57 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:33:57 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:33:57 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:33:57 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:33:57 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:33:57 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:33:58 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 17:33:58 | 耗时 5 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:33:58 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:33:58 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:33:58 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:33:58 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:33:58 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:33:58 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:33:58 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:33:58 | 耗时 7 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:33:59 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 17:33:59 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 17:34:30 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 17:34:30 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:34:30 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 17:34:30 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 17:34:30 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 17:34:30 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:34:32 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:34:32 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:34:32 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:34:32 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:34:32 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:34:32 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:34:33 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 17:34:33 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:34:33 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:34:33 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:34:33 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:34:33 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 17:34:33 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:34:33 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:34:35 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 17:34:35 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chencheng';
2020-04-03 17:34:48 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585904492804 paused.
2020-04-03 17:34:48 INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-03 17:34:48 INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-04-03 17:34:48 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585904492804 shutting down.
2020-04-03 17:34:48 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585904492804 paused.
2020-04-03 17:34:48 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585904492804 shutdown complete.
2020-04-03 17:34:48 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-04-03 17:34:48 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-04-03 17:34:48 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-04-03 17:34:48 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-04-03 17:34:48 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-04-03 17:34:48 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-04-03 17:35:43 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 113580 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-03 17:35:43 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-03 17:35:43 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-03 17:35:43 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-03 17:35:45 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-03 17:35:45 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 17:35:45 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 159ms. Found 0 Redis repository interfaces.
2020-04-03 17:35:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:35:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$c675712c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:35:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:35:46 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:35:47 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$1e9900dc] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:35:47 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$40b2b6e4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:35:47 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:35:47 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$67e1b5d8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:35:47 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:35:47 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$9aaf6cf5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:35:47 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:35:47 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:35:47 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-03 17:35:47 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-03 17:35:47 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-03 17:35:47 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-03 17:35:47 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-03 17:35:47 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-03 17:35:47 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-03 17:35:47 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-03 17:35:47 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:35:47 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:35:47 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:35:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:35:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:35:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:35:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:35:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:35:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:35:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:35:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:35:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:35:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:35:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:35:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:35:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:35:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:35:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:35:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:35:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:35:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:35:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:35:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:35:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:35:48 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:35:49 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-03 17:35:49 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-03 17:35:49 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-03 17:35:49 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-03 17:35:49 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-03 17:35:49 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 6088 ms
2020-04-03 17:35:52 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-03 17:35:52 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-03 17:35:52 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-03 17:35:52 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-03 17:35:52 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-03 17:35:52 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-03 17:35:52 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-03 17:35:52 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585906552715'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-03 17:35:52 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-03 17:35:52 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-03 17:35:52 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@40085ab3
2020-04-03 17:35:53 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-03 17:35:53 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-03 17:35:53 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-03 17:35:54 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-03 17:35:54 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-03 17:35:54 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-03 17:35:54 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-03 17:35:54 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-03 17:35:54 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-03 17:35:54 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-03 17:35:54 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-03 17:35:54 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-03 17:35:54 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-03 17:35:54 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-03 17:35:54 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-03 17:35:54 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-03 17:35:54 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-03 17:35:54 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-03 17:35:54 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAvailableUsingGET_1
2020-04-03 17:35:54 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-03 17:35:54 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-03 17:35:54 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-03 17:35:54 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-03 17:35:55 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-03 17:35:55 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-03 17:35:55 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-03 17:35:55 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 12.936 seconds (JVM running for 18.52)
2020-04-03 17:35:55 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-03 17:35:55 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-03 17:35:56 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-03 17:35:56 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-03 17:35:56 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585904492804"'s failed in-progress jobs.
2020-04-03 17:35:56 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585906552715 started.
2020-04-03 17:35:56 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-03 17:35:56 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-03 17:35:56 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-03 17:35:56 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-03 17:35:56 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-03 17:35:56 INFO  RMI TCP Connection(5)-192.168.80.1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-03 17:35:56 INFO  RMI TCP Connection(5)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-03 17:35:56 INFO  RMI TCP Connection(5)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 23 ms
2020-04-03 17:35:57 INFO  http-nio-8080-exec-4 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-03 17:36:31 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:36:31 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:36:31 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:36:31 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T17:36:31.420+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-03 17:36:31 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:36:31 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:36:31 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:36:31 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:36:31 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:36:31 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:36:32 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 17:36:32 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:36:32 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 17:36:32 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T17:36:32.302+0800' WHERE (USERNAME = 'ccc');
2020-04-03 17:36:32 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 17:36:32 | 耗时 5 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 17:36:32 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 17:36:32 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 17:36:32 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 17:36:32 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 17:36:32 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 17:36:32 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 17:36:32 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 17:36:32 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-03 17:36:58 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 17:36:58 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:36:58 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 17:36:58 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:36:59 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:36:59 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 17:37:14 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:37:14 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 17:37:59 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:37:59 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 17:37:59 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:37:59 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:38:01 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 17:38:01 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chencheng';
2020-04-03 17:38:05 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:38:05 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'chencheng' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:38:05 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:38:05 | 耗时 2 ms | SQL 语句：
UPDATE t_park SET OWNER = 0, MOBILE = '15623041759', DESCRIPTION = '测试数据11111111ddd', MODIFYTIME = '2020-04-03T17:38:05.165+0800', PRICE = 4.0, PLACE = '武汉市', SPAN = 'GTR 32', USERNAME = 'chencheng' WHERE ID = 16;
2020-04-03 17:38:05 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:38:05 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 17:38:05 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:38:05 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:38:57 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:38:57 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:38:57 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:38:57 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:38:57 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:38:57 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:38:58 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 17:38:58 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:38:58 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:38:58 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 17:38:58 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:38:58 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:39:00 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:39:00 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chencheng';
2020-04-03 17:39:02 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 17:39:02 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:39:02 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 17:39:02 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:39:04 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:39:04 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 17:42:13 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:42:13 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:42:13 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:42:13 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:42:13 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:42:13 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:42:13 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:42:13 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:42:13 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:42:13 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:42:13 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:42:13 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:42:14 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:42:14 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:42:14 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:42:14 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:42:14 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:42:14 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:42:15 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 17:42:15 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:42:17 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:42:17 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:42:17 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:42:17 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:42:17 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:42:17 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:42:17 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:42:17 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:42:49 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:42:49 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:42:49 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:42:49 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:42:49 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:42:49 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:42:50 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:42:50 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:42:51 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 17:42:51 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:42:51 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 17:42:51 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:42:51 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 17:42:51 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:42:51 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:42:51 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:42:53 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:42:53 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:42:53 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:42:53 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:42:53 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:42:53 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:42:54 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 17:42:54 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:42:54 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:42:54 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:42:54 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:42:54 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:42:56 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:42:56 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 17:43:00 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:43:00 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 17:43:15 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 17:43:15 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (PLACE = '湖北' AND REVIEW = '1');
2020-04-03 17:43:15 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 17:43:15 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (PLACE = '湖北' AND REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:43:15 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 17:43:15 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (PLACE = '湖北' AND REVIEW = '1');
2020-04-03 17:43:15 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 17:43:15 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (PLACE = '湖北' AND REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:43:16 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:43:16 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:43:16 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:43:16 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:43:37 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:43:37 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 17:44:01 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 17:44:01 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:44:01 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 17:44:01 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:44:01 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 17:44:01 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:44:01 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 17:44:01 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:44:02 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:44:02 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:44:02 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:44:02 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:44:03 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:44:03 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:44:03 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:44:03 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:44:03 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 17:44:03 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:44:04 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:44:04 | 耗时 6 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:44:04 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 17:44:04 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:44:04 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 17:44:04 | 耗时 2 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:44:06 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 17:44:06 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 17:46:07 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 17:46:07 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:46:07 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 17:46:07 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:46:07 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 17:46:07 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:46:08 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:46:08 | 耗时 6 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:46:08 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 17:46:08 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:46:08 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 17:46:08 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:46:10 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:46:10 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:46:10 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:46:10 | 耗时 4 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:46:10 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:46:10 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:46:11 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 17:46:11 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:46:11 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:46:11 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:46:11 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:46:11 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:46:11 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:46:11 | 耗时 3 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 17:46:58 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585906552715 paused.
2020-04-03 17:46:58 INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-03 17:46:58 INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-04-03 17:46:58 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585906552715 shutting down.
2020-04-03 17:46:58 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585906552715 paused.
2020-04-03 17:46:58 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585906552715 shutdown complete.
2020-04-03 17:46:59 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-04-03 17:46:59 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-04-03 17:46:59 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-04-03 17:46:59 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-04-03 17:46:59 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-04-03 17:46:59 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-04-03 17:59:20 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 118796 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-03 17:59:20 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-03 17:59:20 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-03 17:59:20 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-03 17:59:23 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-03 17:59:23 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 17:59:23 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 184ms. Found 0 Redis repository interfaces.
2020-04-03 17:59:24 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:59:24 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$f53d44ec] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:59:24 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:59:24 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:59:24 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$4d60d49c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:59:24 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$6f7a8aa4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:59:24 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:59:24 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$96a98998] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:59:24 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:59:24 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$c97740b5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:59:24 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:59:24 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:59:24 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-03 17:59:24 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-03 17:59:25 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-03 17:59:25 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-03 17:59:25 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-03 17:59:25 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-03 17:59:25 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-03 17:59:25 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-03 17:59:25 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:59:25 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:59:25 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:59:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:59:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:59:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:59:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:59:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:59:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:59:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:59:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:59:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:59:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:59:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:59:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:59:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:59:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:59:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:59:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:59:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:59:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:59:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:59:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:59:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:59:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 17:59:27 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-03 17:59:27 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-03 17:59:27 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-03 17:59:27 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-03 17:59:27 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-03 17:59:27 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 6899 ms
2020-04-03 17:59:30 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-03 17:59:30 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-03 17:59:30 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-03 17:59:30 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-03 17:59:30 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-03 17:59:30 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-03 17:59:30 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-03 17:59:30 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585907970476'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-03 17:59:30 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-03 17:59:30 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-03 17:59:30 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@39fcbb42
2020-04-03 17:59:30 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-03 17:59:30 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-03 17:59:30 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-03 17:59:31 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-03 17:59:31 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-03 17:59:32 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-03 17:59:32 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-03 17:59:32 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-03 17:59:32 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-03 17:59:32 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-03 17:59:32 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-03 17:59:32 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-03 17:59:32 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-03 17:59:32 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-03 17:59:32 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-03 17:59:32 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-03 17:59:32 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-03 17:59:32 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-03 17:59:32 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-03 17:59:32 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-03 17:59:32 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-03 17:59:32 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-03 17:59:32 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAvailableUsingGET_1
2020-04-03 17:59:32 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-03 17:59:32 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-03 17:59:32 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-03 17:59:32 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 13.533 seconds (JVM running for 18.484)
2020-04-03 17:59:33 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-03 17:59:33 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-03 17:59:33 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-03 17:59:33 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-03 17:59:33 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-03 17:59:33 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-03 17:59:33 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-03 17:59:33 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-03 17:59:33 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-03 17:59:33 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585906552715"'s failed in-progress jobs.
2020-04-03 17:59:33 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585907970476 started.
2020-04-03 17:59:34 INFO  RMI TCP Connection(7)-192.168.80.1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-03 17:59:34 INFO  RMI TCP Connection(7)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-03 17:59:34 INFO  RMI TCP Connection(7)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 24 ms
2020-04-03 17:59:34 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-03 17:59:43 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 17:59:43 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:59:43 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 17:59:43 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T17:59:43.138+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-03 17:59:43 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:59:43 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 17:59:43 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:59:43 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 17:59:43 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:59:43 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:59:44 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 17:59:44 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 17:59:44 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 17:59:44 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T17:59:44.358+0800' WHERE (USERNAME = 'ccc');
2020-04-03 17:59:44 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 17:59:44 | 耗时 5 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 17:59:44 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 17:59:44 | 耗时 2 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 17:59:44 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 17:59:44 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 17:59:44 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 17:59:44 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 17:59:44 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 17:59:44 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-03 17:59:45 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:59:45 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 17:59:45 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 17:59:45 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:59:47 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 17:59:47 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chencheng';
2020-04-03 17:59:50 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 17:59:50 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'chencheng' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 17:59:50 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 17:59:50 | 耗时 2 ms | SQL 语句：
UPDATE t_park SET OWNER = 0, MOBILE = '15623041759', DESCRIPTION = '测试数据11111111ddddff ', MODIFYTIME = '2020-04-03T17:59:50.563+0800', PRICE = 4.0, PLACE = '武汉市', SPAN = 'GTR 32', USERNAME = 'chencheng' WHERE ID = 16;
2020-04-03 17:59:50 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:59:50 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 17:59:50 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 17:59:50 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:59:51 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:59:51 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 17:59:51 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 17:59:51 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 17:59:52 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 17:59:52 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 18:00:01 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:00:01 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:00:01 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:00:01 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 18:00:01 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:00:01 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:00:03 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:00:03 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'ssssss';
2020-04-03 18:00:10 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:00:10 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'aaaaaa';
2020-04-03 18:00:56 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 18:00:56 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'ssssss';
2020-04-03 18:02:15 INFO  File Watcher org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 18:02:15 INFO  File Watcher org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 124ms. Found 0 Redis repository interfaces.
2020-04-03 18:03:33 INFO  http-nio-8080-exec-4 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 18:03:34 INFO  http-nio-8080-exec-4 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 70ms. Found 0 Redis repository interfaces.
2020-04-03 18:03:35 INFO  http-nio-8080-exec-4 org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-03 18:03:35 INFO  http-nio-8080-exec-4 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 18:03:35 INFO  http-nio-8080-exec-4 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 389ms. Found 0 Redis repository interfaces.
2020-04-03 18:03:36 INFO  http-nio-8080-exec-4 springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-03 18:03:36 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:03:36 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:03:36 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:03:36 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:03:36 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:03:36 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:03:36 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:03:36 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:03:39 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:03:39 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:03:39 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:03:39 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:03:39 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:03:39 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:03:39 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 18:03:39 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:03:58 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:03:58 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:03:58 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:03:58 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T18:03:58.379+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-03 18:03:58 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:03:58 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:03:58 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:03:58 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:03:58 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:03:58 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:03:58 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:03:58 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:03:59 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:03:59 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T18:03:59.017+0800' WHERE (USERNAME = 'ccc');
2020-04-03 18:03:59 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:03:59 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 18:03:59 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:03:59 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 18:03:59 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:03:59 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 18:03:59 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:03:59 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 18:03:59 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:03:59 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-03 18:04:00 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:04:00 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:04:00 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:04:00 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:04:00 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:04:00 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:04:00 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:04:00 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 18:04:00 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:04:00 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:04:01 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:04:01 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:04:01 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:04:01 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:04:03 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:04:03 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 18:04:48 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585907970476 paused.
2020-04-03 18:04:48 INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-03 18:04:48 INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-04-03 18:04:48 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585907970476 shutting down.
2020-04-03 18:04:48 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585907970476 paused.
2020-04-03 18:04:48 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585907970476 shutdown complete.
2020-04-03 18:04:48 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-04-03 18:04:48 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-04-03 18:04:48 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-04-03 18:04:48 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-04-03 18:04:48 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-04-03 18:04:48 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-04-03 18:10:38 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 96832 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-03 18:10:38 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-03 18:10:38 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-03 18:10:38 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-03 18:10:41 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-03 18:10:41 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 18:10:41 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 195ms. Found 0 Redis repository interfaces.
2020-04-03 18:10:43 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:10:43 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$19cfcf93] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:10:43 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:10:43 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:10:43 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$71f35f43] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:10:43 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$940d154b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:10:43 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:10:43 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$bb3c143f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:10:43 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:10:43 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$ee09cb5c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:10:43 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:10:43 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:10:43 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-03 18:10:43 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-03 18:10:43 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-03 18:10:43 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-03 18:10:43 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-03 18:10:43 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-03 18:10:43 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-03 18:10:43 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-03 18:10:43 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:10:43 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:10:43 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:10:44 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:10:44 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:10:44 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:10:44 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:10:44 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:10:44 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:10:44 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:10:44 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:10:44 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:10:44 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:10:44 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:10:44 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:10:44 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:10:44 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:10:44 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:10:44 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:10:44 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:10:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:10:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:10:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:10:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:10:45 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:10:45 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-03 18:10:45 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-03 18:10:45 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-03 18:10:45 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-03 18:10:45 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-03 18:10:45 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 7027 ms
2020-04-03 18:10:48 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-03 18:10:48 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-03 18:10:48 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-03 18:10:48 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-03 18:10:48 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-03 18:10:48 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-03 18:10:48 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-03 18:10:48 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585908648858'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-03 18:10:48 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-03 18:10:48 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-03 18:10:48 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@503e1cd9
2020-04-03 18:10:49 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-03 18:10:49 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-03 18:10:49 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-03 18:10:50 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-03 18:10:50 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-03 18:10:50 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-03 18:10:50 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-03 18:10:50 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-03 18:10:50 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-03 18:10:50 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-03 18:10:50 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-03 18:10:50 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-03 18:10:50 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-03 18:10:50 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-03 18:10:50 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-03 18:10:50 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-03 18:10:50 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-03 18:10:50 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-03 18:10:50 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-03 18:10:50 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAvailableUsingGET_1
2020-04-03 18:10:50 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-03 18:10:50 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-03 18:10:50 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-03 18:10:50 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-03 18:10:50 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-03 18:10:51 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-03 18:10:51 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 13.877 seconds (JVM running for 19.947)
2020-04-03 18:10:51 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-03 18:10:51 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-03 18:10:51 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-03 18:10:51 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-03 18:10:51 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-03 18:10:51 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-03 18:10:51 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-03 18:10:51 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-03 18:10:52 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-03 18:10:52 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585907970476"'s failed in-progress jobs.
2020-04-03 18:10:52 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585908648858 started.
2020-04-03 18:10:52 INFO  RMI TCP Connection(9)-192.168.80.1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-03 18:10:52 INFO  RMI TCP Connection(9)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-03 18:10:52 INFO  RMI TCP Connection(9)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 25 ms
2020-04-03 18:10:52 INFO  http-nio-8080-exec-2 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-03 18:11:01 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:11:01 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:11:01 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:11:01 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T18:11:01.116+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-03 18:11:01 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:11:01 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:11:01 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:11:01 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:11:01 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:11:01 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:11:01 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 18:11:01 | 耗时 5 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:11:02 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:11:02 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T18:11:02.101+0800' WHERE (USERNAME = 'ccc');
2020-04-03 18:11:02 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:11:02 | 耗时 7 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 18:11:02 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:11:02 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 18:11:02 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:11:02 | 耗时 2 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 18:11:02 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:11:02 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 18:11:02 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:11:02 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-03 18:11:03 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:11:03 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:11:03 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:11:03 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:11:04 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:11:04 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 18:11:10 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:11:10 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 18:11:10 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:11:10 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:11:11 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:11:11 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chencheng';
2020-04-03 18:11:14 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:11:14 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'chencheng' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:11:14 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:11:14 | 耗时 2 ms | SQL 语句：
UPDATE t_park SET OWNER = 0, MOBILE = '15623041759', DESCRIPTION = '测试数据11111111ddddff ddd', MODIFYTIME = '2020-04-03T18:11:14.409+0800', PRICE = 4.0, PLACE = '武汉市', SPAN = 'GTR 32', USERNAME = 'chencheng' WHERE ID = 16;
2020-04-03 18:11:14 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:11:14 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 18:11:14 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:11:14 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:11:32 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:11:32 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:11:32 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:11:32 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:11:32 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:11:32 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:11:33 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:11:33 | 耗时 5 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:11:33 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:11:33 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 18:11:33 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:11:33 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:11:33 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:11:33 | 耗时 6 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:11:33 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:11:33 | 耗时 8 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:11:33 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:11:33 | 耗时 6 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:11:34 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:11:34 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:11:34 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:11:34 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 18:11:34 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:11:34 | 耗时 2 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:11:35 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:11:35 | 耗时 5 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chencheng';
2020-04-03 18:11:36 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:11:36 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'chencheng' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:11:37 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:11:37 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'chencheng' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:11:37 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:11:37 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'chencheng' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:11:37 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:11:37 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'chencheng' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:11:38 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:11:38 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'chencheng' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:11:38 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:11:38 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'chencheng' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:11:38 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:11:38 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'chencheng' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:11:38 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:11:38 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'chencheng' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:11:38 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:11:38 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'chencheng' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:11:38 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:11:38 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'chencheng' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:11:39 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:11:39 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'chencheng' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:11:39 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:11:39 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'chencheng' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:11:39 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:11:39 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'chencheng' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:11:39 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:11:39 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'chencheng' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:11:39 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:11:39 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'chencheng' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:11:54 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:11:54 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:11:54 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:11:54 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:11:54 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:11:54 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:11:54 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:11:54 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:11:54 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:11:54 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 18:11:54 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:11:54 | 耗时 2 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:11:55 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:11:55 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:11:55 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:11:55 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:11:55 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:11:55 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:11:55 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:11:55 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:11:55 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:11:55 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 18:11:55 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:11:55 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:11:57 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:11:57 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:11:57 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:11:57 | 耗时 2 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:11:58 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:11:58 | 耗时 4 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 18:13:12 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:13:12 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:13:12 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:13:12 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:13:12 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:13:12 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:13:13 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:13:13 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:13:13 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:13:13 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:13:13 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:13:13 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:13:13 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:13:13 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:13:13 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:13:13 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:13:13 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:13:13 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:13:14 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:13:14 | 耗时 10 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:13:14 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:13:14 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:13:14 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:13:14 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:13:42 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:13:42 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:13:42 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:13:42 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:13:42 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:13:42 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:13:43 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:13:43 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:13:43 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:13:43 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:13:43 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:13:43 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:13:43 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:13:43 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:13:43 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:13:43 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:13:43 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:13:43 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:13:44 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:13:44 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:13:44 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 18:13:44 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:13:44 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 18:13:44 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:13:58 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:13:58 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:13:58 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:13:58 | 耗时 1 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T18:13:58.952+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-03 18:13:58 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:13:58 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:13:58 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:13:58 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:13:59 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:13:59 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:13:59 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 18:13:59 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:13:59 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:13:59 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T18:13:59.569+0800' WHERE (USERNAME = 'ccc');
2020-04-03 18:13:59 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:13:59 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 18:13:59 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:13:59 | 耗时 0 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 18:13:59 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:13:59 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 18:13:59 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:13:59 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 18:13:59 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:13:59 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-03 18:14:01 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:14:01 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:14:01 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:14:01 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:14:01 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 18:14:01 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:14:01 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 18:14:01 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:14:02 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:14:02 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 18:14:50 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:14:50 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 18:15:25 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:15:25 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:15:25 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:15:25 | 耗时 1 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T18:15:25.398+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-03 18:15:25 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:15:25 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:15:25 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:15:25 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:15:25 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:15:25 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:15:25 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:15:25 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:15:25 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:15:25 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T18:15:25.984+0800' WHERE (USERNAME = 'ccc');
2020-04-03 18:15:26 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:15:26 | 耗时 14 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 18:15:26 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:15:26 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 18:15:26 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:15:26 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 18:15:26 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:15:26 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 18:15:26 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:15:26 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-03 18:15:27 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:15:27 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:15:27 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:15:27 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:15:27 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:15:27 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 18:15:27 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:15:27 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:15:28 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:15:28 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chencheng';
2020-04-03 18:15:31 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:15:31 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'chencheng' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:15:31 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:15:31 | 耗时 1 ms | SQL 语句：
UPDATE t_park SET OWNER = 0, MOBILE = '15623041759', DESCRIPTION = '测试数据11111111ddddff dddfdfsaf', MODIFYTIME = '2020-04-03T18:15:31.182+0800', PRICE = 4.0, PLACE = '武汉市', SPAN = 'GTR 32', USERNAME = 'chencheng' WHERE ID = 16;
2020-04-03 18:15:31 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:15:31 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 18:15:31 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:15:31 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:15:32 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:15:32 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:15:32 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:15:32 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:15:33 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:15:33 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 18:16:32 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:16:32 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:16:32 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:16:32 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:16:32 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:16:32 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:16:32 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:16:32 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:16:32 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:16:32 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:16:32 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:16:32 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:16:33 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:16:33 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:16:33 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:16:33 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:16:33 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:16:33 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:16:34 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:16:34 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:16:34 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:16:34 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:16:34 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:16:34 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:16:34 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:16:34 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:16:35 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:16:35 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:16:35 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:16:35 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:16:35 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:16:35 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:16:35 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:16:35 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:16:35 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:16:35 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:16:37 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:16:37 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 18:16:57 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585908648858 paused.
2020-04-03 18:16:57 INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-03 18:16:57 INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-04-03 18:16:57 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585908648858 shutting down.
2020-04-03 18:16:57 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585908648858 paused.
2020-04-03 18:16:57 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585908648858 shutdown complete.
2020-04-03 18:16:57 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-04-03 18:16:57 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-04-03 18:16:57 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-04-03 18:16:57 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-04-03 18:16:57 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-04-03 18:16:57 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-04-03 18:18:05 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 111372 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-03 18:18:05 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-03 18:18:05 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-03 18:18:05 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-03 18:18:07 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-03 18:18:07 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 18:18:08 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 151ms. Found 0 Redis repository interfaces.
2020-04-03 18:18:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:18:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$cb95fc9c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:18:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:18:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:18:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$23b98c4c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:18:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$45d34254] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:18:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:18:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$6d024148] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:18:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:18:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$9fcff865] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:18:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:18:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:18:09 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-03 18:18:09 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-03 18:18:09 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-03 18:18:09 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-03 18:18:09 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-03 18:18:09 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-03 18:18:09 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-03 18:18:09 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-03 18:18:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:18:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:18:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:18:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:18:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:18:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:18:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:18:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:18:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:18:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:18:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:18:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:18:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:18:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:18:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:18:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:18:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:18:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:18:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:18:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:18:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:18:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:18:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:18:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:18:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:18:11 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-03 18:18:11 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-03 18:18:11 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-03 18:18:11 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-03 18:18:11 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-03 18:18:11 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 6149 ms
2020-04-03 18:18:14 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-03 18:18:14 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-03 18:18:14 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-03 18:18:14 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-03 18:18:14 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-03 18:18:14 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-03 18:18:14 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-03 18:18:14 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585909094500'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-03 18:18:14 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-03 18:18:14 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-03 18:18:14 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@61cbd0c0
2020-04-03 18:18:14 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-03 18:18:14 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-03 18:18:15 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-03 18:18:15 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-03 18:18:15 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-03 18:18:16 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-03 18:18:16 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-03 18:18:16 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-03 18:18:16 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-03 18:18:16 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-03 18:18:16 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-03 18:18:16 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-03 18:18:16 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-03 18:18:16 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-03 18:18:16 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-03 18:18:16 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-03 18:18:16 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-03 18:18:16 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-03 18:18:16 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-03 18:18:16 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAvailableUsingGET_1
2020-04-03 18:18:16 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-03 18:18:16 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-03 18:18:16 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-03 18:18:16 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-03 18:18:16 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-03 18:18:16 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-03 18:18:16 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 12.51 seconds (JVM running for 17.819)
2020-04-03 18:18:17 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-03 18:18:17 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-03 18:18:17 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-03 18:18:17 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-03 18:18:17 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-03 18:18:17 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-03 18:18:17 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-03 18:18:17 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-03 18:18:17 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-03 18:18:17 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585908648858"'s failed in-progress jobs.
2020-04-03 18:18:17 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585909094500 started.
2020-04-03 18:18:18 INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-03 18:18:18 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-03 18:18:18 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 24 ms
2020-04-03 18:18:18 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-03 18:18:27 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:18:27 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:18:27 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:18:27 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T18:18:27.868+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-03 18:18:28 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:18:28 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:18:28 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:18:28 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:18:28 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:18:28 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:18:28 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 18:18:28 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:18:29 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:18:29 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T18:18:29.040+0800' WHERE (USERNAME = 'ccc');
2020-04-03 18:18:29 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:18:29 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 18:18:29 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:18:29 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 18:18:29 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:18:29 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 18:18:29 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:18:29 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 18:18:29 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:18:29 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-03 18:18:31 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:18:31 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:18:31 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:18:31 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:18:32 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:18:32 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 18:18:42 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:18:42 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 18:18:42 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:18:42 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:21:41 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:21:41 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chencheng';
2020-04-03 18:21:47 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:21:47 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chencheng';
2020-04-03 18:22:03 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:22:03 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chenc';
2020-04-03 18:22:06 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:22:06 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'chenc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:22:06 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 18:22:06 | 耗时 2 ms | SQL 语句：
UPDATE t_park SET OWNER = 0, MOBILE = '15623041759', DESCRIPTION = '测试数据dsaas', MODIFYTIME = '2020-04-03T18:22:06.243+0800', PRICE = 4.0, PLACE = '上海市', SPAN = 'Evolution', USERNAME = 'chenc' WHERE ID = 15;
2020-04-03 18:22:06 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:22:06 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 18:22:06 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:22:06 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:22:07 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:22:07 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:22:07 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:22:07 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:22:08 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:22:08 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 18:22:11 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:22:11 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原拓海';
2020-04-03 18:22:14 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:22:14 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chencheng';
2020-04-03 18:22:18 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:22:18 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'cccccc';
2020-04-03 18:23:00 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:23:00 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 18:23:00 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:23:00 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:23:20 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:23:20 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'aaaa' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:23:20 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:23:20 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:23:20 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:23:20 | 耗时 2 ms | SQL 语句：
INSERT INTO t_park (OWNER, MOBILE, AVAILABLE, DESCRIPTION, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME) VALUES (1, '15623041759', '0', '15615', '2020-04-03T18:23:20.302+0800', '1', 4.0, '荆州', '45615', '1', 'aaaa');
2020-04-03 18:23:20 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:23:20 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 18:23:20 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:23:20 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:23:22 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:23:22 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:23:22 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:23:22 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:24:30 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:24:30 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:24:30 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:24:30 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:24:30 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:24:30 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:24:30 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:24:30 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:24:30 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:24:30 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:24:30 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:24:30 | 耗时 2 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:24:32 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:24:32 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:24:32 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:24:32 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:24:32 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:24:32 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:24:32 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 18:24:32 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:24:32 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:24:32 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:24:32 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:24:32 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:24:34 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:24:34 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'aaaa';
2020-04-03 18:24:47 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:24:47 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'aaaa';
2020-04-03 18:24:57 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 18:24:57 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'aaaa';
2020-04-03 18:26:38 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:26:38 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:26:38 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:26:38 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:26:38 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:26:38 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:26:39 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:26:39 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:26:39 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:26:39 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:26:39 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:26:39 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:26:39 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:26:39 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:26:39 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:26:39 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:26:39 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:26:39 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:26:40 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:26:40 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:26:40 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:26:40 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:26:40 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:26:40 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:26:41 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:26:41 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'aaaa';
2020-04-03 18:26:46 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:26:46 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:26:46 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:26:46 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:26:46 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:26:46 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:26:46 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:26:46 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:26:47 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:26:47 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:26:47 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:26:47 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:26:48 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:26:48 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 18:26:56 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:26:56 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-03 18:27:52 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:27:52 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:27:52 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:27:52 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:27:52 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:27:52 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:27:53 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:27:53 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:27:53 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:27:53 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:27:53 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:27:53 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:27:53 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:27:53 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:27:53 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:27:53 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:27:53 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:27:53 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:27:54 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:27:54 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:27:54 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:27:54 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:27:54 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:27:54 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:27:55 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:27:55 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'aaaa';
2020-04-03 18:30:05 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:30:05 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:30:05 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:30:05 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:30:05 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:30:05 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:30:05 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 18:30:05 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:30:06 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:30:06 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:30:06 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:30:06 | 耗时 2 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:30:08 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:30:08 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:30:08 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:30:08 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:30:08 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:30:08 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:30:09 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:30:09 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:30:09 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:30:09 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:30:09 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:30:09 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:30:10 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:30:10 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 18:30:45 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:30:45 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:30:45 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:30:45 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:30:45 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:30:45 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:30:45 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:30:45 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:30:49 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:30:49 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:30:49 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:30:49 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:30:52 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:30:52 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'aaaa';
2020-04-03 18:33:18 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:33:18 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:33:18 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:33:18 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:33:18 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:33:18 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:33:18 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 18:33:18 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:33:18 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:33:18 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:33:18 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:33:18 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:33:20 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:33:20 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:33:20 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:33:20 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:33:20 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:33:20 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:33:21 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:33:21 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:33:21 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 18:33:21 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:33:21 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 18:33:21 | 耗时 3 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:33:22 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:33:22 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'aaaa';
2020-04-03 18:33:30 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:33:30 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'aaaa';
2020-04-03 18:34:02 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:34:02 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:34:02 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:34:02 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:34:02 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:34:02 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:34:02 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:34:02 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:34:03 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:34:03 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:34:03 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:34:03 | 耗时 2 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:34:03 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 18:34:03 | 耗时 3 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:34:03 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 18:34:03 | 耗时 4 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:34:03 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 18:34:03 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:34:04 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:34:04 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:34:04 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:34:04 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:34:04 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:34:04 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:34:05 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:34:05 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 18:35:24 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:35:24 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:35:24 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:35:24 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:35:24 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:35:24 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:35:25 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:35:25 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:35:25 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:35:25 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:35:25 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:35:25 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:35:26 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:35:26 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:35:26 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:35:26 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:35:26 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:35:26 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:35:27 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:35:27 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:35:27 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:35:27 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:35:27 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:35:27 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:35:28 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:35:28 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-03 18:35:47 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:35:47 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 18:35:50 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:35:50 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原拓海';
2020-04-03 18:35:55 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:35:55 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'aaaa';
2020-04-03 18:36:28 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585909094500 paused.
2020-04-03 18:36:28 INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-03 18:36:28 INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-04-03 18:36:28 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585909094500 shutting down.
2020-04-03 18:36:28 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585909094500 paused.
2020-04-03 18:36:28 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585909094500 shutdown complete.
2020-04-03 18:36:29 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-04-03 18:36:29 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-04-03 18:36:29 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-04-03 18:36:29 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-04-03 18:36:29 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-04-03 18:36:29 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-04-03 18:42:20 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 118504 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-03 18:42:20 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-03 18:42:21 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-03 18:42:21 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-03 18:42:23 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-03 18:42:23 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 18:42:23 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 161ms. Found 0 Redis repository interfaces.
2020-04-03 18:42:24 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:42:24 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$2a67df07] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:42:24 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:42:24 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:42:24 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$828b6eb7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:42:24 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$a4a524bf] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:42:24 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:42:24 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$cbd423b3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:42:24 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:42:24 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$fea1dad0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:42:24 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:42:24 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:42:24 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-03 18:42:24 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-03 18:42:25 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-03 18:42:25 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-03 18:42:25 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-03 18:42:25 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-03 18:42:25 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-03 18:42:25 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-03 18:42:25 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:42:25 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:42:25 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:42:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:42:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:42:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:42:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:42:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:42:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:42:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:42:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:42:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:42:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:42:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:42:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:42:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:42:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:42:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:42:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:42:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:42:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:42:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:42:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:42:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:42:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:42:27 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-03 18:42:27 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-03 18:42:27 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-03 18:42:27 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-03 18:42:27 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-03 18:42:27 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 6513 ms
2020-04-03 18:42:30 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-03 18:42:30 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-03 18:42:30 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-03 18:42:30 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-03 18:42:30 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-03 18:42:30 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-03 18:42:30 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-03 18:42:30 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585910550422'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-03 18:42:30 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-03 18:42:30 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-03 18:42:30 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@195267c8
2020-04-03 18:42:30 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-03 18:42:31 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-03 18:42:31 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-03 18:42:31 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-03 18:42:32 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-03 18:42:32 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-03 18:42:32 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-03 18:42:32 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-03 18:42:32 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-03 18:42:32 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-03 18:42:32 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-03 18:42:32 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-03 18:42:32 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-03 18:42:32 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-03 18:42:32 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-03 18:42:32 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-03 18:42:32 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-03 18:42:32 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-03 18:42:32 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAvailableUsingGET_1
2020-04-03 18:42:32 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-03 18:42:32 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-03 18:42:32 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-03 18:42:32 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-03 18:42:32 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-03 18:42:32 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-03 18:42:32 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-03 18:42:32 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 13.076 seconds (JVM running for 18.507)
2020-04-03 18:42:33 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-03 18:42:33 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-03 18:42:33 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-03 18:42:33 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-03 18:42:33 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585909094500"'s failed in-progress jobs.
2020-04-03 18:42:33 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585910550422 started.
2020-04-03 18:42:33 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-03 18:42:33 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-03 18:42:33 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-03 18:42:33 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-03 18:42:33 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-03 18:42:34 INFO  RMI TCP Connection(4)-192.168.80.1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-03 18:42:34 INFO  RMI TCP Connection(4)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-03 18:42:34 INFO  RMI TCP Connection(4)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 24 ms
2020-04-03 18:42:34 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-03 18:42:41 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:42:41 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:42:41 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:42:41 | 耗时 1 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T18:42:41.149+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-03 18:42:41 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:42:41 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:42:41 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:42:41 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:42:41 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:42:41 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:42:42 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:42:42 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:42:42 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:42:42 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T18:42:42.428+0800' WHERE (USERNAME = 'ccc');
2020-04-03 18:42:42 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:42:42 | 耗时 10 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 18:42:42 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:42:42 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 18:42:42 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:42:42 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 18:42:42 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:42:42 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 18:42:42 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:42:42 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-03 18:42:43 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 18:42:43 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 18:42:43 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 18:42:43 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:42:44 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:42:44 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:42:44 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:42:44 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:42:44 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:42:44 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:42:45 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:42:45 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 18:42:45 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:42:45 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:42:45 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:42:45 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:42:45 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:42:45 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:42:45 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:42:45 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 18:42:45 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:42:45 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:42:47 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:42:47 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chencheng';
2020-04-03 18:42:50 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:42:50 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chencheng';
2020-04-03 18:42:53 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:42:53 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'chencheng' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:42:53 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:42:53 | 耗时 2 ms | SQL 语句：
UPDATE t_park SET OWNER = 0, MOBILE = '15623041759', DESCRIPTION = '测试数据11111111ddddff dddfdfsafcsads ', MODIFYTIME = '2020-04-03T18:42:53.537+0800', PRICE = 4.0, PLACE = '武汉市', SPAN = 'GTR 32', USERNAME = 'chencheng' WHERE ID = 16;
2020-04-03 18:42:53 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:42:53 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 18:42:53 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:42:53 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:42:54 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:42:54 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:42:54 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:42:54 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:42:55 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:42:55 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 18:46:53 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:46:53 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:46:53 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:46:53 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:46:53 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:46:53 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:46:54 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:46:54 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:46:54 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:46:54 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:46:54 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:46:54 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:46:54 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:46:54 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:46:54 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:46:54 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:46:58 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 18:46:58 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:46:58 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 18:46:58 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:46:58 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 18:46:58 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:46:59 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:46:59 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:46:59 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:46:59 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:46:59 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:46:59 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:47:22 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:47:22 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:47:22 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:47:22 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:47:22 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:47:22 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:47:22 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:47:22 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:47:22 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:47:22 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:47:22 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:47:22 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:47:54 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:47:54 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:47:54 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:47:54 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:47:54 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:47:54 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:47:55 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:47:55 | 耗时 6 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:47:55 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 18:47:55 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:47:55 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 18:47:55 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:47:57 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:47:57 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:47:57 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:47:57 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:47:57 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:47:57 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:47:58 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:47:58 | 耗时 7 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:47:58 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:47:58 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:47:58 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:47:58 | 耗时 2 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:47:59 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:47:59 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 18:47:59 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:47:59 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:48:00 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:48:00 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:48:00 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:48:00 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:48:02 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:48:02 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:48:02 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:48:02 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 18:48:02 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:48:02 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:48:20 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:48:20 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:48:20 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:48:20 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:48:20 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:48:20 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:48:20 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:48:20 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:48:20 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:48:20 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:48:21 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:48:21 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 18:48:21 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:48:21 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:48:24 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:48:24 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:48:24 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:48:24 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:48:26 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:48:26 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:48:26 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:48:26 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 18:48:26 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:48:26 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:48:48 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 18:48:48 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:48:48 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 18:48:48 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:48:48 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 18:48:48 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:48:49 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:48:49 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:48:49 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:48:49 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:48:49 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:48:49 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 18:48:49 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:48:49 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:49:00 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:49:00 | 耗时 2 ms | SQL 语句：
SELECT MENU_ID, ICON, ORDER_NUM, MENU_NAME, TYPE, URL, PARENT_ID, MODIFY_TIME, CREATE_TIME, PERMS FROM t_menu ORDER BY ORDER_NUM ASC;
2020-04-03 18:49:26 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 18:49:26 | 耗时 12 ms | SQL 语句：
UPDATE t_menu SET ICON = 'layui-icon-sever', ORDER_NUM = 7, MENU_NAME = '信息审核', TYPE = '0', URL = '', PARENT_ID = 0, CREATE_TIME = '2020-04-03T18:49:26.080+0800', PERMS = '' WHERE MENU_ID = 187;
2020-04-03 18:49:26 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:49:26 | 耗时 2 ms | SQL 语句：
SELECT MENU_ID, ICON, ORDER_NUM, MENU_NAME, TYPE, URL, PARENT_ID, MODIFY_TIME, CREATE_TIME, PERMS FROM t_menu ORDER BY ORDER_NUM ASC;
2020-04-03 18:49:39 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:49:39 | 耗时 13 ms | SQL 语句：
UPDATE t_menu SET ICON = 'layui-icon-carryout', ORDER_NUM = 8, MENU_NAME = '我的车位', TYPE = '0', URL = '', PARENT_ID = 0, CREATE_TIME = '2020-04-03T18:49:39.743+0800', PERMS = '' WHERE MENU_ID = 188;
2020-04-03 18:49:39 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:49:39 | 耗时 2 ms | SQL 语句：
SELECT MENU_ID, ICON, ORDER_NUM, MENU_NAME, TYPE, URL, PARENT_ID, MODIFY_TIME, CREATE_TIME, PERMS FROM t_menu ORDER BY ORDER_NUM ASC;
2020-04-03 18:49:41 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:49:41 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:49:41 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:49:41 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:49:41 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:49:41 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:49:41 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:49:41 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:49:42 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 18:49:42 | 耗时 2 ms | SQL 语句：
SELECT MENU_ID, ICON, ORDER_NUM, MENU_NAME, TYPE, URL, PARENT_ID, MODIFY_TIME, CREATE_TIME, PERMS FROM t_menu ORDER BY ORDER_NUM ASC;
2020-04-03 18:49:44 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:49:44 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:49:44 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:49:44 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 18:49:44 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:49:44 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:49:49 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:49:49 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:49:49 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:49:49 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:49:50 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:49:50 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'aaaa';
2020-04-03 18:49:59 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:49:59 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 18:49:59 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 18:49:59 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:50:01 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 18:50:01 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:50:01 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 18:50:01 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:50:03 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 18:50:03 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'aaaa';
2020-04-03 18:50:17 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585910550422 paused.
2020-04-03 18:50:17 INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-03 18:50:17 INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-04-03 18:50:17 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585910550422 shutting down.
2020-04-03 18:50:17 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585910550422 paused.
2020-04-03 18:50:17 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585910550422 shutdown complete.
2020-04-03 18:50:18 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-04-03 18:50:18 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-04-03 18:50:18 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-04-03 18:50:18 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-04-03 18:50:18 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-04-03 18:50:18 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-04-03 18:58:57 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 119592 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-03 18:58:57 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-03 18:58:58 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-03 18:58:58 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-03 18:59:00 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-03 18:59:00 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 18:59:01 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 360ms. Found 0 Redis repository interfaces.
2020-04-03 18:59:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:59:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$92ff5385] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:59:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:59:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:59:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$eb22e335] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:59:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$d3c993d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:59:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:59:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$346b9831] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:59:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:59:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$67394f4e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:59:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:59:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:59:02 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-03 18:59:02 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-03 18:59:03 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-03 18:59:03 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-03 18:59:03 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-03 18:59:03 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-03 18:59:03 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-03 18:59:03 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-03 18:59:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:59:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:59:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:59:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:59:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:59:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:59:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:59:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:59:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:59:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:59:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:59:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:59:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:59:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:59:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:59:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:59:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:59:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:59:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:59:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:59:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:59:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:59:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:59:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:59:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 18:59:05 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-03 18:59:05 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-03 18:59:05 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-03 18:59:05 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-03 18:59:05 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-03 18:59:05 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 7312 ms
2020-04-03 18:59:08 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-03 18:59:08 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-03 18:59:08 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-03 18:59:08 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-03 18:59:08 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-03 18:59:08 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-03 18:59:08 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-03 18:59:08 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585911548496'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-03 18:59:08 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-03 18:59:08 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-03 18:59:08 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@1e4d3c2e
2020-04-03 18:59:08 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-03 18:59:08 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-03 18:59:08 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-03 18:59:10 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-03 18:59:10 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-03 18:59:10 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-03 18:59:10 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-03 18:59:10 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-03 18:59:10 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-03 18:59:10 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-03 18:59:10 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-03 18:59:10 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-03 18:59:10 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-03 18:59:10 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-03 18:59:10 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-03 18:59:10 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-03 18:59:10 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-03 18:59:10 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-03 18:59:10 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAvailableUsingGET_1
2020-04-03 18:59:10 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-03 18:59:10 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-03 18:59:10 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-03 18:59:10 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-03 18:59:10 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-03 18:59:10 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-03 18:59:11 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-03 18:59:11 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 14.436 seconds (JVM running for 19.376)
2020-04-03 18:59:11 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-03 18:59:11 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-03 18:59:11 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-03 18:59:11 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-03 18:59:11 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585910550422"'s failed in-progress jobs.
2020-04-03 18:59:11 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585911548496 started.
2020-04-03 18:59:12 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-03 18:59:12 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-03 18:59:12 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-03 18:59:12 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-03 18:59:12 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-03 18:59:12 INFO  RMI TCP Connection(7)-192.168.80.1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-03 18:59:12 INFO  RMI TCP Connection(7)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-03 18:59:12 INFO  RMI TCP Connection(7)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 29 ms
2020-04-03 18:59:13 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-03 18:59:19 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:59:19 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:59:19 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:59:19 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T18:59:19.374+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-03 18:59:19 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:59:19 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 18:59:19 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:59:19 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 18:59:19 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:59:19 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:59:20 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 18:59:20 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 18:59:20 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:59:20 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T18:59:20.417+0800' WHERE (USERNAME = 'ccc');
2020-04-03 18:59:20 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:59:20 | 耗时 7 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 18:59:20 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:59:20 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 18:59:20 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:59:20 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 18:59:20 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:59:20 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 18:59:20 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:59:20 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-03 18:59:22 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:59:22 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:59:22 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 18:59:22 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:59:23 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:59:23 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 18:59:23 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:59:23 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 18:59:23 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 18:59:23 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:59:24 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:59:24 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 18:59:24 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 18:59:24 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:59:27 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:59:27 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 18:59:27 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 18:59:27 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 18:59:28 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 18:59:28 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'aaaa';
2020-04-03 19:03:07 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585911548496 paused.
2020-04-03 19:03:07 INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-03 19:03:07 INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-04-03 19:03:07 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585911548496 shutting down.
2020-04-03 19:03:07 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585911548496 paused.
2020-04-03 19:03:07 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585911548496 shutdown complete.
2020-04-03 19:03:07 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-04-03 19:03:07 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-04-03 19:03:07 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-04-03 19:03:07 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-04-03 19:03:07 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-04-03 19:03:07 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-04-03 19:23:25 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 119572 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-03 19:23:25 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-03 19:23:26 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-03 19:23:26 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-03 19:23:28 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-03 19:23:28 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 19:23:28 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 172ms. Found 0 Redis repository interfaces.
2020-04-03 19:23:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:23:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$b4f23820] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:23:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:23:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:23:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$d15c7d0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:23:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$2f2f7dd8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:23:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:23:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$565e7ccc] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:23:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:23:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$892c33e9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:23:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:23:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:23:29 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-03 19:23:29 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-03 19:23:30 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-03 19:23:30 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-03 19:23:30 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-03 19:23:30 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-03 19:23:30 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-03 19:23:30 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-03 19:23:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:23:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:23:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:23:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:23:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:23:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:23:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:23:31 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:23:31 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:23:31 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:23:31 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:23:31 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:23:31 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:23:31 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:23:31 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:23:31 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:23:31 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:23:31 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:23:31 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:23:31 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:23:31 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:23:31 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:23:31 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:23:31 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:23:31 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:23:31 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-03 19:23:32 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-03 19:23:32 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-03 19:23:32 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-03 19:23:32 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-03 19:23:32 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 6128 ms
2020-04-03 19:23:34 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-03 19:23:34 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-03 19:23:35 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-03 19:23:35 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-03 19:23:35 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-03 19:23:35 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-03 19:23:35 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-03 19:23:35 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585913015087'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-03 19:23:35 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-03 19:23:35 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-03 19:23:35 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@72d9bd09
2020-04-03 19:23:35 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-03 19:23:35 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-03 19:23:35 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-03 19:23:37 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-03 19:23:37 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-03 19:23:37 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-03 19:23:37 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-03 19:23:37 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-03 19:23:37 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-03 19:23:37 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-03 19:23:37 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-03 19:23:37 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-03 19:23:37 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-03 19:23:37 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-03 19:23:37 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-03 19:23:37 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-03 19:23:37 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-03 19:23:37 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-03 19:23:37 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-03 19:23:37 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-03 19:23:37 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-03 19:23:37 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-03 19:23:37 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAvailableUsingGET_1
2020-04-03 19:23:37 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-03 19:23:37 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-03 19:23:37 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-03 19:23:37 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 13.048 seconds (JVM running for 18.169)
2020-04-03 19:23:38 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-03 19:23:38 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-03 19:23:38 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-03 19:23:38 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-03 19:23:38 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-03 19:23:38 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-03 19:23:38 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-03 19:23:38 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-03 19:23:38 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-03 19:23:38 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585911548496"'s failed in-progress jobs.
2020-04-03 19:23:38 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585913015087 started.
2020-04-03 19:23:39 INFO  RMI TCP Connection(10)-192.168.80.1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-03 19:23:39 INFO  RMI TCP Connection(10)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-03 19:23:39 INFO  RMI TCP Connection(10)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 40 ms
2020-04-03 19:23:39 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-03 19:24:14 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 19:24:14 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:24:14 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 19:24:14 | 耗时 1 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T19:24:14.827+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-03 19:24:14 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 19:24:14 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:24:15 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 19:24:15 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:24:15 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 19:24:15 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:24:15 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 19:24:15 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 19:24:15 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:24:15 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T19:24:15.833+0800' WHERE (USERNAME = 'ccc');
2020-04-03 19:24:15 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:24:15 | 耗时 11 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 19:24:15 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:24:15 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 19:24:15 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:24:15 | 耗时 2 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 19:24:15 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:24:15 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 19:24:15 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:24:15 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-03 19:24:17 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:24:17 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:24:17 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:24:17 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:24:17 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 19:24:17 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:24:17 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 19:24:17 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 19:24:17 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 19:24:17 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:24:18 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 19:24:18 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'aaaa';
2020-04-03 19:24:29 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 19:24:29 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:24:29 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 19:24:29 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:24:30 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:24:30 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'aaaa';
2020-04-03 19:24:55 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 19:24:55 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'aaaa';
2020-04-03 19:25:10 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:25:10 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原拓海';
2020-04-03 19:28:33 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:28:33 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:28:33 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:28:33 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:28:33 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:28:33 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:28:34 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 19:28:34 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 19:28:34 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 19:28:34 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:28:34 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 19:28:34 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:28:36 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:28:36 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:28:36 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:28:36 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:28:36 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:28:36 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:28:37 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 19:28:37 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 19:28:37 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 19:28:37 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:28:37 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 19:28:37 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:28:39 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 19:28:39 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原拓海';
2020-04-03 19:31:58 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 19:31:58 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:31:58 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 19:31:58 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:31:58 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 19:31:58 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:31:58 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:31:58 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 19:31:58 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 19:31:58 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:31:58 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 19:31:58 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:32:00 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:32:00 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原拓海';
2020-04-03 19:34:08 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 19:34:08 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:34:08 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 19:34:08 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:34:08 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 19:34:08 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:34:08 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 19:34:08 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 19:34:08 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 19:34:08 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:34:08 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 19:34:08 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:34:09 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 19:34:09 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:34:09 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 19:34:09 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:34:09 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 19:34:09 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:34:09 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:34:09 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 19:34:10 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:34:10 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:34:10 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:34:10 | 耗时 2 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:34:11 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 19:34:11 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'aaaa';
2020-04-03 19:34:20 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 19:34:20 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:34:20 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 19:34:20 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:34:20 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 19:34:20 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:34:21 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 19:34:21 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 19:34:21 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:34:21 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:34:21 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:34:21 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:34:23 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:34:23 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 19:34:34 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 19:34:34 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:34:34 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 19:34:34 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:34:34 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 19:34:34 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:34:34 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:34:34 | 耗时 5 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 19:34:34 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 19:34:34 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:34:34 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 19:34:34 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:34:36 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 19:34:36 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'aaaa';
2020-04-03 19:34:56 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 19:34:56 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:34:56 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 19:34:56 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:34:56 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 19:34:56 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:34:57 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 19:34:57 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 19:34:57 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 19:34:57 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:34:57 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 19:34:57 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:34:59 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:34:59 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:34:59 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:34:59 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:34:59 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:34:59 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:34:59 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 19:34:59 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 19:34:59 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 19:34:59 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:34:59 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 19:34:59 | 耗时 4 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:35:00 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 19:35:00 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 19:35:12 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 19:35:12 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:35:12 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 19:35:12 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:35:12 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 19:35:12 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:35:13 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 19:35:13 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 19:35:13 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:35:13 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:35:13 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:35:13 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:35:15 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 19:35:15 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:35:15 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 19:35:15 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:35:15 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 19:35:15 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:35:15 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:35:15 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 19:35:16 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 19:35:16 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:35:16 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 19:35:16 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:35:17 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 19:35:17 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'aaaa';
2020-04-03 19:36:16 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 19:36:16 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:36:16 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 19:36:16 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:36:16 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 19:36:16 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:36:17 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 19:36:17 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 19:36:17 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 19:36:17 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:36:17 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 19:36:17 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:36:18 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:36:18 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 19:36:18 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:36:18 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:36:19 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:36:19 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chencheng';
2020-04-03 19:36:22 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 19:36:22 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'chencheng' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:36:22 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 19:36:22 | 耗时 1 ms | SQL 语句：
UPDATE t_park SET OWNER = 0, MOBILE = '15623041759', DESCRIPTION = '测试数据11111111ddddff dddfdfsafcsads 得撒', MODIFYTIME = '2020-04-03T19:36:22.392+0800', PRICE = 4.0, PLACE = '武汉市', SPAN = 'GTR 32', USERNAME = 'chencheng' WHERE ID = 16;
2020-04-03 19:36:22 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 19:36:22 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 19:36:22 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 19:36:22 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:36:43 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 19:36:43 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '大师啊' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:36:43 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:36:43 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:36:43 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:36:43 | 耗时 1 ms | SQL 语句：
INSERT INTO t_park (OWNER, MOBILE, AVAILABLE, DESCRIPTION, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME) VALUES (1, '15623041759', '0', '123', '2020-04-03T19:36:43.831+0800', '1', 4.0, '黄冈', '123', '1', '大师啊');
2020-04-03 19:36:43 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:36:43 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 19:36:43 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:36:43 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:36:46 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 19:36:46 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:36:46 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 19:36:46 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:36:51 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 19:36:51 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 19:37:29 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:37:29 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原拓海';
2020-04-03 19:38:10 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:38:10 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:38:11 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:38:11 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:38:11 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:38:11 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:38:11 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 19:38:11 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 19:38:11 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 19:38:11 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:38:11 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 19:38:11 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:38:21 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 19:38:21 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '大师啊';
2020-04-03 19:40:29 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:40:29 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:40:29 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:40:29 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:40:29 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:40:29 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:40:30 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 19:40:30 | 耗时 9 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 19:40:30 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:40:30 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:40:30 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:40:30 | 耗时 2 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:40:32 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 19:40:32 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '大师啊';
2020-04-03 19:40:34 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 19:40:34 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:40:34 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 19:40:34 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:40:34 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 19:40:34 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:40:35 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 19:40:35 | 耗时 5 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 19:40:35 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:40:35 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:40:35 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:40:35 | 耗时 2 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:40:36 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:40:36 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '大师啊';
2020-04-03 19:40:38 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 19:40:38 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:40:38 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 19:40:38 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:40:38 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 19:40:38 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:40:39 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:40:39 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 19:40:39 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 19:40:39 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:40:39 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 19:40:39 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:40:39 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 19:40:39 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '大师啊';
2020-04-03 19:40:44 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585913015087 paused.
2020-04-03 19:40:44 INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-03 19:40:44 INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-04-03 19:40:44 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585913015087 shutting down.
2020-04-03 19:40:44 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585913015087 paused.
2020-04-03 19:40:44 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585913015087 shutdown complete.
2020-04-03 19:40:44 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-04-03 19:40:44 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-04-03 19:40:44 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-04-03 19:40:44 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-04-03 19:40:44 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-04-03 19:40:44 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-04-03 19:41:50 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 119772 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-03 19:41:50 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-03 19:41:51 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-03 19:41:51 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-03 19:41:53 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-03 19:41:53 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 19:41:53 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 152ms. Found 0 Redis repository interfaces.
2020-04-03 19:41:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:41:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$4e3bfc4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:41:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:41:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:41:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$5d074f74] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:41:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$7f21057c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:41:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:41:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$a6500470] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:41:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:41:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$d91dbb8d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:41:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:41:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:41:54 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-03 19:41:54 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-03 19:41:55 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-03 19:41:55 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-03 19:41:55 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-03 19:41:55 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-03 19:41:55 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-03 19:41:55 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-03 19:41:55 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:41:55 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:41:55 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:41:55 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:41:55 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:41:55 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:41:55 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:41:56 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:41:56 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:41:56 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:41:56 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:41:56 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:41:56 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:41:56 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:41:56 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:41:56 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:41:56 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:41:56 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:41:56 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:41:56 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:41:56 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:41:56 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:41:56 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:41:56 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:41:56 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:41:57 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-03 19:41:57 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-03 19:41:57 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-03 19:41:57 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-03 19:41:57 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-03 19:41:57 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 6634 ms
2020-04-03 19:42:00 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-03 19:42:00 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-03 19:42:00 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-03 19:42:00 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-03 19:42:00 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-03 19:42:00 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-03 19:42:00 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-03 19:42:00 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585914120506'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-03 19:42:00 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-03 19:42:00 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-03 19:42:00 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@1f5faa89
2020-04-03 19:42:01 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-03 19:42:01 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-03 19:42:01 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-03 19:42:02 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-03 19:42:02 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-03 19:42:02 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-03 19:42:02 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-03 19:42:02 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-03 19:42:02 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-03 19:42:02 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-03 19:42:02 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-03 19:42:02 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-03 19:42:02 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-03 19:42:02 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-03 19:42:02 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-03 19:42:02 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-03 19:42:02 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-03 19:42:02 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-03 19:42:02 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-03 19:42:02 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAvailableUsingGET_1
2020-04-03 19:42:02 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-03 19:42:02 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-03 19:42:02 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-03 19:42:02 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-03 19:42:02 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-03 19:42:03 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-03 19:42:03 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 13.343 seconds (JVM running for 18.758)
2020-04-03 19:42:03 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-03 19:42:03 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-03 19:42:03 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-03 19:42:03 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-03 19:42:03 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-03 19:42:03 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-03 19:42:03 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-03 19:42:03 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-03 19:42:03 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-03 19:42:03 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585913015087"'s failed in-progress jobs.
2020-04-03 19:42:04 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585914120506 started.
2020-04-03 19:42:04 INFO  RMI TCP Connection(5)-192.168.80.1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-03 19:42:04 INFO  RMI TCP Connection(5)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-03 19:42:04 INFO  RMI TCP Connection(5)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 23 ms
2020-04-03 19:42:04 INFO  http-nio-8080-exec-2 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-03 19:42:10 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 19:42:10 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:42:10 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 19:42:10 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T19:42:10.364+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-03 19:42:10 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 19:42:10 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:42:10 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 19:42:10 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:42:10 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 19:42:10 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:42:11 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:42:11 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 19:42:11 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 19:42:11 | 耗时 4 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T19:42:11.367+0800' WHERE (USERNAME = 'ccc');
2020-04-03 19:42:11 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 19:42:11 | 耗时 12 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 19:42:11 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 19:42:11 | 耗时 4 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 19:42:11 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 19:42:11 | 耗时 3 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 19:42:11 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 19:42:11 | 耗时 3 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 19:42:11 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 19:42:11 | 耗时 5 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-03 19:42:12 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 19:42:12 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:42:12 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 19:42:12 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:42:12 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 19:42:12 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:42:12 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 19:42:12 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 19:42:12 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 19:42:12 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:42:15 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 19:42:15 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:42:15 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 19:42:15 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:42:16 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:42:16 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '大师啊';
2020-04-03 19:42:34 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 19:42:34 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 19:42:34 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 19:42:34 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:42:37 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 19:42:37 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:42:37 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 19:42:37 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:43:15 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 19:43:15 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:43:15 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 19:43:15 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:43:15 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 19:43:15 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:43:15 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 19:43:15 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 19:43:15 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 19:43:15 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:43:15 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 19:43:15 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:43:17 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 19:43:17 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '大师啊';
2020-04-03 19:43:19 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 19:43:19 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:43:19 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 19:43:19 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:43:19 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 19:43:19 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:43:20 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 19:43:20 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 19:43:20 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 19:43:20 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:43:20 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 19:43:20 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:43:21 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 19:43:21 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '大师啊';
2020-04-03 19:43:55 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:43:55 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:43:56 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:43:56 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:43:56 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:43:56 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:43:56 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 19:43:56 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 19:43:56 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 19:43:56 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:43:56 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 19:43:56 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:43:58 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 19:43:58 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:43:58 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 19:43:58 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:43:58 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 19:43:58 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:43:58 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 19:43:58 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 19:43:59 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 19:43:59 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:43:59 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 19:43:59 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:44:00 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 19:44:00 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '大师啊';
2020-04-03 19:44:45 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 19:44:45 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:44:45 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 19:44:45 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:44:45 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 19:44:45 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:44:45 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 19:44:45 | 耗时 7 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 19:44:45 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 19:44:45 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:44:45 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 19:44:45 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:44:47 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 19:44:47 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:44:47 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 19:44:47 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:44:47 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 19:44:47 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:44:47 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 19:44:47 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 19:44:48 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 19:44:48 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:44:48 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 19:44:48 | 耗时 2 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:44:48 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 19:44:48 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '大师啊';
2020-04-03 19:46:04 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 19:46:04 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:46:04 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 19:46:04 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:46:04 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 19:46:04 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:46:04 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 19:46:04 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 19:46:04 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 19:46:04 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:46:04 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 19:46:04 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:46:06 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 19:46:06 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:46:06 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 19:46:06 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:46:06 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 19:46:06 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:46:07 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:46:07 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 19:46:07 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:46:07 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:46:07 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:46:07 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:46:09 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 19:46:09 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '大师啊';
2020-04-03 19:47:08 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 19:47:08 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:47:08 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 19:47:08 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:47:08 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 19:47:08 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:47:08 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 19:47:08 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 19:47:08 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 19:47:08 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:47:08 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 19:47:08 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:47:10 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 19:47:10 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:47:10 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 19:47:10 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:47:10 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 19:47:10 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:47:11 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 19:47:11 | 耗时 5 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 19:47:11 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 19:47:11 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:47:11 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 19:47:11 | 耗时 2 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:47:12 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 19:47:12 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '大师啊';
2020-04-03 19:47:20 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:47:20 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:47:20 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:47:20 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:47:20 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:47:20 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:47:21 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 19:47:21 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 19:47:21 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 19:47:21 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:47:21 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 19:47:21 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:47:22 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 19:47:22 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '大师啊';
2020-04-03 19:48:15 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:48:15 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:48:15 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:48:15 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:48:15 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:48:15 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:48:15 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 19:48:15 | 耗时 7 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 19:48:16 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 19:48:16 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:48:16 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 19:48:16 | 耗时 2 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:48:17 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 19:48:17 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:48:17 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 19:48:17 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:48:17 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 19:48:17 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:48:18 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:48:18 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 19:48:18 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 19:48:18 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:48:18 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 19:48:18 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:48:19 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:48:19 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 19:50:31 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 19:50:31 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:50:31 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 19:50:31 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:50:31 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 19:50:31 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:50:32 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:50:32 | 耗时 7 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 19:50:32 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:50:32 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:50:32 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:50:32 | 耗时 3 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:50:33 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 19:50:33 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:50:33 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 19:50:33 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:50:34 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 19:50:34 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:50:34 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 19:50:34 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 19:50:35 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 19:50:35 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:50:35 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 19:50:35 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:50:36 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 19:50:36 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '大师啊';
2020-04-03 19:51:09 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:51:09 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:51:09 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:51:09 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:51:09 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:51:09 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:51:09 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 19:51:09 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 19:51:09 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 19:51:09 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:51:09 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 19:51:09 | 耗时 2 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:51:10 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 19:51:10 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:51:10 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 19:51:10 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:51:10 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 19:51:10 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:51:10 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 19:51:10 | 耗时 5 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 19:51:11 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 19:51:11 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:51:11 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 19:51:11 | 耗时 2 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:51:12 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 19:51:12 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '大师啊';
2020-04-03 19:51:23 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585914120506 paused.
2020-04-03 19:51:23 INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-03 19:51:23 INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-04-03 19:51:23 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585914120506 shutting down.
2020-04-03 19:51:23 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585914120506 paused.
2020-04-03 19:51:23 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585914120506 shutdown complete.
2020-04-03 19:51:23 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-04-03 19:51:23 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-04-03 19:51:23 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-04-03 19:51:23 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-04-03 19:51:23 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-04-03 19:51:23 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-04-03 19:53:29 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 95972 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-03 19:53:29 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-03 19:53:29 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-03 19:53:29 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-03 19:53:32 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-03 19:53:32 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 19:53:32 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 181ms. Found 0 Redis repository interfaces.
2020-04-03 19:53:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:53:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$e73eef4e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:53:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:53:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:53:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$3f627efe] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:53:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$617c3506] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:53:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:53:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$88ab33fa] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:53:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:53:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$bb78eb17] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:53:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:53:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:53:33 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-03 19:53:33 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-03 19:53:34 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-03 19:53:34 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-03 19:53:34 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-03 19:53:34 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-03 19:53:34 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-03 19:53:34 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-03 19:53:34 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:53:34 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:53:34 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:53:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:53:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:53:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:53:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:53:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:53:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:53:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:53:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:53:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:53:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:53:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:53:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:53:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:53:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:53:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:53:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:53:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:53:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:53:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:53:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:53:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:53:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 19:53:36 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-03 19:53:36 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-03 19:53:36 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-03 19:53:36 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-03 19:53:36 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-03 19:53:36 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 7023 ms
2020-04-03 19:53:39 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-03 19:53:39 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-03 19:53:39 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-03 19:53:39 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-03 19:53:39 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-03 19:53:39 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-03 19:53:39 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-03 19:53:39 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585914819368'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-03 19:53:39 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-03 19:53:39 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-03 19:53:39 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@4a1bb556
2020-04-03 19:53:39 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-03 19:53:39 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-03 19:53:39 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-03 19:53:40 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-03 19:53:40 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-03 19:53:41 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-03 19:53:41 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-03 19:53:41 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-03 19:53:41 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-03 19:53:41 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-03 19:53:41 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-03 19:53:41 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-03 19:53:41 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-03 19:53:41 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-03 19:53:41 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-03 19:53:41 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-03 19:53:41 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-03 19:53:41 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-03 19:53:41 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-03 19:53:41 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAvailableUsingGET_1
2020-04-03 19:53:41 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-03 19:53:41 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-03 19:53:41 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-03 19:53:41 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-03 19:53:41 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-03 19:53:41 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-03 19:53:41 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 13.562 seconds (JVM running for 19.033)
2020-04-03 19:53:42 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-03 19:53:42 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-03 19:53:42 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-03 19:53:42 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-03 19:53:42 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585914120506"'s failed in-progress jobs.
2020-04-03 19:53:42 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-03 19:53:42 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-03 19:53:42 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-03 19:53:42 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-03 19:53:42 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-03 19:53:42 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585914819368 started.
2020-04-03 19:53:43 INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-03 19:53:43 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-03 19:53:43 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 20 ms
2020-04-03 19:53:43 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-03 19:53:49 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:53:49 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:53:50 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:53:50 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T19:53:50.041+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-03 19:53:50 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 19:53:50 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:53:50 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 19:53:50 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:53:50 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 19:53:50 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:53:50 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 19:53:50 | 耗时 5 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 19:53:51 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 19:53:51 | 耗时 4 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T19:53:51.169+0800' WHERE (USERNAME = 'ccc');
2020-04-03 19:53:51 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 19:53:51 | 耗时 9 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 19:53:51 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 19:53:51 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 19:53:51 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 19:53:51 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 19:53:51 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 19:53:51 | 耗时 2 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 19:53:51 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 19:53:51 | 耗时 2 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-03 19:53:52 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 19:53:52 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:53:52 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 19:53:52 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:53:54 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 19:53:54 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '大师啊';
2020-04-03 19:54:12 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 19:54:12 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 19:54:12 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 19:54:12 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 19:54:12 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 19:54:12 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:54:13 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 19:54:13 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 19:54:13 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:54:13 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 19:54:13 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 19:54:13 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:54:15 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 19:54:15 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '大师啊';
2020-04-03 19:57:51 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 19:57:51 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 19:57:51 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 19:57:51 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 19:57:53 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 19:57:53 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chencheng';
2020-04-03 19:57:54 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 19:57:54 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'chencheng' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 19:58:01 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 19:58:01 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chencheng';
2020-04-03 19:58:02 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 19:58:02 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'chencheng' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:00:09 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585914819368 paused.
2020-04-03 20:00:09 INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-03 20:00:09 INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-04-03 20:00:09 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585914819368 shutting down.
2020-04-03 20:00:09 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585914819368 paused.
2020-04-03 20:00:09 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585914819368 shutdown complete.
2020-04-03 20:00:09 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-04-03 20:00:09 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-04-03 20:00:09 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-04-03 20:00:09 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-04-03 20:00:09 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-04-03 20:00:09 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-04-03 20:00:25 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 119340 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-03 20:00:25 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-03 20:00:25 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-03 20:00:25 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-03 20:00:27 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-03 20:00:27 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 20:00:27 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 156ms. Found 0 Redis repository interfaces.
2020-04-03 20:00:28 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:00:28 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$53cd9d19] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:00:28 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:00:28 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:00:28 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$abf12cc9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:00:28 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$ce0ae2d1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:00:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:00:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$f539e1c5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:00:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:00:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$280798e2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:00:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:00:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:00:29 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-03 20:00:29 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-03 20:00:29 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-03 20:00:29 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-03 20:00:29 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-03 20:00:29 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-03 20:00:29 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-03 20:00:29 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-03 20:00:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:00:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:00:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:00:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:00:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:00:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:00:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:00:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:00:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:00:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:00:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:00:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:00:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:00:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:00:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:00:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:00:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:00:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:00:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:00:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:00:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:00:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:00:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:00:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:00:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:00:31 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-03 20:00:31 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-03 20:00:31 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-03 20:00:31 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-03 20:00:31 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-03 20:00:31 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 6449 ms
2020-04-03 20:00:34 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-03 20:00:34 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-03 20:00:34 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-03 20:00:34 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-03 20:00:34 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-03 20:00:35 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-03 20:00:35 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-03 20:00:35 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585915234912'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-03 20:00:35 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-03 20:00:35 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-03 20:00:35 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@5ae6a240
2020-04-03 20:00:35 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-03 20:00:35 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-03 20:00:35 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-03 20:00:36 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-03 20:00:36 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-03 20:00:36 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-03 20:00:37 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-03 20:00:37 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-03 20:00:37 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-03 20:00:37 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-03 20:00:37 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-03 20:00:37 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-03 20:00:37 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-03 20:00:37 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-03 20:00:37 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-03 20:00:37 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-03 20:00:37 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-03 20:00:37 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-03 20:00:37 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-03 20:00:37 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-03 20:00:37 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-03 20:00:37 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-03 20:00:37 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAvailableUsingGET_1
2020-04-03 20:00:37 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-03 20:00:37 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-03 20:00:37 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-03 20:00:37 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 13.551 seconds (JVM running for 18.108)
2020-04-03 20:00:38 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-03 20:00:38 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-03 20:00:38 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-03 20:00:38 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-03 20:00:38 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585914819368"'s failed in-progress jobs.
2020-04-03 20:00:38 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585915234912 started.
2020-04-03 20:00:38 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-03 20:00:38 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-03 20:00:38 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-03 20:00:38 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-03 20:00:38 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-03 20:00:39 INFO  RMI TCP Connection(4)-192.168.80.1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-03 20:00:39 INFO  RMI TCP Connection(4)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-03 20:00:39 INFO  RMI TCP Connection(4)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 26 ms
2020-04-03 20:00:39 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-03 20:00:54 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 20:00:54 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:00:54 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 20:00:54 | 耗时 1 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T20:00:54.875+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-03 20:00:55 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 20:00:55 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 20:00:55 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 20:00:55 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 20:00:55 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 20:00:55 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:00:55 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 20:00:55 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 20:00:55 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 20:00:55 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T20:00:55.845+0800' WHERE (USERNAME = 'ccc');
2020-04-03 20:00:55 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 20:00:55 | 耗时 10 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 20:00:55 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 20:00:55 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 20:00:55 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 20:00:55 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 20:00:55 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 20:00:55 | 耗时 2 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 20:00:55 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 20:00:55 | 耗时 2 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-03 20:00:57 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 20:00:57 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 20:00:57 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 20:00:57 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:00:58 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 20:00:58 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'aaaa';
2020-04-03 20:03:09 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 20:03:09 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 20:03:09 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 20:03:09 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 20:03:09 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 20:03:09 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:03:10 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 20:03:10 | 耗时 8 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 20:03:12 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 20:03:12 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 20:03:12 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 20:03:12 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 20:03:12 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 20:03:12 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:03:13 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 20:03:13 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 20:03:14 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 20:03:14 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 20:03:14 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 20:03:14 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 20:03:14 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 20:03:14 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:03:14 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 20:03:14 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 20:04:03 INFO  http-nio-8080-exec-4 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 20:04:03 INFO  http-nio-8080-exec-4 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 73ms. Found 0 Redis repository interfaces.
2020-04-03 20:04:04 INFO  http-nio-8080-exec-4 org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-03 20:04:04 INFO  http-nio-8080-exec-4 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 20:04:05 INFO  http-nio-8080-exec-4 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 231ms. Found 0 Redis repository interfaces.
2020-04-03 20:04:05 INFO  http-nio-8080-exec-4 springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-03 20:04:05 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 20:04:05 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 20:04:05 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 20:04:05 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 20:04:05 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 20:04:05 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:04:06 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 20:04:06 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 20:04:06 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 20:04:06 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 20:04:06 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 20:04:06 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:04:08 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 20:04:08 | 耗时 2 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '大师啊';
2020-04-03 20:04:10 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 20:04:10 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '大师啊' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:04:19 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 20:04:19 | 耗时 2 ms | SQL 语句：
UPDATE t_park SET OWNER = 0, MODIFYTIME = '2020-04-03T20:04:19.762+0800' WHERE ID = 0;
2020-04-03 20:05:07 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 20:05:07 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 20:05:07 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 20:05:07 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 20:05:07 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 20:05:07 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:05:08 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 20:05:08 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 20:05:08 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 20:05:08 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 20:05:08 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 20:05:08 | 耗时 2 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:05:09 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 20:05:09 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '大师啊';
2020-04-03 20:05:11 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 20:05:11 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '大师啊' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:05:14 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 20:05:14 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '大师啊' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:06:02 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 20:06:02 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 20:06:02 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 20:06:02 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 20:06:02 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 20:06:02 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:06:03 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 20:06:03 | 耗时 7 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 20:06:03 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 20:06:03 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 20:06:03 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 20:06:03 | 耗时 2 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:06:06 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 20:06:06 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '大师啊';
2020-04-03 20:06:08 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 20:06:08 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '大师啊' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:06:10 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 20:06:10 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '大师啊' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:06:11 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 20:06:11 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '大师啊' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:06:12 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 20:06:12 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '大师啊' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:06:12 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 20:06:12 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '大师啊' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:06:13 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 20:06:13 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '大师啊' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:06:13 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 20:06:13 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '大师啊' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:06:13 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 20:06:13 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '大师啊' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:06:13 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 20:06:13 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '大师啊' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:06:33 INFO  http-nio-8080-exec-6 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 20:06:33 INFO  http-nio-8080-exec-6 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 66ms. Found 0 Redis repository interfaces.
2020-04-03 20:06:34 INFO  http-nio-8080-exec-6 springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-03 20:06:34 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 20:06:34 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '大师啊' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:06:38 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 20:06:38 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '大师啊' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:06:38 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 20:06:38 | 耗时 2 ms | SQL 语句：
UPDATE t_park SET OWNER = 0, MOBILE = '15623041759', WHY = 'adsad', DESCRIPTION = '123', MODIFYTIME = '2020-04-03T20:06:38.178+0800', PRICE = 4.0, PLACE = '黄冈', SPAN = '123', STATUS = '1', USERNAME = '大师啊' WHERE ID = 27;
2020-04-03 20:06:42 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 20:06:42 | 耗时 2 ms | SQL 语句：
UPDATE t_park SET OWNER = 0, MOBILE = '15623041759', WHY = 'adsad', DESCRIPTION = '123', MODIFYTIME = '2020-04-03T20:06:42.195+0800', PRICE = 4.0, PLACE = '黄冈', SPAN = '123', STATUS = '1', USERNAME = '大师啊' WHERE ID = 27;
2020-04-03 20:06:42 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 20:06:42 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 20:06:42 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 20:06:42 | 耗时 2 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:06:42 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 20:06:42 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 20:06:42 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 20:06:42 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:06:48 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 20:06:48 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '大师啊';
2020-04-03 20:07:42 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 20:07:42 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '大师啊';
2020-04-03 20:07:48 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 20:07:48 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chencheng';
2020-04-03 20:07:50 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 20:07:50 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-03 20:07:53 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 20:07:53 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chenc';
2020-04-03 20:07:56 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 20:07:56 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'ssssss';
2020-04-03 20:07:58 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 20:07:58 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '大师啊';
2020-04-03 20:08:22 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 20:08:22 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 20:08:22 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 20:08:22 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 20:08:22 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 20:08:22 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:08:22 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 20:08:22 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 20:08:22 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 20:08:22 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 20:08:22 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 20:08:22 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:08:26 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 20:08:26 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '大师啊';
2020-04-03 20:08:29 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 20:08:29 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'aaaa';
2020-04-03 20:08:31 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 20:08:31 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 20:08:33 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 20:08:33 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chencheng';
2020-04-03 20:08:35 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 20:08:35 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-03 20:08:39 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 20:08:39 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chenc';
2020-04-03 20:08:41 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 20:08:41 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '大师啊';
2020-04-03 20:08:43 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 20:08:43 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '大师啊' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:08:43 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 20:08:43 | 耗时 2 ms | SQL 语句：
UPDATE t_park SET OWNER = 0, MOBILE = '15623041759', AVAILABLE = '1', WHY = 'adsad', DESCRIPTION = '123', MODIFYTIME = '2020-04-03T20:08:43.288+0800', PRICE = 4.0, PLACE = '黄冈', SPAN = '123', USERNAME = '大师啊' WHERE ID = 27;
2020-04-03 20:08:43 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 20:08:43 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 20:08:43 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 20:08:43 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:08:45 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 20:08:45 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '大师啊';
2020-04-03 20:08:47 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 20:08:47 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '大师啊' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:08:47 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 20:08:47 | 耗时 1 ms | SQL 语句：
UPDATE t_park SET OWNER = 0, MOBILE = '15623041759', AVAILABLE = '0', WHY = 'adsad', DESCRIPTION = '123', MODIFYTIME = '2020-04-03T20:08:47.144+0800', PRICE = 4.0, PLACE = '黄冈', SPAN = '123', USERNAME = '大师啊' WHERE ID = 27;
2020-04-03 20:08:47 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 20:08:47 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 20:08:47 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 20:08:47 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:10:19 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 20:10:19 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 20:10:19 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 20:10:19 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 20:10:19 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 20:10:19 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:10:20 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 20:10:20 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 20:10:20 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 20:10:20 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 20:10:20 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 20:10:20 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:10:21 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 20:10:21 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '大师啊';
2020-04-03 20:10:28 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 20:10:28 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 20:10:28 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 20:10:28 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 20:10:28 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 20:10:28 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:10:29 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 20:10:29 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 20:10:29 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 20:10:29 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 20:10:29 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 20:10:29 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:10:30 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 20:10:30 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '舒马赫';
2020-04-03 20:10:37 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 20:10:37 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:10:37 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 20:10:37 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 20:10:37 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 20:10:37 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:11:05 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585915234912 paused.
2020-04-03 20:11:05 INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-03 20:11:05 INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-04-03 20:11:05 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585915234912 shutting down.
2020-04-03 20:11:05 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585915234912 paused.
2020-04-03 20:11:05 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585915234912 shutdown complete.
2020-04-03 20:11:05 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-04-03 20:11:05 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-04-03 20:11:05 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-04-03 20:11:05 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-04-03 20:11:05 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-04-03 20:11:05 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-04-03 20:17:26 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 120744 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-03 20:17:26 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-03 20:17:26 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-03 20:17:26 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-03 20:17:29 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-03 20:17:29 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 20:17:29 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 163ms. Found 0 Redis repository interfaces.
2020-04-03 20:17:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:17:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$cf7842d7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:17:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:17:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:17:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$279bd287] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:17:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$49b5888f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:17:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:17:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$70e48783] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:17:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:17:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$a3b23ea0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:17:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:17:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:17:30 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-03 20:17:30 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-03 20:17:31 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-03 20:17:31 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-03 20:17:31 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-03 20:17:31 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-03 20:17:31 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-03 20:17:31 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-03 20:17:31 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:17:31 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:17:31 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:17:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:17:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:17:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:17:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:17:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:17:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:17:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:17:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:17:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:17:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:17:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:17:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:17:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:17:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:17:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:17:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:17:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:17:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:17:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:17:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:17:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:17:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 20:17:33 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-03 20:17:33 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-03 20:17:33 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-03 20:17:33 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-03 20:17:33 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-03 20:17:33 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 6482 ms
2020-04-03 20:17:35 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-03 20:17:36 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-03 20:17:36 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-03 20:17:36 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-03 20:17:36 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-03 20:17:36 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-03 20:17:36 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-03 20:17:36 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585916256210'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-03 20:17:36 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-03 20:17:36 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-03 20:17:36 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@67eb43a0
2020-04-03 20:17:36 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-03 20:17:36 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-03 20:17:36 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-03 20:17:37 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-03 20:17:37 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-03 20:17:37 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-03 20:17:38 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-03 20:17:38 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-03 20:17:38 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-03 20:17:38 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-03 20:17:38 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-03 20:17:38 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-03 20:17:38 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-03 20:17:38 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-03 20:17:38 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-03 20:17:38 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-03 20:17:38 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-03 20:17:38 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-03 20:17:38 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAvailableUsingGET_1
2020-04-03 20:17:38 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-03 20:17:38 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-03 20:17:38 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-03 20:17:38 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-03 20:17:38 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-03 20:17:38 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-03 20:17:38 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-03 20:17:38 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 13.153 seconds (JVM running for 18.613)
2020-04-03 20:17:38 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-03 20:17:38 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-03 20:17:39 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-03 20:17:39 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-03 20:17:39 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585915234912"'s failed in-progress jobs.
2020-04-03 20:17:39 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585916256210 started.
2020-04-03 20:17:39 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-03 20:17:39 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-03 20:17:39 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-03 20:17:39 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-03 20:17:39 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-03 20:17:40 INFO  RMI TCP Connection(7)-192.168.80.1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-03 20:17:40 INFO  RMI TCP Connection(7)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-03 20:17:40 INFO  RMI TCP Connection(7)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 27 ms
2020-04-03 20:17:40 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-03 20:17:46 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 20:17:46 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:17:47 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 20:17:47 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T20:17:46.952+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-03 20:17:47 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 20:17:47 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 20:17:47 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 20:17:47 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 20:17:47 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 20:17:47 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:17:47 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 20:17:47 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 20:17:48 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 20:17:48 | 耗时 3 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T20:17:48.021+0800' WHERE (USERNAME = 'ccc');
2020-04-03 20:17:48 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 20:17:48 | 耗时 4 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 20:17:48 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 20:17:48 | 耗时 3 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 20:17:48 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 20:17:48 | 耗时 3 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 20:17:48 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 20:17:48 | 耗时 3 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 20:17:48 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 20:17:48 | 耗时 4 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-03 20:17:51 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 20:17:51 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 20:17:51 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 20:17:51 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 20:17:51 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 20:17:51 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 20:17:51 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 20:17:51 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:20:06 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 20:20:06 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 20:20:06 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 20:20:06 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 20:20:06 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 20:20:06 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:20:06 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 20:20:06 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 20:20:06 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 20:20:06 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 20:20:06 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 20:20:06 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:20:09 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 20:20:09 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 20:20:09 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 20:20:09 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 20:20:09 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 20:20:09 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:20:09 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 20:20:09 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 20:20:09 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 20:20:09 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 20:20:09 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 20:20:09 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:20:12 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 20:20:12 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 20:20:12 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 20:20:12 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 20:20:12 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 20:20:12 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:20:12 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 20:20:12 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 20:20:12 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 20:20:12 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 20:20:12 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 20:20:12 | 耗时 3 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:20:26 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 20:20:26 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 20:20:26 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 20:20:26 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 20:20:26 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 20:20:26 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:20:26 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 20:20:26 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 20:20:26 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 20:20:26 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 20:20:26 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 20:20:26 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:20:27 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 20:20:27 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 20:20:27 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 20:20:27 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 20:20:27 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 20:20:27 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:20:28 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 20:20:28 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 20:20:28 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 20:20:28 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 20:20:28 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 20:20:28 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:20:31 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 20:20:31 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 20:20:31 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 20:20:31 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 20:20:31 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 20:20:31 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:20:31 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 20:20:31 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 20:20:31 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 20:20:31 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 20:20:31 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 20:20:31 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:20:34 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 20:20:34 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 20:20:34 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 20:20:34 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 20:20:34 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 20:20:34 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:20:35 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 20:20:35 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 20:20:35 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 20:20:35 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 20:20:35 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 20:20:35 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:21:21 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 20:21:21 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 20:21:21 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 20:21:21 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 20:21:21 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 20:21:21 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:21:21 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 20:21:21 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 20:21:21 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 20:21:21 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 20:21:21 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 20:21:21 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:21:24 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 20:21:24 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 20:21:24 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 20:21:24 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 20:21:24 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 20:21:24 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:21:25 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 20:21:25 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 20:21:25 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 20:21:25 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 20:21:25 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 20:21:25 | 耗时 2 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:21:35 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 20:21:35 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 20:21:35 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 20:21:35 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 20:21:35 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 20:21:35 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:21:36 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 20:21:36 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 20:21:36 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 20:21:36 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 20:21:36 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 20:21:36 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:21:37 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 20:21:37 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 20:21:37 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 20:21:37 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 20:21:37 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 20:21:37 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:21:37 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 20:21:37 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 20:21:37 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 20:21:37 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 20:21:37 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 20:21:37 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:21:55 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 20:21:55 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 20:21:55 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 20:21:55 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 20:21:55 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 20:21:55 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:21:56 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 20:21:56 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 20:21:56 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 20:21:56 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 20:21:56 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 20:21:56 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:21:57 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 20:21:57 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 20:21:57 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 20:21:57 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 20:21:57 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 20:21:57 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:21:58 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 20:21:58 | 耗时 7 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 20:21:58 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 20:21:58 | 耗时 4 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 20:21:58 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 20:21:58 | 耗时 3 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:22:11 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 20:22:11 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 20:22:11 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 20:22:11 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 20:22:11 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 20:22:11 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:22:11 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 20:22:11 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 20:22:12 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 20:22:12 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 20:22:12 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 20:22:12 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:22:14 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 20:22:14 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 20:22:14 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 20:22:14 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 20:22:14 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 20:22:14 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:22:14 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 20:22:14 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 20:22:14 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 20:22:14 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 20:22:14 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 20:22:14 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:22:37 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 20:22:37 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 20:22:37 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 20:22:37 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 20:22:37 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 20:22:37 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:22:38 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 20:22:38 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 20:22:38 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 20:22:38 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 20:22:38 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 20:22:38 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:22:39 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 20:22:39 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 20:22:39 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 20:22:39 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 20:22:39 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 20:22:39 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:22:39 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 20:22:39 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 20:22:39 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 20:22:39 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 20:22:39 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 20:22:39 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:22:41 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 20:22:41 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 20:22:41 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 20:22:41 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:22:48 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 20:22:48 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '大师啊';
2020-04-03 20:22:53 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 20:22:53 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '大师啊' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:22:53 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 20:22:53 | 耗时 1 ms | SQL 语句：
UPDATE t_park SET OWNER = 0, MOBILE = '15623041759', AVAILABLE = '0', WHY = 'adsad导师', DESCRIPTION = '123', MODIFYTIME = '2020-04-03T20:22:53.433+0800', PRICE = 4.0, PLACE = '黄冈', SPAN = '123', USERNAME = '大师啊' WHERE ID = 27;
2020-04-03 20:22:53 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 20:22:53 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 20:22:53 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 20:22:53 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:23:18 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 20:23:18 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '大师啊';
2020-04-03 20:23:21 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 20:23:21 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'aaaa';
2020-04-03 20:23:23 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 20:23:23 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '大师啊';
2020-04-03 20:23:34 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 20:23:34 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:23:34 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 20:23:34 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 20:23:34 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 20:23:34 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:23:35 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 20:23:35 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'aaaa';
2020-04-03 20:30:01 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 20:30:01 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 20:30:01 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 20:30:01 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 20:30:01 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 20:30:01 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:30:02 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 20:30:02 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 20:30:02 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 20:30:02 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:30:02 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 20:30:02 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 20:30:02 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 20:30:02 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:30:03 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 20:30:03 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 20:30:03 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 20:30:03 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 20:30:03 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 20:30:03 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:30:03 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 20:30:03 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 20:30:03 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 20:30:03 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:30:03 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 20:30:03 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 20:30:03 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 20:30:03 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:30:04 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 20:30:04 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 20:30:04 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 20:30:04 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 20:30:04 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 20:30:04 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:30:04 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 20:30:04 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 20:30:04 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 20:30:04 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:30:04 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 20:30:04 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 20:30:04 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 20:30:04 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:30:05 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 20:30:05 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 20:30:05 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 20:30:05 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 20:30:05 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 20:30:05 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:30:05 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 20:30:05 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 20:30:05 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 20:30:05 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:30:05 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 20:30:05 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 20:30:05 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 20:30:05 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:30:12 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 20:30:12 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:30:12 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 20:30:12 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T20:30:12.253+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-03 20:30:12 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 20:30:12 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 20:30:12 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 20:30:12 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 20:30:12 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 20:30:12 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:30:12 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 20:30:12 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 20:30:12 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 20:30:12 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T20:30:12.775+0800' WHERE (USERNAME = 'ccc');
2020-04-03 20:30:12 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 20:30:12 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 20:30:12 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 20:30:12 | 耗时 0 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 20:30:12 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 20:30:12 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 20:30:12 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 20:30:12 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 20:30:12 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 20:30:12 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-03 20:30:14 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 20:30:14 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 20:30:14 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 20:30:14 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 20:30:14 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 20:30:14 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:30:14 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 20:30:14 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 20:30:14 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 20:30:14 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:30:15 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 20:30:15 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'aaaa';
2020-04-03 20:30:24 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 20:30:24 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 20:30:24 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 20:30:24 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:30:25 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 20:30:25 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '大师啊';
2020-04-03 20:30:32 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 20:30:32 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:30:32 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 20:30:32 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 20:30:32 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 20:30:32 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:30:52 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 20:30:52 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:30:52 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 20:30:52 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 20:30:52 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 20:30:52 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:30:52 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 20:30:52 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:30:52 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 20:30:52 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 20:30:52 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 20:30:52 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:30:54 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 20:30:54 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:30:54 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 20:30:54 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 20:30:54 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 20:30:54 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:30:59 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 20:30:59 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:30:59 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 20:30:59 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 20:30:59 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 20:30:59 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:31:00 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 20:31:00 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 20:31:00 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 20:31:00 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 20:31:00 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 20:31:00 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 20:58:14 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 20:58:14 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'aaaa';
2020-04-03 21:12:06 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585916256210 paused.
2020-04-03 21:12:06 INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-03 21:12:06 INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-04-03 21:12:06 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585916256210 shutting down.
2020-04-03 21:12:06 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585916256210 paused.
2020-04-03 21:12:06 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585916256210 shutdown complete.
2020-04-03 21:12:07 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-04-03 21:12:07 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-04-03 21:12:07 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-04-03 21:12:07 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-04-03 21:12:07 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-04-03 21:12:07 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-04-03 21:23:03 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 111540 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-03 21:23:03 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-03 21:23:04 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-03 21:23:04 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-03 21:23:06 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-03 21:23:06 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 21:23:06 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 194ms. Found 0 Redis repository interfaces.
2020-04-03 21:23:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:23:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$f68ba95d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:23:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:23:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:23:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$4eaf390d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:23:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$70c8ef15] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:23:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:23:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$97f7ee09] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:23:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:23:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$cac5a526] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:23:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:23:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:23:08 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-03 21:23:08 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-03 21:23:08 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-03 21:23:08 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-03 21:23:08 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-03 21:23:08 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-03 21:23:08 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-03 21:23:08 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-03 21:23:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:23:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:23:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:23:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:23:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:23:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:23:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:23:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:23:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:23:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:23:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:23:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:23:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:23:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:23:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:23:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:23:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:23:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:23:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:23:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:23:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:23:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:23:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:23:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:23:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:23:11 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-03 21:23:11 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-03 21:23:11 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-03 21:23:11 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-03 21:23:11 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-03 21:23:11 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 7344 ms
2020-04-03 21:23:14 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-03 21:23:14 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-03 21:23:14 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-03 21:23:14 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-03 21:23:14 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-03 21:23:14 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-03 21:23:14 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-03 21:23:14 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585920194351'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-03 21:23:14 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-03 21:23:14 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-03 21:23:14 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@64cde9a5
2020-04-03 21:23:14 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-03 21:23:14 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-03 21:23:14 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-03 21:23:15 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-03 21:23:15 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-03 21:23:15 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-03 21:23:16 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-03 21:23:16 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-03 21:23:16 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-03 21:23:16 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-03 21:23:16 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-03 21:23:16 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-03 21:23:16 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-03 21:23:16 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-03 21:23:16 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-03 21:23:16 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-03 21:23:16 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-03 21:23:16 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-03 21:23:16 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-03 21:23:16 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-03 21:23:16 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-03 21:23:16 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-03 21:23:16 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAvailableUsingGET_1
2020-04-03 21:23:16 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-03 21:23:16 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-03 21:23:16 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-03 21:23:16 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 13.762 seconds (JVM running for 18.928)
2020-04-03 21:23:16 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-03 21:23:16 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-03 21:23:17 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-03 21:23:17 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-03 21:23:17 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-03 21:23:17 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-03 21:23:17 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-03 21:23:17 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-03 21:23:17 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-03 21:23:17 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585916256210"'s failed in-progress jobs.
2020-04-03 21:23:17 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585920194351 started.
2020-04-03 21:23:17 INFO  RMI TCP Connection(2)-192.168.80.1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-03 21:23:17 INFO  RMI TCP Connection(2)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-03 21:23:17 INFO  RMI TCP Connection(2)-192.168.80.1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 22 ms
2020-04-03 21:23:18 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-03 21:23:24 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 21:23:24 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:23:24 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 21:23:24 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T21:23:24.410+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-03 21:23:24 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 21:23:24 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 21:23:24 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 21:23:24 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 21:23:24 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 21:23:24 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:23:25 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 21:23:25 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 21:23:25 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 21:23:25 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T21:23:25.445+0800' WHERE (USERNAME = 'ccc');
2020-04-03 21:23:25 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 21:23:25 | 耗时 11 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 21:23:25 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 21:23:25 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 21:23:25 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 21:23:25 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 21:23:25 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 21:23:25 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 21:23:25 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 21:23:25 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-03 21:23:27 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 21:23:27 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 21:23:27 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 21:23:27 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 21:23:27 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 21:23:27 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:23:27 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 21:23:27 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 21:23:27 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 21:23:27 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:23:28 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 21:23:28 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'aaaa';
2020-04-03 21:24:24 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:24:24 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 21:24:24 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:24:24 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 21:24:24 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:24:24 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:24:25 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 21:24:25 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 21:24:25 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 21:24:25 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:24:25 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 21:24:25 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 21:24:25 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 21:24:25 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:24:26 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 21:24:26 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 21:24:26 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 21:24:26 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 21:24:26 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 21:24:26 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:24:26 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 21:24:26 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 21:24:26 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 21:24:26 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:24:26 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 21:24:26 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 21:24:26 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 21:24:26 | 耗时 2 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:24:27 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:24:27 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'aaaa';
2020-04-03 21:24:43 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:24:43 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 21:24:43 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:24:43 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 21:24:43 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:24:43 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:24:44 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 21:24:44 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 21:24:44 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 21:24:44 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:24:44 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 21:24:44 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 21:24:44 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 21:24:44 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:24:45 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 21:24:45 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'aaaa';
2020-04-03 21:24:47 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:24:47 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'aaaa' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:24:47 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 21:24:47 | 耗时 1 ms | SQL 语句：
UPDATE t_park SET OWNER = 0, MOBILE = '15623041759', WHY = '', DESCRIPTION = '15615都是', MODIFYTIME = '2020-04-03T21:24:47.460+0800', PRICE = 4.0, PLACE = '荆州', SPAN = '45615', USERNAME = 'aaaa' WHERE ID = 26;
2020-04-03 21:24:47 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 21:24:47 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:24:47 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 21:24:47 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 21:24:47 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 21:24:47 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:24:50 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 21:24:50 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'ssssss';
2020-04-03 21:24:53 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 21:24:53 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'ssssss';
2020-04-03 21:25:06 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 21:25:06 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'ssssss';
2020-04-03 21:25:09 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 21:25:09 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ssssss' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:25:09 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 21:25:09 | 耗时 1 ms | SQL 语句：
UPDATE t_park SET OWNER = 0, MOBILE = '15623041759', WHY = '', DESCRIPTION = '454156啊啊啊啊', MODIFYTIME = '2020-04-03T21:25:09.942+0800', PRICE = 4.0, PLACE = '武汉市', SPAN = 'FD', USERNAME = 'ssssss' WHERE ID = 13;
2020-04-03 21:25:09 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 21:25:09 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:25:10 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 21:25:10 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 21:25:10 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 21:25:10 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:25:11 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 21:25:11 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'aaaaaa';
2020-04-03 21:25:15 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:25:15 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'aaaaaa';
2020-04-03 21:25:18 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 21:25:18 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'aaaaaa' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:25:18 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 21:25:18 | 耗时 2 ms | SQL 语句：
UPDATE t_park SET OWNER = 0, MOBILE = '15623041759', WHY = '', DESCRIPTION = '测试数据啊啊啊', MODIFYTIME = '2020-04-03T21:25:18.331+0800', PRICE = 4.0, PLACE = '武汉市', SPAN = 'BRZ', USERNAME = 'aaaaaa' WHERE ID = 7;
2020-04-03 21:25:18 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 21:25:18 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:25:18 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 21:25:18 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 21:25:18 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 21:25:18 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:26:42 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:26:42 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'xxbb';
2020-04-03 21:26:45 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 21:26:45 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'xxbb' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:27:13 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 21:27:13 | 耗时 3 ms | SQL 语句：
UPDATE t_park SET OWNER = 0, MOBILE = '15623041759', WHY = '', DESCRIPTION = '测试数据啊啊啊', MODIFYTIME = '2020-04-03T21:26:45.262+0800', PRICE = 4.0, PLACE = '武汉市', SPAN = 'EG-6', USERNAME = 'xxbb' WHERE ID = 3;
2020-04-03 21:27:13 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 21:27:13 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:27:13 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 21:27:13 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 21:27:13 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 21:27:13 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:27:28 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 21:27:28 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 21:27:28 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 21:27:28 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:27:30 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 21:27:30 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 21:27:39 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 21:27:39 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '范甘迪' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:27:43 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 21:27:43 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '范甘迪' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:27:53 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 21:27:53 | 耗时 2 ms | SQL 语句：
UPDATE t_park SET OWNER = 0, MOBILE = '15623041777', AVAILABLE = '1', WHY = ' ', DESCRIPTION = '22222', MODIFYTIME = '2020-04-03T21:27:43.128+0800', PRICE = 4.0, PLACE = '湖北', SPAN = 'GTR', USERNAME = '范甘迪' WHERE ID = 24;
2020-04-03 21:27:53 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:27:53 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '范甘迪' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:27:55 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 21:27:55 | 耗时 2 ms | SQL 语句：
UPDATE t_park SET OWNER = 0, MOBILE = '15623041777', AVAILABLE = '1', WHY = ' ', DESCRIPTION = '22222', MODIFYTIME = '2020-04-03T21:27:53.090+0800', PRICE = 4.0, PLACE = '湖北', SPAN = 'GTR', USERNAME = '范甘迪' WHERE ID = 24;
2020-04-03 21:27:55 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 21:27:55 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '范甘迪' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:27:56 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 21:27:56 | 耗时 2 ms | SQL 语句：
UPDATE t_park SET OWNER = 0, MOBILE = '15623041777', AVAILABLE = '1', WHY = ' ', DESCRIPTION = '22222', MODIFYTIME = '2020-04-03T21:27:55.301+0800', PRICE = 4.0, PLACE = '湖北', SPAN = 'GTR', USERNAME = '范甘迪' WHERE ID = 24;
2020-04-03 21:27:56 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 21:27:56 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '范甘迪' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:27:56 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 21:27:56 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 21:27:56 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 21:27:56 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:27:56 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 21:27:56 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 21:27:56 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 21:27:56 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:28:04 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 21:28:04 | 耗时 2 ms | SQL 语句：
UPDATE t_park SET OWNER = 0, MOBILE = '15623041777', AVAILABLE = '1', WHY = ' ', DESCRIPTION = '22222', MODIFYTIME = '2020-04-03T21:27:56.186+0800', PRICE = 4.0, PLACE = '湖北', SPAN = 'GTR', USERNAME = '范甘迪' WHERE ID = 24;
2020-04-03 21:28:04 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 21:28:04 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 21:28:04 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 21:28:04 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:28:04 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:28:04 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 21:28:04 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:28:04 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:28:04 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585920194351 paused.
2020-04-03 21:28:04 INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-03 21:28:04 INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-04-03 21:28:04 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585920194351 shutting down.
2020-04-03 21:28:04 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585920194351 paused.
2020-04-03 21:28:04 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585920194351 shutdown complete.
2020-04-03 21:28:04 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-04-03 21:28:04 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-04-03 21:28:04 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-04-03 21:28:04 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-04-03 21:28:04 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-04-03 21:28:04 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-04-03 21:40:36 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 111780 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-03 21:40:36 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-03 21:40:36 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-03 21:40:36 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-03 21:40:39 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-03 21:40:39 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 21:40:39 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 191ms. Found 0 Redis repository interfaces.
2020-04-03 21:40:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:40:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$c7fcf54a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:40:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:40:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:40:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$202084fa] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:40:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$423a3b02] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:40:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:40:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$696939f6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:40:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:40:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$9c36f113] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:40:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:40:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:40:40 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-03 21:40:40 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-03 21:40:41 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-03 21:40:41 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-03 21:40:41 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-03 21:40:41 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-03 21:40:41 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-03 21:40:41 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-03 21:40:41 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:40:41 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:40:41 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:40:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:40:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:40:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:40:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:40:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:40:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:40:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:40:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:40:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:40:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:40:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:40:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:40:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:40:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:40:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:40:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:40:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:40:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:40:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:40:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:40:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:40:42 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 21:40:43 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-03 21:40:43 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-03 21:40:43 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-03 21:40:43 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-03 21:40:43 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-03 21:40:43 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 6430 ms
2020-04-03 21:40:45 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-03 21:40:46 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-03 21:40:46 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-03 21:40:46 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-03 21:40:46 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-03 21:40:46 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-03 21:40:46 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-03 21:40:46 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585921246169'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-03 21:40:46 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-03 21:40:46 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-03 21:40:46 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@5c866852
2020-04-03 21:40:46 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-03 21:40:46 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-03 21:40:46 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-03 21:40:47 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-03 21:40:47 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-03 21:40:47 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-03 21:40:47 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-03 21:40:47 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-03 21:40:47 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-03 21:40:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-03 21:40:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-03 21:40:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-03 21:40:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-03 21:40:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-03 21:40:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-03 21:40:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-03 21:40:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-03 21:40:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-03 21:40:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-03 21:40:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-03 21:40:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-03 21:40:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-03 21:40:48 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAvailableUsingGET_1
2020-04-03 21:40:48 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-03 21:40:48 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-03 21:40:48 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-03 21:40:48 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 12.864 seconds (JVM running for 18.587)
2020-04-03 21:40:48 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-03 21:40:48 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-03 21:40:49 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-03 21:40:49 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-03 21:40:49 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-03 21:40:49 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-03 21:40:49 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-03 21:40:49 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-03 21:40:49 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-03 21:40:49 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585920194351"'s failed in-progress jobs.
2020-04-03 21:40:49 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585921246169 started.
2020-04-03 21:40:49 INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-03 21:40:49 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-03 21:40:49 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 17 ms
2020-04-03 21:40:49 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-03 21:40:56 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 21:40:56 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:40:56 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 21:40:56 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T21:40:56.443+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-03 21:40:56 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 21:40:56 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 21:40:56 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 21:40:56 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 21:40:56 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 21:40:56 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:40:57 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 21:40:57 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 21:40:57 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:40:57 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T21:40:57.643+0800' WHERE (USERNAME = 'ccc');
2020-04-03 21:40:57 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:40:57 | 耗时 3 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 21:40:57 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:40:57 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 21:40:57 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:40:57 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 21:40:57 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:40:57 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 21:40:57 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:40:57 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-03 21:40:58 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 21:40:58 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:40:58 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 21:40:58 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 21:40:58 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 21:40:58 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:41:00 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 21:41:00 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'zzbb';
2020-04-03 21:41:09 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 21:41:09 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'zzbb' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:41:09 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:41:09 | 耗时 1 ms | SQL 语句：
UPDATE t_park SET OWNER = 1, MOBILE = '15623041759', WHY = '', DESCRIPTION = '测试数据啊啊啊', MODIFYTIME = '2020-04-03T21:41:09.507+0800', PRICE = 4.0, PLACE = '武汉市', SPAN = '888', USERNAME = 'zzbb' WHERE ID = 2;
2020-04-03 21:41:09 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 21:41:09 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:41:09 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 21:41:09 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 21:41:09 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 21:41:09 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:41:46 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 21:41:46 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 21:41:46 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 21:41:46 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 21:41:46 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 21:41:46 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:41:46 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 21:41:46 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 21:41:46 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 21:41:46 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:41:46 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 21:41:46 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 21:41:46 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 21:41:46 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:41:49 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 21:41:49 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chencheng';
2020-04-03 21:41:52 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 21:41:52 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'chencheng' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:41:52 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:41:52 | 耗时 1 ms | SQL 语句：
UPDATE t_park SET OWNER = 1, MOBILE = '15623041759', WHY = '', DESCRIPTION = '测试数据11111111ddddff dddfdfsafcsads 得撒啊啊啊啊', MODIFYTIME = '2020-04-03T21:41:52.481+0800', PRICE = 4.0, PLACE = '武汉市', SPAN = 'GTR 32', USERNAME = 'chencheng' WHERE ID = 16;
2020-04-03 21:41:52 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 21:41:52 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:41:52 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 21:41:52 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 21:41:52 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 21:41:52 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:41:54 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 21:41:54 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chencheng';
2020-04-03 21:42:10 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 21:42:10 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chencheng';
2020-04-03 21:42:13 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 21:42:13 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'chencheng' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:42:13 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 21:42:13 | 耗时 1 ms | SQL 语句：
UPDATE t_park SET OWNER = 1, MOBILE = '15623041759', WHY = '', DESCRIPTION = '测试数据11111111ddddff dddfdfsafcsads 得撒啊啊啊啊啊啊啊', MODIFYTIME = '2020-04-03T21:42:13.482+0800', PRICE = 4.0, PLACE = '武汉市', SPAN = 'GTR 32', USERNAME = 'chencheng' WHERE ID = 16;
2020-04-03 21:42:13 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 21:42:13 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:42:13 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 21:42:13 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 21:42:13 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 21:42:13 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:42:43 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 21:42:43 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 21:42:43 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 21:42:43 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 21:42:43 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 21:42:43 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:42:43 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 21:42:43 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 21:42:44 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:42:44 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:42:44 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:42:44 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 21:42:44 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:42:44 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:42:47 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 21:42:47 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'xxbb';
2020-04-03 21:42:49 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 21:42:49 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'xxbb' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:42:49 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 21:42:49 | 耗时 1 ms | SQL 语句：
UPDATE t_park SET OWNER = 1, MOBILE = '15623041759', WHY = '', DESCRIPTION = '测试数据啊啊啊1111', MODIFYTIME = '2020-04-03T21:42:49.685+0800', PRICE = 4.0, PLACE = '武汉市', SPAN = 'EG-6', USERNAME = 'xxbb' WHERE ID = 3;
2020-04-03 21:42:49 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 21:42:49 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:42:49 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 21:42:49 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 21:42:49 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 21:42:49 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:43:03 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 21:43:03 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 21:43:03 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 21:43:03 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:43:12 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:43:12 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:43:12 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:43:12 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 21:43:12 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:43:12 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:43:20 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 21:43:20 | 耗时 11 ms | SQL 语句：
SELECT COUNT(1) FROM t_log;
2020-04-03 21:43:21 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 21:43:21 | 耗时 10 ms | SQL 语句：
SELECT COUNT(1) FROM t_login_log;
2020-04-03 21:43:21 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 21:43:21 | 耗时 1 ms | SQL 语句：
SELECT ID, `SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME FROM t_login_log ORDER BY login_time DESC LIMIT 0,10;
2020-04-03 21:43:22 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 21:43:22 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_log;
2020-04-03 21:43:23 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:43:23 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM t_login_log;
2020-04-03 21:43:23 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:43:23 | 耗时 1 ms | SQL 语句：
SELECT ID, `SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME FROM t_login_log ORDER BY login_time DESC LIMIT 0,10;
2020-04-03 21:43:24 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 21:43:24 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_log;
2020-04-03 21:43:26 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 21:43:26 | 耗时 14 ms | SQL 语句：
SELECT COUNT(1) FROM t_login_log;
2020-04-03 21:43:26 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 21:43:26 | 耗时 1 ms | SQL 语句：
SELECT ID, `SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME FROM t_login_log ORDER BY login_time DESC LIMIT 0,10;
2020-04-03 21:43:32 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 21:43:32 | 耗时 11 ms | SQL 语句：
DELETE FROM t_login_log WHERE ID IN ('158');
2020-04-03 21:43:32 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 21:43:32 | 耗时 12 ms | SQL 语句：
SELECT COUNT(1) FROM t_login_log;
2020-04-03 21:43:32 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 21:43:32 | 耗时 1 ms | SQL 语句：
SELECT ID, `SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME FROM t_login_log ORDER BY login_time DESC LIMIT 0,10;
2020-04-03 21:43:34 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:43:34 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 21:43:34 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:43:34 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 21:43:34 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:43:34 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:43:49 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 21:43:49 | 耗时 13 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ) TOTAL;
2020-04-03 21:43:49 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 21:43:49 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ORDER BY userId LIMIT 0,10;
2020-04-03 21:43:50 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 21:43:50 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-03 21:43:53 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 21:43:53 | 耗时 1 ms | SQL 语句：
SELECT MENU_ID, ICON, ORDER_NUM, MENU_NAME, TYPE, URL, PARENT_ID, MODIFY_TIME, CREATE_TIME, PERMS FROM t_menu ORDER BY ORDER_NUM ASC;
2020-04-03 21:43:53 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 21:43:53 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT r.role_id roleId, r.role_name roleName, r.remark, r.create_time createTime, r.modify_time modifyTime, GROUP_CONCAT(rm.menu_id) menuIds FROM t_role r LEFT JOIN t_role_menu rm ON (r.role_id = rm.role_id) WHERE 1 = 1 GROUP BY r.role_id ) TOTAL;
2020-04-03 21:43:53 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 21:43:53 | 耗时 1 ms | SQL 语句：
SELECT r.role_id roleId, r.role_name roleName, r.remark, r.create_time createTime, r.modify_time modifyTime, GROUP_CONCAT(rm.menu_id) menuIds FROM t_role r LEFT JOIN t_role_menu rm ON (r.role_id = rm.role_id) WHERE 1 = 1 GROUP BY r.role_id ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:43:55 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 21:43:55 | 耗时 1 ms | SQL 语句：
SELECT MENU_ID, ICON, ORDER_NUM, MENU_NAME, TYPE, URL, PARENT_ID, MODIFY_TIME, CREATE_TIME, PERMS FROM t_menu ORDER BY ORDER_NUM ASC;
2020-04-03 21:43:56 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:43:56 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept ORDER BY ORDER_NUM ASC;
2020-04-03 21:43:59 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 21:43:59 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:43:59 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 21:43:59 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 21:43:59 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 21:43:59 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:44:02 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 21:44:02 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chenc';
2020-04-03 21:44:15 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 21:44:15 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:44:15 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 21:44:15 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (PLACE = '武汉市' AND OWNER = 1);
2020-04-03 21:44:15 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 21:44:15 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (PLACE = '武汉市' AND OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:44:15 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 21:44:15 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:44:15 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 21:44:15 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (PLACE = '武汉市' AND OWNER = 1);
2020-04-03 21:44:15 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 21:44:15 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (PLACE = '武汉市' AND OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:44:22 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 21:44:22 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:44:22 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 21:44:22 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (USERNAME = 'chencheng' AND OWNER = 1);
2020-04-03 21:44:22 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 21:44:22 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (USERNAME = 'chencheng' AND OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:44:22 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 21:44:22 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:44:22 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 21:44:22 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (USERNAME = 'chencheng' AND OWNER = 1);
2020-04-03 21:44:22 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 21:44:22 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (USERNAME = 'chencheng' AND OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:44:29 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 21:44:29 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:44:29 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 21:44:29 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 21:44:29 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 21:44:29 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:44:31 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 21:44:31 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:44:31 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 21:44:31 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 21:44:31 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 21:44:31 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:44:35 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 21:44:35 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:44:35 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 21:44:35 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 21:44:35 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 21:44:35 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:47:20 INFO  File Watcher org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 21:47:20 INFO  File Watcher org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 134ms. Found 0 Redis repository interfaces.
2020-04-03 21:47:27 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 21:47:27 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 21:47:27 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 21:47:27 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 21:47:27 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 21:47:27 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:47:28 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 21:47:28 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 21:47:28 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:47:28 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:47:29 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:47:29 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 21:47:29 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:47:29 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:47:30 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 21:47:30 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 21:47:30 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 21:47:30 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 21:47:30 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 21:47:30 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:47:30 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 21:47:30 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 21:47:30 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 21:47:30 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:47:30 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 21:47:30 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 21:47:30 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 21:47:30 | 耗时 2 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:47:34 INFO  http-nio-8080-exec-10 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 21:47:34 INFO  http-nio-8080-exec-10 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 83ms. Found 0 Redis repository interfaces.
2020-04-03 21:47:36 INFO  http-nio-8080-exec-10 org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-03 21:47:36 INFO  http-nio-8080-exec-10 org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 21:47:36 INFO  http-nio-8080-exec-10 org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 228ms. Found 0 Redis repository interfaces.
2020-04-03 21:47:36 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 21:47:36 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:47:36 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 21:47:36 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '0' AND OWNER = 1);
2020-04-03 21:47:41 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 21:47:41 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:47:41 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 21:47:41 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND OWNER = 1);
2020-04-03 21:47:41 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 21:47:41 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:47:45 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 21:47:45 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:47:45 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 21:47:45 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '0' AND OWNER = 1);
2020-04-03 21:47:48 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 21:47:48 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:47:48 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 21:47:48 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1' AND OWNER = 1);
2020-04-03 21:47:48 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 21:47:48 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1' AND OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:47:50 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:47:50 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:47:50 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:47:50 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1' AND OWNER = 1);
2020-04-03 21:47:50 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:47:50 | 耗时 2 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1' AND OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:47:51 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 21:47:51 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:47:51 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 21:47:51 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 21:47:51 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 21:47:51 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:47:54 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 21:47:54 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 21:47:54 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 21:47:54 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:47:57 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 21:47:57 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 21:47:57 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 21:47:57 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:48:27 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 21:48:27 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 21:48:27 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 21:48:27 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:48:30 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 21:48:30 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:48:30 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 21:48:30 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 21:48:30 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 21:48:30 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:48:36 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 21:48:36 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 21:48:36 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 21:48:36 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:49:39 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 21:49:39 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '藤原豆腐店' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:49:39 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 21:49:39 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:49:39 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 21:49:39 | 耗时 1 ms | SQL 语句：
INSERT INTO t_park (OWNER, MOBILE, AVAILABLE, DESCRIPTION, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME) VALUES (1, '15623041759', '0', '86上山了 86上山了', '2020-04-03T21:49:39.805+0800', '1', 4.0, '秋名山', '8686', '1', '藤原豆腐店');
2020-04-03 21:49:39 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 21:49:39 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 21:49:39 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 21:49:39 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:50:03 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 21:50:03 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 21:50:03 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 21:50:03 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:50:06 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 21:50:06 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 21:50:06 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 21:50:06 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:50:18 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 21:50:18 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 21:50:18 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 21:50:18 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 21:50:18 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 21:50:18 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:50:19 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 21:50:19 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 21:50:19 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 21:50:19 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 21:50:19 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 21:50:19 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:50:24 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 21:50:24 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 21:50:24 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 21:50:24 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:50:28 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 21:50:28 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原豆腐店';
2020-04-03 21:50:30 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 21:50:30 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原豆腐店';
2020-04-03 21:50:32 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:50:32 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '藤原豆腐店' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:50:32 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 21:50:32 | 耗时 1 ms | SQL 语句：
UPDATE t_park SET OWNER = 0, MOBILE = '15623041759', AVAILABLE = '1', WHY = '', DESCRIPTION = '86上山了 86上山了', MODIFYTIME = '2020-04-03T21:50:32.552+0800', PRICE = 4.0, PLACE = '秋名山', SPAN = '8686', USERNAME = '藤原豆腐店' WHERE ID = 28;
2020-04-03 21:50:32 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 21:50:32 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 21:50:32 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 21:50:32 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:50:34 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 21:50:34 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 21:50:34 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 21:50:34 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:50:37 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 21:50:37 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:50:37 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 21:50:37 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 21:50:37 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 21:50:37 | 耗时 2 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:50:44 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 21:50:44 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 21:50:44 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 21:50:44 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 21:50:44 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 21:50:44 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:50:45 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 21:50:45 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 21:50:45 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 21:50:45 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:50:45 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 21:50:45 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 21:50:45 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 21:50:45 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:50:57 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 21:50:57 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 21:50:57 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 21:50:57 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 21:50:57 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 21:50:57 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:50:58 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 21:50:58 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 21:50:58 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 21:50:58 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:50:58 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 21:50:58 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 21:50:58 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 21:50:58 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:51:03 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 21:51:03 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 21:51:03 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 21:51:03 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:51:07 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 21:51:07 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:51:07 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 21:51:07 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 21:51:07 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 21:51:07 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:51:38 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 21:51:38 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 21:51:38 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 21:51:38 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 21:51:38 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 21:51:38 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:51:39 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 21:51:39 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 21:51:39 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 21:51:39 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:51:39 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 21:51:39 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 21:51:39 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 21:51:39 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:51:42 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 21:51:42 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 21:51:50 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 21:51:50 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '范甘迪' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:51:50 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 21:51:50 | 耗时 1 ms | SQL 语句：
UPDATE t_park SET OWNER = 1, MOBILE = '15623041777', WHY = ' ', DESCRIPTION = '22222打的', MODIFYTIME = '2020-04-03T21:51:50.708+0800', PRICE = 4.0, PLACE = '湖北', SPAN = 'GTR', USERNAME = '范甘迪' WHERE ID = 24;
2020-04-03 21:51:50 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 21:51:50 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 21:51:50 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 21:51:50 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 21:51:50 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 21:51:50 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 21:52:06 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585921246169 paused.
2020-04-03 21:52:06 INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-03 21:52:06 INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-04-03 21:52:06 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585921246169 shutting down.
2020-04-03 21:52:06 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585921246169 paused.
2020-04-03 21:52:06 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585921246169 shutdown complete.
2020-04-03 21:52:07 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-04-03 21:52:07 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-04-03 21:52:07 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-04-03 21:52:07 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-04-03 21:52:07 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-04-03 21:52:07 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2020-04-03 22:03:49 INFO  main com.ccc.eirc.EircApplication Starting EircApplication on DESKTOP-C7SKRPK with PID 118564 (D:\Develop-Tools\IDEA\IDEA-workspace\eirc\target\classes started by ccc in D:\Develop-Tools\IDEA\IDEA-workspace\eirc)
2020-04-03 22:03:49 INFO  main com.ccc.eirc.EircApplication The following profiles are active: develop
2020-04-03 22:03:49 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-04-03 22:03:49 INFO  main org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-04-03 22:03:51 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-03 22:03:51 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-03 22:03:52 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 162ms. Found 0 Redis repository interfaces.
2020-04-03 22:03:52 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 22:03:52 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$986a5362] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 22:03:52 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 22:03:52 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 22:03:53 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'eircProperties' of type [com.ccc.eirc.commons.properties.EircProperties$$EnhancerBySpringCGLIB$$f08de312] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 22:03:53 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.ccc.eirc.commons.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$12a7991a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 22:03:53 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 22:03:53 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.ccc.eirc.commons.configuration.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$39d6980e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 22:03:53 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 22:03:53 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$6ca44f2b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 22:03:53 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 22:03:53 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 22:03:53 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2020-04-03 22:03:53 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2020-04-03 22:03:53 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2020-04-03 22:03:53 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2020-04-03 22:03:53 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2020-04-03 22:03:53 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2020-04-03 22:03:53 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2020-04-03 22:03:53 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2020-04-03 22:03:53 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 22:03:53 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 22:03:53 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 22:03:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 22:03:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 22:03:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 22:03:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 22:03:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 22:03:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 22:03:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.ccc.eirc.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 22:03:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.ccc.eirc.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 22:03:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 22:03:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy119] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 22:03:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 22:03:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 22:03:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 22:03:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.ccc.eirc.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 22:03:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 22:03:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 22:03:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.ccc.eirc.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 22:03:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.ccc.eirc.commons.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 22:03:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 22:03:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 22:03:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 22:03:54 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-03 22:03:55 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8080 (http)
2020-04-03 22:03:55 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8080"]
2020-04-03 22:03:55 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2020-04-03 22:03:55 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-03 22:03:55 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2020-04-03 22:03:55 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 6573 ms
2020-04-03 22:03:58 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2020-04-03 22:03:58 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-03 22:03:58 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2020-04-03 22:03:58 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-03 22:03:58 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2020-04-03 22:03:58 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2020-04-03 22:03:58 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2020-04-03 22:03:58 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'Eirc_Scheduler' with instanceId 'DESKTOP-C7SKRPK1585922638748'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2020-04-03 22:03:58 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'Eirc_Scheduler' initialized from an externally provided properties instance.
2020-04-03 22:03:58 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2020-04-03 22:03:58 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@4ef435f3
2020-04-03 22:03:59 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'applicationTaskExecutor'
2020-04-03 22:03:59 INFO  main org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
2020-04-03 22:03:59 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2020-04-03 22:04:00 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2020-04-03 22:04:00 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2020-04-03 22:04:00 INFO  main springfox.documentation.spring.web.scanners.ApiListingReferenceScanner Scanning for api listing references
2020-04-03 22:04:00 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: getDeptTreeUsingGET_1
2020-04-03 22:04:00 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_1
2020-04-03 22:04:00 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_2
2020-04-03 22:04:00 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_3
2020-04-03 22:04:00 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_4
2020-04-03 22:04:00 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_5
2020-04-03 22:04:00 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_6
2020-04-03 22:04:00 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_1
2020-04-03 22:04:00 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: handleUsingGET_2
2020-04-03 22:04:00 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_7
2020-04-03 22:04:00 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_8
2020-04-03 22:04:00 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: exportUsingGET_9
2020-04-03 22:04:00 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: parkAvailableUsingGET_1
2020-04-03 22:04:00 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: httptraceUsingGET_1
2020-04-03 22:04:00 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: indexUsingGET_1
2020-04-03 22:04:00 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: logUsingGET_1
2020-04-03 22:04:00 INFO  main springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator Generating unique operation named: onlineUsingGET_1
2020-04-03 22:04:00 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [Eirc_Scheduler] in 1 seconds
2020-04-03 22:04:00 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8080"]
2020-04-03 22:04:00 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8080 (http) with context path ''
2020-04-03 22:04:00 INFO  main com.ccc.eirc.EircApplication Started EircApplication in 13.372 seconds (JVM running for 19.475)
2020-04-03 22:04:01 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2020-04-03 22:04:01 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2020-04-03 22:04:01 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2020-04-03 22:04:01 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2020-04-03 22:04:01 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2020-04-03 22:04:01 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner                                                       
2020-04-03 22:04:01 INFO  main com.ccc.eirc.commons.runner.EircStartedUpRunner EIRC 停车系统启动完毕，地址：http://192.168.80.1:8080/login
2020-04-03 22:04:01 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2020-04-03 22:04:01 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2020-04-03 22:04:01 INFO  Quartz Scheduler [Eirc_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "DESKTOP-C7SKRPK1585921246169"'s failed in-progress jobs.
2020-04-03 22:04:01 INFO  Quartz Scheduler [Eirc_Scheduler] org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585922638748 started.
2020-04-03 22:04:02 INFO  http-nio-8080-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-03 22:04:02 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2020-04-03 22:04:02 INFO  http-nio-8080-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 20 ms
2020-04-03 22:04:02 INFO  http-nio-8080-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2020-04-03 22:04:08 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 22:04:08 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:04:08 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 22:04:08 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T22:04:08.860+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-03 22:04:09 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 22:04:09 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 22:04:09 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 22:04:09 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 22:04:09 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 22:04:09 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:04:09 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 22:04:09 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 22:04:09 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 22:04:09 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T22:04:09.795+0800' WHERE (USERNAME = 'ccc');
2020-04-03 22:04:09 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 22:04:09 | 耗时 9 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 22:04:09 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 22:04:09 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 22:04:09 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 22:04:09 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 22:04:09 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 22:04:09 | 耗时 2 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 22:04:09 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 22:04:09 | 耗时 2 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-03 22:04:11 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 22:04:11 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 22:04:11 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 22:04:11 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 22:04:11 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 22:04:11 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:04:11 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 22:04:11 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 22:04:11 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 22:04:11 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:04:13 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 22:04:13 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 22:04:13 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 22:04:13 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:04:23 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 22:04:23 | 耗时 2 ms | SQL 语句：
DELETE FROM t_park WHERE ID IN ('28');
2020-04-03 22:04:23 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 22:04:23 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 22:04:23 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 22:04:23 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:05:06 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 22:05:06 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '藤原豆腐店' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:05:06 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 22:05:06 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:05:06 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 22:05:06 | 耗时 2 ms | SQL 语句：
INSERT INTO t_park (OWNER, MOBILE, AVAILABLE, DESCRIPTION, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME) VALUES (1, '15623041759', '0', '1111', '2020-04-03T22:05:06.795+0800', '1', 4.0, '武汉', '1111', '1', '藤原豆腐店');
2020-04-03 22:05:06 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 22:05:06 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 22:05:06 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 22:05:06 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:05:08 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 22:05:08 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 22:05:08 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 22:05:08 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:05:10 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 22:05:10 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:05:10 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 22:05:10 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 22:05:10 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 22:05:10 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:05:13 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 22:05:13 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 22:05:13 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 22:05:13 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:05:14 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 22:05:14 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原豆腐店';
2020-04-03 22:05:21 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 22:05:21 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '藤原豆腐店' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:05:21 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 22:05:21 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:05:21 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 22:05:21 | 耗时 2 ms | SQL 语句：
UPDATE t_park SET OWNER = 1, MOBILE = '15623041759', AVAILABLE = '1', WHY = '可以', DESCRIPTION = '1111', MODIFYTIME = '2020-04-03T22:05:21.441+0800', PRICE = 4.0, PLACE = '武汉', SPAN = '1111', USERNAME = '藤原豆腐店' WHERE ID = 29;
2020-04-03 22:05:21 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 22:05:21 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 22:05:21 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 22:05:21 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:05:23 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 22:05:23 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 22:05:23 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 22:05:23 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:05:25 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 22:05:25 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:05:25 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 22:05:25 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 22:05:25 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 22:05:25 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:05:27 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 22:05:27 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '范甘迪';
2020-04-03 22:05:31 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 22:05:31 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '范甘迪' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:05:31 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 22:05:31 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:05:31 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 22:05:31 | 耗时 1 ms | SQL 语句：
UPDATE t_park SET OWNER = 1, MOBILE = '15623041777', WHY = ' ', DESCRIPTION = '22222打的 啊啊啊啊', MODIFYTIME = '2020-04-03T22:05:31.206+0800', PRICE = 4.0, PLACE = '湖北', SPAN = 'GTR', USERNAME = '范甘迪' WHERE ID = 24;
2020-04-03 22:05:31 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 22:05:31 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:05:31 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 22:05:31 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 22:05:31 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 22:05:31 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:05:42 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 22:05:42 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = 'chencheng';
2020-04-03 22:05:45 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 22:05:45 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'chencheng' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:05:45 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 22:05:45 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:05:45 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 22:05:45 | 耗时 1 ms | SQL 语句：
UPDATE t_park SET OWNER = 1, MOBILE = '15623041759', WHY = '', DESCRIPTION = '测试数据11111111ddddff dddfdfsafcsads 得撒啊啊啊啊啊啊啊啊啊', MODIFYTIME = '2020-04-03T22:05:45.208+0800', PRICE = 4.0, PLACE = '武汉市', SPAN = 'GTR 32', USERNAME = 'chencheng' WHERE ID = 16;
2020-04-03 22:05:45 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 22:05:45 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:05:45 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 22:05:45 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 22:05:45 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 22:05:45 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:05:54 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 22:05:54 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 22:05:54 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 22:05:54 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:05:57 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 22:05:57 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:05:57 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 22:05:57 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 22:05:57 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 22:05:57 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:05:59 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 22:05:59 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 22:05:59 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 22:05:59 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:06:00 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 22:06:00 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原豆腐店';
2020-04-03 22:06:03 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 22:06:03 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = '藤原豆腐店' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:06:03 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 22:06:03 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:06:03 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 22:06:03 | 耗时 1 ms | SQL 语句：
UPDATE t_park SET OWNER = 1, MOBILE = '15623041759', AVAILABLE = '0', WHY = '可以', DESCRIPTION = '1111', MODIFYTIME = '2020-04-03T22:06:03.525+0800', PRICE = 4.0, PLACE = '武汉', SPAN = '1111', USERNAME = '藤原豆腐店' WHERE ID = 29;
2020-04-03 22:06:03 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 22:06:03 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 22:06:03 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 22:06:03 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:06:05 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 22:06:05 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:06:05 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 22:06:05 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 22:06:05 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 22:06:05 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:06:06 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 22:06:06 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原豆腐店';
2020-04-03 22:06:19 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 22:06:19 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:06:19 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 22:06:19 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '0' AND OWNER = 1);
2020-04-03 22:06:27 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 22:06:27 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:06:27 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 22:06:27 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '0' AND OWNER = 1);
2020-04-03 22:06:27 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 22:06:27 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '0' AND OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:06:29 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 22:06:29 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:06:29 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 22:06:29 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1' AND OWNER = 1);
2020-04-03 22:06:29 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 22:06:29 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1' AND OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:06:31 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 22:06:31 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:06:31 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 22:06:31 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 22:06:31 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 22:06:31 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:07:13 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 22:07:13 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 22:07:13 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 22:07:13 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:07:23 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 22:07:23 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:07:23 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 22:07:23 | 耗时 1 ms | SQL 语句：
INSERT INTO t_order (USER_ID, PARK_ID) VALUES (1, 16);
2020-04-03 22:07:23 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 22:07:23 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (ID = 16);
2020-04-03 22:07:23 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 22:07:23 | 耗时 1 ms | SQL 语句：
UPDATE t_park SET OWNER = 1, MOBILE = '15623041759', AVAILABLE = '1', WHY = '', DESCRIPTION = '测试数据11111111ddddff dddfdfsafcsads 得撒啊啊啊啊啊啊啊啊啊', MODIFYTIME = '2020-04-03T22:07:23.733+0800', CREATETIME = '2020-03-31T20:07:19.000+0800', REVIEW = '1', PRICE = 4.0, PLACE = '武汉市', SPAN = 'GTR 32', STATUS = '0', USERNAME = 'chencheng' WHERE ID = 16;
2020-04-03 22:07:23 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 22:07:23 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 22:07:23 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 22:07:23 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:07:26 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 22:07:26 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:07:26 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 22:07:26 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 22:07:26 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 22:07:26 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:07:32 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 22:07:32 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 22:07:32 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 22:07:32 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:07:36 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 22:07:36 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:07:36 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 22:07:36 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 22:07:36 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 22:07:36 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:08:02 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 22:08:02 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:08:02 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 22:08:02 | 耗时 1 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T22:08:02.197+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'cccc');
2020-04-03 22:08:02 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 22:08:02 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-03 22:08:02 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 22:08:02 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 22:08:02 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 22:08:02 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:08:02 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 22:08:02 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-03 22:08:02 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 22:08:02 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T22:08:02.829+0800' WHERE (USERNAME = 'cccc');
2020-04-03 22:08:02 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 22:08:02 | 耗时 15 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 22:08:02 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 22:08:02 | 耗时 0 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 22:08:02 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 22:08:02 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 22:08:02 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 22:08:02 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 22:08:02 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 22:08:02 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'cccc' GROUP BY days;
2020-04-03 22:08:04 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 22:08:04 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-03 22:08:04 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 22:08:04 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 22:08:04 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 22:08:04 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 22:08:04 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 22:08:04 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:08:28 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 22:08:28 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-03 22:08:28 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 22:08:28 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 22:08:28 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 22:08:28 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:08:29 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 22:08:29 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-03 22:08:29 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 22:08:29 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 22:08:29 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 22:08:29 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:08:43 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 22:08:43 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:08:43 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 22:08:43 | 耗时 1 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T22:08:43.341+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-03 22:08:43 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 22:08:43 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 22:08:43 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 22:08:43 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 22:08:43 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 22:08:43 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:08:43 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 22:08:43 | 耗时 5 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 22:08:43 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 22:08:43 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T22:08:43.927+0800' WHERE (USERNAME = 'ccc');
2020-04-03 22:08:43 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 22:08:43 | 耗时 13 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 22:08:43 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 22:08:43 | 耗时 0 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 22:08:43 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 22:08:43 | 耗时 1 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 22:08:43 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 22:08:43 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 22:08:43 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 22:08:43 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-03 22:08:45 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 22:08:45 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 22:08:45 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 22:08:45 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 22:08:45 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 22:08:45 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:08:45 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 22:08:45 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 22:08:45 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 22:08:45 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:08:50 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 22:08:50 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 22:08:50 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 22:08:50 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:08:55 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 22:08:55 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '陈ccc';
2020-04-03 22:09:42 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 22:09:42 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:09:42 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 22:09:42 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T22:09:42.219+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'cccc');
2020-04-03 22:09:42 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 22:09:42 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-03 22:09:42 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 22:09:42 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 22:09:42 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 22:09:42 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:09:42 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 22:09:42 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-03 22:09:42 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 22:09:42 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T22:09:42.779+0800' WHERE (USERNAME = 'cccc');
2020-04-03 22:09:42 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 22:09:42 | 耗时 7 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 22:09:42 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 22:09:42 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 22:09:42 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 22:09:42 | 耗时 0 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 22:09:42 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 22:09:42 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 22:09:42 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 22:09:42 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'cccc' GROUP BY days;
2020-04-03 22:09:44 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 22:09:44 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-03 22:09:44 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 22:09:44 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 22:09:44 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 22:09:44 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 22:09:44 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 22:09:44 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:09:52 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 22:09:52 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-03 22:09:52 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 22:09:52 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 22:09:52 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 22:09:52 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:09:52 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 22:09:52 | 耗时 5 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-03 22:09:52 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 22:09:52 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 22:09:52 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 22:09:52 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:09:53 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 22:09:53 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-03 22:09:53 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 22:09:53 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 22:09:53 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 22:09:53 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:09:53 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 22:09:53 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-03 22:09:53 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 22:09:53 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 22:09:53 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 22:09:53 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:09:54 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 22:09:54 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-03 22:09:54 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 22:09:54 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 22:09:54 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 22:09:54 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:09:55 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 22:09:55 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-03 22:09:55 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 22:09:55 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 22:09:55 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 22:09:55 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:09:55 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 22:09:55 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-03 22:09:55 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 22:09:55 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 22:09:55 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 22:09:55 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:09:56 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 22:09:56 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-03 22:09:56 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 22:09:56 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 22:09:56 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 22:09:56 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:10:30 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 22:10:30 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-03 22:10:30 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 22:10:30 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 22:10:30 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 22:10:30 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:10:31 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 22:10:31 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-03 22:10:31 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 22:10:31 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 22:10:31 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 22:10:31 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:10:32 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 22:10:32 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:10:32 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 22:10:32 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 10);
2020-04-03 22:10:32 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 22:10:32 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 10) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:11:44 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 22:11:44 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc';
2020-04-03 22:11:44 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 22:11:44 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'cccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 22:11:44 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 22:11:44 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:11:45 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 22:11:45 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'cccc') ORDER BY m.order_num;
2020-04-03 22:11:51 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 22:11:51 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 22:11:51 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 22:11:51 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:11:55 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 22:11:55 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:11:55 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 22:11:55 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 10);
2020-04-03 22:11:55 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 22:11:55 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 10) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:11:58 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 22:11:58 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '大师啊';
2020-04-03 22:12:00 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 22:12:00 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '大师啊';
2020-04-03 22:12:08 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 22:12:08 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 22:12:08 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 22:12:08 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:12:34 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 22:12:34 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:12:34 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 22:12:34 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 10);
2020-04-03 22:12:34 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 22:12:34 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 10) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:12:38 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 22:12:38 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:12:38 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 22:12:38 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (USERNAME = '大师啊' AND OWNER = 10);
2020-04-03 22:12:38 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 22:12:38 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (USERNAME = '大师啊' AND OWNER = 10) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:12:46 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 22:12:46 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:12:46 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 22:12:46 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (USERNAME = '大师啊' AND AVAILABLE = '0' AND OWNER = 10);
2020-04-03 22:12:46 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 22:12:46 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (USERNAME = '大师啊' AND AVAILABLE = '0' AND OWNER = 10) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:12:50 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 22:12:50 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:12:50 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 22:12:50 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (AVAILABLE = '0' AND OWNER = 10);
2020-04-03 22:12:50 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 22:12:50 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (AVAILABLE = '0' AND OWNER = 10) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:12:53 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 22:12:53 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:12:53 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 22:12:53 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 10);
2020-04-03 22:12:53 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 22:12:53 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 10) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:12:53 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 22:12:53 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:12:53 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 22:12:53 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 10);
2020-04-03 22:12:53 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 22:12:53 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 10) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:13:16 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 22:13:16 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 22:13:16 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 22:13:16 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:13:17 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 22:13:17 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'cccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:13:17 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 22:13:17 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 10);
2020-04-03 22:13:17 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 22:13:17 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 10) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:14:24 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 22:14:24 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:14:24 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 22:14:24 | 耗时 1 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T22:14:24.922+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-03 22:14:24 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 22:14:24 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 22:14:24 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 22:14:24 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 22:14:24 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 22:14:24 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:14:25 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 22:14:25 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 22:14:25 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 22:14:25 | 耗时 3 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T22:14:25.464+0800' WHERE (USERNAME = 'ccc');
2020-04-03 22:14:25 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 22:14:25 | 耗时 4 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 22:14:25 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 22:14:25 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 22:14:25 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 22:14:25 | 耗时 0 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 22:14:25 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 22:14:25 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 22:14:25 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 22:14:25 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-03 22:14:32 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 22:14:32 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 22:14:32 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 22:14:32 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 22:14:32 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 22:14:32 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:14:32 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 22:14:32 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 22:14:32 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 22:14:32 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 22:14:32 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 22:14:32 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 22:14:32 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 22:14:32 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:14:32 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 22:14:32 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 22:14:32 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 22:14:32 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:14:45 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 22:14:45 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:14:45 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 22:14:45 | 耗时 2 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2020-04-03T22:14:45.779+0800', 'Chrome 80', '192.168.80.1', '内网IP|0|0|内网IP|内网IP', 'ccc');
2020-04-03 22:14:45 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 22:14:45 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 22:14:45 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 22:14:45 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 22:14:45 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 22:14:45 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:14:46 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 22:14:46 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 22:14:46 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 22:14:46 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2020-04-03T22:14:46.327+0800' WHERE (USERNAME = 'ccc');
2020-04-03 22:14:46 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 22:14:46 | 耗时 4 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2020-04-03 22:14:46 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 22:14:46 | 耗时 0 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 22:14:46 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 22:14:46 | 耗时 0 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2020-04-03 22:14:46 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 22:14:46 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2020-04-03 22:14:46 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 22:14:46 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'ccc' GROUP BY days;
2020-04-03 22:14:50 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 22:14:50 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 22:14:50 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 22:14:50 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 22:14:50 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 22:14:50 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:14:50 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 22:14:50 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc') ORDER BY m.order_num;
2020-04-03 22:14:50 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 22:14:50 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'ccc';
2020-04-03 22:14:50 INFO  http-nio-8080-exec-8 p6spy 2020-04-03 22:14:50 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'ccc' AND m.perms IS NOT NULL AND m.perms <> '';
2020-04-03 22:14:50 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 22:14:50 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:14:50 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 22:14:50 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 22:14:50 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 22:14:50 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:15:21 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 22:15:21 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1');
2020-04-03 22:15:21 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 22:15:21 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (STATUS = '1' AND AVAILABLE = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:15:27 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 22:15:27 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (REVIEW = '1');
2020-04-03 22:15:27 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 22:15:27 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (REVIEW = '1') ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:15:28 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 22:15:28 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原豆腐店';
2020-04-03 22:15:37 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 22:15:37 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ccc' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:15:37 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 22:15:37 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_park WHERE (OWNER = 1);
2020-04-03 22:15:37 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 22:15:37 | 耗时 1 ms | SQL 语句：
SELECT ID, OWNER, MOBILE, AVAILABLE, WHY, DESCRIPTION, MODIFYTIME, CREATETIME, REVIEW, PRICE, PLACE, SPAN, STATUS, USERNAME FROM t_park WHERE (OWNER = 1) ORDER BY createTime DESC LIMIT 0,10;
2020-04-03 22:15:39 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 22:15:39 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_park WHERE USERNAME = '藤原豆腐店';
2020-04-03 22:16:17 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 22:16:17 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ) TOTAL;
2020-04-03 22:16:17 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 22:16:17 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ORDER BY userId LIMIT 0,10;
2020-04-03 22:16:17 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 22:16:17 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-03 22:16:21 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 22:16:21 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'Reina' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:16:26 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 22:16:26 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'Georgie' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:16:41 INFO  http-nio-8080-exec-1 p6spy 2020-04-03 22:16:41 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'Scott' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:16:41 INFO  http-nio-8080-exec-2 p6spy 2020-04-03 22:16:41 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-03 22:16:41 INFO  http-nio-8080-exec-9 p6spy 2020-04-03 22:16:41 | 耗时 1 ms | SQL 语句：
SELECT ROLE_ID, MODIFY_TIME, CREATE_TIME, ROLE_NAME, REMARK FROM t_role;
2020-04-03 22:16:51 INFO  http-nio-8080-exec-3 p6spy 2020-04-03 22:16:51 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'Scott' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:16:51 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 22:16:51 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET DESCRIPTION = '我是scott。', MODIFY_TIME = '2020-04-03T22:16:51.306+0800', EMAIL = 'scott@gmail.com', SSEX = '0', MOBILE = '15623041759', DEPT_ID = 10, STATUS = '1' WHERE USER_ID = 2;
2020-04-03 22:16:51 INFO  http-nio-8080-exec-7 p6spy 2020-04-03 22:16:51 | 耗时 1 ms | SQL 语句：
DELETE FROM t_user_role WHERE (USER_ID = 2);
2020-04-03 22:16:51 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 22:16:51 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ) TOTAL;
2020-04-03 22:16:51 INFO  http-nio-8080-exec-6 p6spy 2020-04-03 22:16:51 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.avatar, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE 1 = 1 GROUP BY u.username, u.user_id, u.email, u.mobile, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar ORDER BY userId LIMIT 0,10;
2020-04-03 22:16:56 INFO  http-nio-8080-exec-4 p6spy 2020-04-03 22:16:56 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.avatar, u.description, d.dept_name deptName, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'Scott' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.avatar, u.theme, u.is_tab;
2020-04-03 22:16:56 INFO  http-nio-8080-exec-5 p6spy 2020-04-03 22:16:56 | 耗时 1 ms | SQL 语句：
SELECT DEPT_ID, DEPT_NAME, MODIFY_TIME, CREATE_TIME, ORDER_NUM, PARENT_ID FROM t_dept;
2020-04-03 22:16:57 INFO  http-nio-8080-exec-10 p6spy 2020-04-03 22:16:57 | 耗时 1 ms | SQL 语句：
SELECT ROLE_ID, MODIFY_TIME, CREATE_TIME, ROLE_NAME, REMARK FROM t_role;
2020-04-03 22:17:35 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585922638748 paused.
2020-04-03 22:17:35 INFO  SpringContextShutdownHook org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-03 22:17:35 INFO  SpringContextShutdownHook org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2020-04-03 22:17:35 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585922638748 shutting down.
2020-04-03 22:17:35 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585922638748 paused.
2020-04-03 22:17:35 INFO  SpringContextShutdownHook org.quartz.core.QuartzScheduler Scheduler Eirc_Scheduler_$_DESKTOP-C7SKRPK1585922638748 shutdown complete.
2020-04-03 22:17:36 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2020-04-03 22:17:36 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2020-04-03 22:17:36 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2020-04-03 22:17:36 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2020-04-03 22:17:36 INFO  SpringContextShutdownHook com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2020-04-03 22:17:36 INFO  SpringContextShutdownHook com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
